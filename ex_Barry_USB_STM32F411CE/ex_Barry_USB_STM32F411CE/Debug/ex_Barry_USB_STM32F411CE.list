
ex_Barry_USB_STM32F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009408  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  0000b15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009684  08009684  0000b15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800968c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d98  2000015c  080097e8  0000b15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ef4  080097e8  0000bef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e9a  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa5  00000000  00000000  00022026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00025fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa6  00000000  00000000  00027480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f3  00000000  00000000  00028426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197ab  00000000  00000000  00042b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ab9  00000000  00000000  0005c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  000f5dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fb988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009590 	.word	0x08009590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08009590 	.word	0x08009590

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <atraso_ms>:
					"r_us:	   subs r0, r0, #1		\n\t"
					"bne  r_us						\n\t");		//2 ciclos gastos quando tomado, 1 contrário
}
//-----------------------------------------------------------------------------------------
 void atraso_ms(uint32_t valor)									//argumento passado pelo registrador r0
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	asm volatile ("movw r1, #:lower16:const_ms		\n\t"
 8000578:	f643 6180 	movw	r1, #16000	@ 0x3e80
 800057c:	f2c0 0100 	movt	r1, #0
 8000580:	fb00 f001 	mul.w	r0, r0, r1

08000584 <r_ms>:
 8000584:	3801      	subs	r0, #1
 8000586:	d1fd      	bne.n	8000584 <r_ms>
				  "mul  r0, r0, r1					\n\t"		//r0 = valor*(fcpu/3000), cálculo do número de repetições do laço
	
				  "r_ms:	   subs r0, r0, #1		\n\t"
				  "bne  r_ms						\n\t");
	
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000178 	.word	0x20000178
 80005c4:	20000218 	.word	0x20000218

080005c8 <vTask1>:
xTaskHandle		vTask1_id;
xTaskHandle		vTask2_id;

//--------------------------------------------------------------------------------
static void vTask1(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	const char *pcTaskMsg[] = {"Task 1 is running.\n"};
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <vTask1+0x20>)
 80005d2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		printf(*pcTaskMsg);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f916 	bl	8008808 <iprintf>

		atraso_ms(200);
 80005dc:	20c8      	movs	r0, #200	@ 0xc8
 80005de:	f7ff ffc7 	bl	8000570 <atraso_ms>
		printf(*pcTaskMsg);
 80005e2:	bf00      	nop
 80005e4:	e7f6      	b.n	80005d4 <vTask1+0xc>
 80005e6:	bf00      	nop
 80005e8:	080095a8 	.word	0x080095a8

080005ec <vTask2>:
	}
	vTaskDelete(vTask1_id);   /* Nunca deve chegar aqui! Crash na pilha!? */
}
//--------------------------------------------------------------------------------
static void vTask2(void *pvParameters)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	const char *pcTaskMsg[] = {"Task 2 is running.\n"};
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <vTask2+0x20>)
 80005f6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		printf(*pcTaskMsg);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 f904 	bl	8008808 <iprintf>

		atraso_ms(200);
 8000600:	20c8      	movs	r0, #200	@ 0xc8
 8000602:	f7ff ffb5 	bl	8000570 <atraso_ms>
		printf(*pcTaskMsg);
 8000606:	bf00      	nop
 8000608:	e7f6      	b.n	80005f8 <vTask2+0xc>
 800060a:	bf00      	nop
 800060c:	080095bc 	.word	0x080095bc

08000610 <main>:
	}
	vTaskDelete(vTask2_id);   /* Nunca deve chegar aqui! Crash na pilha!? */
}
//--------------------------------------------------------------------------------
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  HAL_Init();
 8000616:	f000 fab1 	bl	8000b7c <HAL_Init>
  SystemClock_Config();
 800061a:	f000 f841 	bl	80006a0 <SystemClock_Config>

  MX_GPIO_Init();
 800061e:	f000 f8a7 	bl	8000770 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000622:	f007 fb1f 	bl	8007c64 <MX_USB_DEVICE_Init>

  //RTOS
  xTaskCreate(vTask1, "Task 1", 256, NULL, 1, &vTask1_id);
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <main+0x4c>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000634:	490a      	ldr	r1, [pc, #40]	@ (8000660 <main+0x50>)
 8000636:	480b      	ldr	r0, [pc, #44]	@ (8000664 <main+0x54>)
 8000638:	f006 fab7 	bl	8006baa <xTaskCreate>
  xTaskCreate(vTask2, "Task 2", 256, NULL, 1, &vTask2_id);
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <main+0x58>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800064a:	4908      	ldr	r1, [pc, #32]	@ (800066c <main+0x5c>)
 800064c:	4808      	ldr	r0, [pc, #32]	@ (8000670 <main+0x60>)
 800064e:	f006 faac 	bl	8006baa <xTaskCreate>

  vTaskStartScheduler();	// apos este comando o RTOS passa a executar as tarefas
 8000652:	f006 fbf9 	bl	8006e48 <vTaskStartScheduler>

  while(1);
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x46>
 800065a:	bf00      	nop
 800065c:	20000418 	.word	0x20000418
 8000660:	080095d0 	.word	0x080095d0
 8000664:	080005c9 	.word	0x080005c9
 8000668:	2000041c 	.word	0x2000041c
 800066c:	080095d8 	.word	0x080095d8
 8000670:	080005ed 	.word	0x080005ed

08000674 <_write>:

}
//--------------------------------------------------------------------------------
// Redirect printf() to USB Virtual COM Port
int _write(int file, char *ptr, int len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
    while(CDC_Transmit_FS((uint8_t*) ptr, len)!=0);
 8000680:	bf00      	nop
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	f007 fba9 	bl	8007de0 <CDC_Transmit_FS>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f6      	bne.n	8000682 <_write+0xe>
    return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f008 f8bc 	bl	800882c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	@ (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a20      	ldr	r2, [pc, #128]	@ (800076c <SystemClock_Config+0xcc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <SystemClock_Config+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000710:	2319      	movs	r3, #25
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000714:	23c0      	movs	r3, #192	@ 0xc0
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 ff61 	bl	80025ec <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f882 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2103      	movs	r1, #3
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f9c3 	bl	8002adc <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800075c:	f000 f86c 	bl	8000838 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	@ 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_GPIO_Init+0x9c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <MX_GPIO_Init+0x9c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a18      	ldr	r2, [pc, #96]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a11      	ldr	r2, [pc, #68]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0xa0>)
 80007e2:	f000 fc97 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_GPIO_Init+0xa0>)
 8000800:	f000 fb04 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f9cb 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40000800 	.word	0x40000800

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa95 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	@ 0x38
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <HAL_InitTick+0xe4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a32      	ldr	r2, [pc, #200]	@ (8000980 <HAL_InitTick+0xe4>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b30      	ldr	r3, [pc, #192]	@ (8000980 <HAL_InitTick+0xe4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c8:	f107 0210 	add.w	r2, r7, #16
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 face 	bl	8002e74 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d103      	bne.n	80008ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e2:	f002 fab3 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80008e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80008e8:	e004      	b.n	80008f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ea:	f002 faaf 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80008ee:	4603      	mov	r3, r0
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <HAL_InitTick+0xe8>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	0c9b      	lsrs	r3, r3, #18
 80008fe:	3b01      	subs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <HAL_InitTick+0xec>)
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <HAL_InitTick+0xf0>)
 8000906:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <HAL_InitTick+0xec>)
 800090a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000910:	4a1d      	ldr	r2, [pc, #116]	@ (8000988 <HAL_InitTick+0xec>)
 8000912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000914:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <HAL_InitTick+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <HAL_InitTick+0xec>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_InitTick+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000928:	4817      	ldr	r0, [pc, #92]	@ (8000988 <HAL_InitTick+0xec>)
 800092a:	f002 fad5 	bl	8002ed8 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000934:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000938:	2b00      	cmp	r3, #0
 800093a:	d11b      	bne.n	8000974 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <HAL_InitTick+0xec>)
 800093e:	f002 fb25 	bl	8002f8c <HAL_TIM_Base_Start_IT>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000948:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800094c:	2b00      	cmp	r3, #0
 800094e:	d111      	bne.n	8000974 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000950:	201e      	movs	r0, #30
 8000952:	f000 fa4d 	bl	8000df0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d808      	bhi.n	800096e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	201e      	movs	r0, #30
 8000962:	f000 fa29 	bl	8000db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_InitTick+0xf4>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e002      	b.n	8000974 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000974:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000978:	4618      	mov	r0, r3
 800097a:	3738      	adds	r7, #56	@ 0x38
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	431bde83 	.word	0x431bde83
 8000988:	20000420 	.word	0x20000420
 800098c:	40000800 	.word	0x40000800
 8000990:	20000004 	.word	0x20000004

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <NMI_Handler+0x4>

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <MemManage_Handler+0x4>

080009ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <UsageFault_Handler+0x4>

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <TIM4_IRQHandler+0x10>)
 80009d2:	f002 fb3d 	bl	8003050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000420 	.word	0x20000420

080009e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <OTG_FS_IRQHandler+0x10>)
 80009e6:	f000 fcf2 	bl	80013ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200056a4 	.word	0x200056a4

080009f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
  }

  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f007 ff0e 	bl	80088e8 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000468 	.word	0x20000468
 8000b00:	20005ef8 	.word	0x20005ef8

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f007 fecd 	bl	80088f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd59 	bl	8000610 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000b6c:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 8000b70:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000b74:	20005ef4 	.word	0x20005ef4

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f8fc 	bl	8000da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff fe76 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe48 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	2000046c 	.word	0x2000046c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000046c 	.word	0x2000046c

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	@ (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	@ (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	@ 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff4c 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dca:	f7ff ff61 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff ffb1 	bl	8000d3c <NVIC_EncodePriority>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff80 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff54 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e159      	b.n	80010dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8148 	bne.w	80010d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d005      	beq.n	8000e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	f003 0201 	and.w	r2, r3, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d017      	beq.n	8000efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a2 	beq.w	80010d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b57      	ldr	r3, [pc, #348]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a56      	ldr	r2, [pc, #344]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b54      	ldr	r3, [pc, #336]	@ (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fae:	4a52      	ldr	r2, [pc, #328]	@ (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	@ (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x202>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	@ (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a47      	ldr	r2, [pc, #284]	@ (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a46      	ldr	r2, [pc, #280]	@ (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	@ (800110c <HAL_GPIO_Init+0x300>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1f2>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	@ (80010f8 <HAL_GPIO_Init+0x2ec>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a2f      	ldr	r2, [pc, #188]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <HAL_GPIO_Init+0x304>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a24      	ldr	r2, [pc, #144]	@ (8001110 <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <HAL_GPIO_Init+0x304>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f aea2 	bls.w	8000e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40013c00 	.word	0x40013c00

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af02      	add	r7, sp, #8
 800114c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e101      	b.n	800135c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f006 ff7c 	bl	8008070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001186:	d102      	bne.n	800118e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fa2b 	bl	80035ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7c1a      	ldrb	r2, [r3, #16]
 80011a0:	f88d 2000 	strb.w	r2, [sp]
 80011a4:	3304      	adds	r3, #4
 80011a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a8:	f002 f90a 	bl	80033c0 <USB_CoreInit>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2202      	movs	r2, #2
 80011b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0ce      	b.n	800135c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fa23 	bl	8003610 <USB_SetCurrentMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0bf      	b.n	800135c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e04a      	b.n	8001278 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3315      	adds	r3, #21
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3314      	adds	r3, #20
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	b298      	uxth	r0, r3
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	332e      	adds	r3, #46	@ 0x2e
 800121e:	4602      	mov	r2, r0
 8001220:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3318      	adds	r3, #24
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	331c      	adds	r3, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3320      	adds	r3, #32
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3324      	adds	r3, #36	@ 0x24
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	429a      	cmp	r2, r3
 8001280:	d3af      	bcc.n	80011e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e044      	b.n	8001312 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3b5      	bcc.n	8001288 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7c1a      	ldrb	r2, [r3, #16]
 8001324:	f88d 2000 	strb.w	r2, [sp]
 8001328:	3304      	adds	r3, #4
 800132a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132c:	f002 f9bc 	bl	80036a8 <USB_DevInit>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2202      	movs	r2, #2
 800133a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00c      	b.n	800135c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fa06 	bl	8004766 <USB_DevDisconnect>

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_PCD_Start+0x1c>
 800137c:	2302      	movs	r3, #2
 800137e:	e022      	b.n	80013c6 <HAL_PCD_Start+0x62>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 f90d 	bl	80035cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 f9b4 	bl	8004724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ce:	b590      	push	{r4, r7, lr}
 80013d0:	b08d      	sub	sp, #52	@ 0x34
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fa72 	bl	80048ce <USB_GetMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 848c 	bne.w	8001d0a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f9d6 	bl	80047a8 <USB_ReadInterrupts>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8482 	beq.w	8001d08 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f9c3 	bl	80047a8 <USB_ReadInterrupts>
 8001422:	4603      	mov	r3, r0
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b02      	cmp	r3, #2
 800142a:	d107      	bne.n	800143c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f002 0202 	and.w	r2, r2, #2
 800143a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f003 f9b1 	bl	80047a8 <USB_ReadInterrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b10      	cmp	r3, #16
 800144e:	d161      	bne.n	8001514 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0210 	bic.w	r2, r2, #16
 800145e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f003 020f 	and.w	r2, r3, #15
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	0c5b      	lsrs	r3, r3, #17
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2b02      	cmp	r3, #2
 800148a:	d124      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d035      	beq.n	8001504 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	6a38      	ldr	r0, [r7, #32]
 80014ac:	f002 ffe8 	bl	8004480 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014bc:	441a      	add	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ce:	441a      	add	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	e016      	b.n	8001504 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0c5b      	lsrs	r3, r3, #17
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d110      	bne.n	8001504 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80014e8:	2208      	movs	r2, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	6a38      	ldr	r0, [r7, #32]
 80014ee:	f002 ffc7 	bl	8004480 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fe:	441a      	add	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0210 	orr.w	r2, r2, #16
 8001512:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f003 f945 	bl	80047a8 <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001524:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001528:	f040 80a7 	bne.w	800167a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f94a 	bl	80047ce <USB_ReadDevAllOutEpInterrupt>
 800153a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800153c:	e099      	b.n	8001672 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 808e 	beq.w	8001666 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f003 f96e 	bl	8004836 <USB_ReadDevOutEPInterrupt>
 800155a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2301      	movs	r3, #1
 8001576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fea4 	bl	80022c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001596:	461a      	mov	r2, r3
 8001598:	2308      	movs	r3, #8
 800159a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800159c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 ff7a 	bl	8002498 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ba:	461a      	mov	r2, r3
 80015bc:	2310      	movs	r3, #16
 80015be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d030      	beq.n	800162c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d2:	2b80      	cmp	r3, #128	@ 0x80
 80015d4:	d109      	bne.n	80015ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	3304      	adds	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	78db      	ldrb	r3, [r3, #3]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2200      	movs	r2, #0
 800160c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f006 fe27 	bl	8008268 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	2302      	movs	r3, #2
 800162a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001642:	461a      	mov	r2, r3
 8001644:	2320      	movs	r3, #32
 8001646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800165e:	461a      	mov	r2, r3
 8001660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001664:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f af62 	bne.w	800153e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 f892 	bl	80047a8 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800168a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800168e:	f040 80db 	bne.w	8001848 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f8b3 	bl	8004802 <USB_ReadDevAllInEpInterrupt>
 800169c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016a2:	e0cd      	b.n	8001840 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80c2 	beq.w	8001834 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f8d9 	bl	8004872 <USB_ReadDevInEPInterrupt>
 80016c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d057      	beq.n	800177c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	2201      	movs	r2, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69f9      	ldr	r1, [r7, #28]
 80016e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80016ec:	4013      	ands	r3, r2
 80016ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fc:	461a      	mov	r2, r3
 80016fe:	2301      	movs	r3, #1
 8001700:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	799b      	ldrb	r3, [r3, #6]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d132      	bne.n	8001770 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3320      	adds	r3, #32
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001720:	4613      	mov	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4403      	add	r3, r0
 800172a:	331c      	adds	r3, #28
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4419      	add	r1, r3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4403      	add	r3, r0
 800173e:	3320      	adds	r3, #32
 8001740:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d113      	bne.n	8001770 <HAL_PCD_IRQHandler+0x3a2>
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	3324      	adds	r3, #36	@ 0x24
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001768:	461a      	mov	r2, r3
 800176a:	2101      	movs	r1, #1
 800176c:	f003 f8e0 	bl	8004930 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f006 fcfb 	bl	8008172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	2308      	movs	r3, #8
 8001796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ae:	461a      	mov	r2, r3
 80017b0:	2310      	movs	r3, #16
 80017b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	2340      	movs	r3, #64	@ 0x40
 80017ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d023      	beq.n	8001822 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017dc:	6a38      	ldr	r0, [r7, #32]
 80017de:	f002 f8c7 	bl	8003970 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	3310      	adds	r3, #16
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	3304      	adds	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	78db      	ldrb	r3, [r3, #3]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2200      	movs	r2, #0
 8001802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f006 fd3e 	bl	800828c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800181c:	461a      	mov	r2, r3
 800181e:	2302      	movs	r3, #2
 8001820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800182c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fcbd 	bl	80021ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	3301      	adds	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800183a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f af2e 	bne.w	80016a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 ffab 	bl	80047a8 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800185c:	d122      	bne.n	80018a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001884:	2100      	movs	r1, #0
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fea4 	bl	80025d4 <HAL_PCDEx_LPM_Callback>
 800188c:	e002      	b.n	8001894 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f006 fcdc 	bl	800824c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 ff7d 	bl	80047a8 <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b8:	d112      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fc98 	bl	8008200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80018de:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 ff5f 	bl	80047a8 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018f4:	f040 80b7 	bne.w	8001a66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2110      	movs	r1, #16
 8001912:	4618      	mov	r0, r3
 8001914:	f002 f82c 	bl	8003970 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191c:	e046      	b.n	80019ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800191e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800192a:	461a      	mov	r2, r3
 800192c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001930:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001942:	0151      	lsls	r1, r2, #5
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	440a      	add	r2, r1
 8001948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800194c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800195e:	461a      	mov	r2, r3
 8001960:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001964:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001976:	0151      	lsls	r1, r2, #5
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	440a      	add	r2, r1
 800197c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001980:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001984:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001996:	0151      	lsls	r1, r2, #5
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	440a      	add	r2, r1
 800199c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a8:	3301      	adds	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	461a      	mov	r2, r3
 80019b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d3b2      	bcc.n	800191e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80019ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7bdb      	ldrb	r3, [r3, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019e4:	f043 030b 	orr.w	r3, r3, #11
 80019e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019fa:	f043 030b 	orr.w	r3, r3, #11
 80019fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a00:	e015      	b.n	8001a2e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a14:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a28:	f043 030b 	orr.w	r3, r3, #11
 8001a2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a50:	461a      	mov	r2, r3
 8001a52:	f002 ff6d 	bl	8004930 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fe9c 	bl	80047a8 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a7a:	d123      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 ff32 	bl	80048ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 ffe9 	bl	8003a62 <USB_GetDevSpeed>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681c      	ldr	r4, [r3, #0]
 8001a9c:	f001 f9ca 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f001 fced 	bl	8003488 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f006 fb87 	bl	80081c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fe6d 	bl	80047a8 <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d10a      	bne.n	8001aee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f006 fb64 	bl	80081a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f002 0208 	and.w	r2, r2, #8
 8001aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fe58 	bl	80047a8 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afe:	2b80      	cmp	r3, #128	@ 0x80
 8001b00:	d123      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0e:	2301      	movs	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b12:	e014      	b.n	8001b3e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fb0a 	bl	800214c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	461a      	mov	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d3e4      	bcc.n	8001b14 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fe2a 	bl	80047a8 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b5e:	d13c      	bne.n	8001bda <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b64:	e02b      	b.n	8001bbe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3318      	adds	r3, #24
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d115      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da12      	bge.n	8001bb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3317      	adds	r3, #23
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 faca 	bl	800214c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	3301      	adds	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	791b      	ldrb	r3, [r3, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d3cd      	bcc.n	8001b66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fde2 	bl	80047a8 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bee:	d156      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf4:	e045      	b.n	8001c82 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d12e      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da2b      	bge.n	8001c7c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d121      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c78:	6053      	str	r3, [r2, #4]
            break;
 8001c7a:	e008      	b.n	8001c8e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	791b      	ldrb	r3, [r3, #4]
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d3b3      	bcc.n	8001bf6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fd80 	bl	80047a8 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb2:	d10a      	bne.n	8001cca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f006 fafb 	bl	80082b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fd6a 	bl	80047a8 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d115      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f006 faeb 	bl	80082cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	e000      	b.n	8001d0a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3734      	adds	r7, #52	@ 0x34
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_SetAddress+0x1a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e012      	b.n	8001d50 <HAL_PCD_SetAddress+0x40>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fcc9 	bl	80046d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	803b      	strh	r3, [r7, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da0f      	bge.n	8001d9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	3310      	adds	r3, #16
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	3304      	adds	r3, #4
 8001d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	705a      	strb	r2, [r3, #1]
 8001d9c:	e00f      	b.n	8001dbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001dca:	883b      	ldrh	r3, [r7, #0]
 8001dcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	78ba      	ldrb	r2, [r7, #2]
 8001dd8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dec:	78bb      	ldrb	r3, [r7, #2]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_PCD_EP_Open+0xae>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e00e      	b.n	8001e24 <HAL_PCD_EP_Open+0xcc>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fe49 	bl	8003aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e22:	7afb      	ldrb	r3, [r7, #11]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0f      	bge.n	8001e60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3310      	adds	r3, #16
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
 8001e5e:	e00f      	b.n	8001e80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_PCD_EP_Close+0x6e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e00e      	b.n	8001eb8 <HAL_PCD_EP_Close+0x8c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fe87 	bl	8003bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2200      	movs	r2, #0
 8001f00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	799b      	ldrb	r3, [r3, #6]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	799b      	ldrb	r3, [r3, #6]
 8001f24:	461a      	mov	r2, r3
 8001f26:	6979      	ldr	r1, [r7, #20]
 8001f28:	f001 ff24 	bl	8003d74 <USB_EPStartXfer>

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f58:	681b      	ldr	r3, [r3, #0]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3310      	adds	r3, #16
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	799b      	ldrb	r3, [r3, #6]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	f001 fed2 	bl	8003d74 <USB_EPStartXfer>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	7912      	ldrb	r2, [r2, #4]
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e04f      	b.n	8002098 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da0f      	bge.n	8002020 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	3310      	adds	r3, #16
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	705a      	strb	r2, [r3, #1]
 800201e:	e00d      	b.n	800203c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_PCD_EP_SetStall+0x82>
 8002058:	2302      	movs	r3, #2
 800205a:	e01d      	b.n	8002098 <HAL_PCD_EP_SetStall+0xbe>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fa60 	bl	8004530 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7999      	ldrb	r1, [r3, #6]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002088:	461a      	mov	r2, r3
 800208a:	f002 fc51 	bl	8004930 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	7912      	ldrb	r2, [r2, #4]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e042      	b.n	8002144 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da0f      	bge.n	80020e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3310      	adds	r3, #16
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	3304      	adds	r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	705a      	strb	r2, [r3, #1]
 80020e4:	e00f      	b.n	8002106 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_PCD_EP_ClrStall+0x86>
 8002122:	2302      	movs	r3, #2
 8002124:	e00e      	b.n	8002144 <HAL_PCD_EP_ClrStall+0xa4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fa69 	bl	800460c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0c      	bge.n	800217a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3310      	adds	r3, #16
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e00c      	b.n	8002194 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	4618      	mov	r0, r3
 800219c:	f002 f888 	bl	80042b0 <USB_EPStopXfer>
 80021a0:	4603      	mov	r3, r0
 80021a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021a4:	7afb      	ldrb	r3, [r7, #11]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b08a      	sub	sp, #40	@ 0x28
 80021b2:	af02      	add	r7, sp, #8
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3310      	adds	r3, #16
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d901      	bls.n	80021e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d902      	bls.n	8002202 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3303      	adds	r3, #3
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800220a:	e02a      	b.n	8002262 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	429a      	cmp	r2, r3
 8002220:	d902      	bls.n	8002228 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3303      	adds	r3, #3
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68d9      	ldr	r1, [r3, #12]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4603      	mov	r3, r0
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f002 f8dd 	bl	8004404 <USB_WritePacket>

    ep->xfer_buff  += len;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	429a      	cmp	r2, r3
 8002276:	d809      	bhi.n	800228c <PCD_WriteEmptyTxFifo+0xde>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002280:	429a      	cmp	r2, r3
 8002282:	d203      	bcs.n	800228c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1bf      	bne.n	800220c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d811      	bhi.n	80022bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	2201      	movs	r2, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	6939      	ldr	r1, [r7, #16]
 80022b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022b8:	4013      	ands	r3, r2
 80022ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	333c      	adds	r3, #60	@ 0x3c
 80022e0:	3304      	adds	r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	799b      	ldrb	r3, [r3, #6]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d17b      	bne.n	80023f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4a61      	ldr	r2, [pc, #388]	@ (8002490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	f240 80b9 	bls.w	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80b3 	beq.w	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002330:	6093      	str	r3, [r2, #8]
 8002332:	e0a7      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2320      	movs	r3, #32
 800234e:	6093      	str	r3, [r2, #8]
 8002350:	e098      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 8093 	bne.w	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4a4b      	ldr	r2, [pc, #300]	@ (8002490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d90f      	bls.n	8002386 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237c:	461a      	mov	r2, r3
 800237e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002382:	6093      	str	r3, [r2, #8]
 8002384:	e07e      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	3304      	adds	r3, #4
 800239a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d114      	bne.n	80023e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023d0:	461a      	mov	r2, r3
 80023d2:	2101      	movs	r1, #1
 80023d4:	f002 faac 	bl	8004930 <USB_EP0_OutStart>
 80023d8:	e006      	b.n	80023e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	441a      	add	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 fea4 	bl	800813c <HAL_PCD_DataOutStageCallback>
 80023f4:	e046      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d124      	bne.n	8002448 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800241a:	6093      	str	r3, [r2, #8]
 800241c:	e032      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2320      	movs	r3, #32
 8002438:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f005 fe7b 	bl	800813c <HAL_PCD_DataOutStageCallback>
 8002446:	e01d      	b.n	8002484 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d114      	bne.n	8002478 <PCD_EP_OutXfrComplete_int+0x1b0>
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002470:	461a      	mov	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	f002 fa5c 	bl	8004930 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f005 fe5c 	bl	800813c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	4f54300a 	.word	0x4f54300a
 8002494:	4f54310a 	.word	0x4f54310a

08002498 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	333c      	adds	r3, #60	@ 0x3c
 80024b0:	3304      	adds	r3, #4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d90e      	bls.n	80024ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e4:	461a      	mov	r2, r3
 80024e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f005 fe13 	bl	8008118 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <PCD_EP_OutSetupPacket_int+0x88>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d90c      	bls.n	8002514 <PCD_EP_OutSetupPacket_int+0x7c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800250c:	461a      	mov	r2, r3
 800250e:	2101      	movs	r1, #1
 8002510:	f002 fa0e 	bl	8004930 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	4f54300a 	.word	0x4f54300a

08002524 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
 8002530:	4613      	mov	r3, r2
 8002532:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002542:	883b      	ldrh	r3, [r7, #0]
 8002544:	0419      	lsls	r1, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	430a      	orrs	r2, r1
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002550:	e028      	b.n	80025a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4413      	add	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e00d      	b.n	8002582 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	3340      	adds	r3, #64	@ 0x40
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	3301      	adds	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	3b01      	subs	r3, #1
 8002588:	429a      	cmp	r2, r3
 800258a:	d3ec      	bcc.n	8002566 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800258c:	883b      	ldrh	r3, [r7, #0]
 800258e:	0418      	lsls	r0, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	3b01      	subs	r3, #1
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	4302      	orrs	r2, r0
 800259c:	3340      	adds	r3, #64	@ 0x40
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e267      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d075      	beq.n	80026f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260a:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b85      	ldr	r3, [pc, #532]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800261e:	2b08      	cmp	r3, #8
 8002620:	d112      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b82      	ldr	r3, [pc, #520]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b7e      	ldr	r3, [pc, #504]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <HAL_RCC_OscConfig+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e242      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x74>
 8002652:	4b76      	ldr	r3, [pc, #472]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a75      	ldr	r2, [pc, #468]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x98>
 800266a:	4b70      	ldr	r3, [pc, #448]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6f      	ldr	r2, [pc, #444]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6d      	ldr	r3, [pc, #436]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6c      	ldr	r2, [pc, #432]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002684:	4b69      	ldr	r3, [pc, #420]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a68      	ldr	r2, [pc, #416]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b66      	ldr	r3, [pc, #408]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a65      	ldr	r2, [pc, #404]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe faa0 	bl	8000be8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fa9c 	bl	8000be8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e207      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b5b      	ldr	r3, [pc, #364]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xc0>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fa8c 	bl	8000be8 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fa88 	bl	8000be8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1f3      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b51      	ldr	r3, [pc, #324]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0xe8>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002702:	4b4a      	ldr	r3, [pc, #296]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b44      	ldr	r3, [pc, #272]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1c7      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4937      	ldr	r1, [pc, #220]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_RCC_OscConfig+0x244>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fa41 	bl	8000be8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe fa3d 	bl	8000be8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1a8      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4925      	ldr	r1, [pc, #148]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_OscConfig+0x244>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fa20 	bl	8000be8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ac:	f7fe fa1c 	bl	8000be8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e187      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d036      	beq.n	8002844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_RCC_OscConfig+0x248>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fa00 	bl	8000be8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe f9fc 	bl	8000be8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e167      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x200>
 800280a:	e01b      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_OscConfig+0x248>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe f9e9 	bl	8000be8 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	e00e      	b.n	8002838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe f9e5 	bl	8000be8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d907      	bls.n	8002838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e150      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	42470000 	.word	0x42470000
 8002834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ea      	bne.n	800281a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8097 	beq.w	8002980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	4b7d      	ldr	r3, [pc, #500]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b77      	ldr	r3, [pc, #476]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b74      	ldr	r3, [pc, #464]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a73      	ldr	r2, [pc, #460]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7fe f9a5 	bl	8000be8 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7fe f9a1 	bl	8000be8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e10c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2ea>
 80028c8:	4b64      	ldr	r3, [pc, #400]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a63      	ldr	r2, [pc, #396]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d4:	e01c      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x30c>
 80028de:	4b5f      	ldr	r3, [pc, #380]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ea:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a5b      	ldr	r2, [pc, #364]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028f8:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fc:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	@ 0x70
 8002904:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a54      	ldr	r2, [pc, #336]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe f966 	bl	8000be8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe f962 	bl	8000be8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0cb      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ee      	beq.n	8002920 <HAL_RCC_OscConfig+0x334>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7fe f950 	bl	8000be8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe f94c 	bl	8000be8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0b5      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002962:	4b3e      	ldr	r3, [pc, #248]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ee      	bne.n	800294c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002974:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	4a38      	ldr	r2, [pc, #224]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a1 	beq.w	8002acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298a:	4b34      	ldr	r3, [pc, #208]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d05c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d141      	bne.n	8002a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe f920 	bl	8000be8 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f91c 	bl	8000be8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e087      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	491b      	ldr	r1, [pc, #108]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe f8f5 	bl	8000be8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe f8f1 	bl	8000be8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e05c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x416>
 8002a20:	e054      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe f8de 	bl	8000be8 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe f8da 	bl	8000be8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e045      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x444>
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e038      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d121      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe f80c 	bl	8000be8 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7fe f808 	bl	8000be8 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f821 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fe0a 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08009630 	.word	0x08009630
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b090      	sub	sp, #64	@ 0x40
 8002cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	f200 80a1 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x34>
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cda:	e09b      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b53      	ldr	r3, [pc, #332]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce0:	e09b      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce2:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce6:	e098      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d10:	2100      	movs	r1, #0
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d14:	fb03 f201 	mul.w	r2, r3, r1
 8002d18:	2300      	movs	r3, #0
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d22:	fba0 1202 	umull	r1, r2, r0, r2
 8002d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d28:	460a      	mov	r2, r1
 8002d2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2e:	4413      	add	r3, r2
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d34:	2200      	movs	r2, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	61fa      	str	r2, [r7, #28]
 8002d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d42:	f7fd fa9d 	bl	8000280 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4e:	e053      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	2200      	movs	r2, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	617a      	str	r2, [r7, #20]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d62:	f04f 0b00 	mov.w	fp, #0
 8002d66:	4652      	mov	r2, sl
 8002d68:	465b      	mov	r3, fp
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d82:	eb63 090b 	sbc.w	r9, r3, fp
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	00eb      	lsls	r3, r5, #3
 8002dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db0:	00e2      	lsls	r2, r4, #3
 8002db2:	4614      	mov	r4, r2
 8002db4:	461d      	mov	r5, r3
 8002db6:	eb14 030a 	adds.w	r3, r4, sl
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	eb45 030b 	adc.w	r3, r5, fp
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	028b      	lsls	r3, r1, #10
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd8:	4621      	mov	r1, r4
 8002dda:	028a      	lsls	r2, r1, #10
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	2200      	movs	r2, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	60fa      	str	r2, [r7, #12]
 8002de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dec:	f7fd fa48 	bl	8000280 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3740      	adds	r7, #64	@ 0x40
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	017d7840 	.word	0x017d7840

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a9b      	lsrs	r3, r3, #10
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08009640 	.word	0x08009640

08002e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	220f      	movs	r2, #15
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e84:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <HAL_RCC_GetClockConfig+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e041      	b.n	8002f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f839 	bl	8002f76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 f9b2 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e044      	b.n	800302e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_TIM_Base_Start_IT+0xb0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003040 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d020      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0202 	mvn.w	r2, #2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8d2 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8c4 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8d5 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d020      	beq.n	8003100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01b      	beq.n	8003100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0204 	mvn.w	r2, #4
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8ac 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f89e 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8af 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0208 	mvn.w	r2, #8
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2204      	movs	r2, #4
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f886 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f878 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f889 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d020      	beq.n	8003198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0210 	mvn.w	r2, #16
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2208      	movs	r2, #8
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f860 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f852 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f863 	bl	8003258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0201 	mvn.w	r2, #1
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fb2c 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8e6 	bl	80033ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f834 	bl	800326c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0220 	mvn.w	r2, #32
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8b8 	bl	8003398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3a      	ldr	r2, [pc, #232]	@ (800337c <TIM_Base_SetConfig+0xfc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a37      	ldr	r2, [pc, #220]	@ (8003380 <TIM_Base_SetConfig+0x100>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a36      	ldr	r2, [pc, #216]	@ (8003384 <TIM_Base_SetConfig+0x104>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a35      	ldr	r2, [pc, #212]	@ (8003388 <TIM_Base_SetConfig+0x108>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2b      	ldr	r2, [pc, #172]	@ (800337c <TIM_Base_SetConfig+0xfc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <TIM_Base_SetConfig+0x100>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <TIM_Base_SetConfig+0x104>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <TIM_Base_SetConfig+0x108>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a25      	ldr	r2, [pc, #148]	@ (800338c <TIM_Base_SetConfig+0x10c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a24      	ldr	r2, [pc, #144]	@ (8003390 <TIM_Base_SetConfig+0x110>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a23      	ldr	r2, [pc, #140]	@ (8003394 <TIM_Base_SetConfig+0x114>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0e      	ldr	r2, [pc, #56]	@ (800337c <TIM_Base_SetConfig+0xfc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
  }
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40014000 	.word	0x40014000
 8003390:	40014400 	.word	0x40014400
 8003394:	40014800 	.word	0x40014800

08003398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033c0:	b084      	sub	sp, #16
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	f107 001c 	add.w	r0, r7, #28
 80033ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d123      	bne.n	8003422 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80033ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 fae8 	bl	80049ec <USB_CoreReset>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e01b      	b.n	800345a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f001 fadc 	bl	80049ec <USB_CoreReset>
 8003434:	4603      	mov	r3, r0
 8003436:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003438:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
 800344c:	e005      	b.n	800345a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003452:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800345a:	7fbb      	ldrb	r3, [r7, #30]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10b      	bne.n	8003478 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f043 0206 	orr.w	r2, r3, #6
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003484:	b004      	add	sp, #16
 8003486:	4770      	bx	lr

08003488 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d165      	bne.n	8003568 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a41      	ldr	r2, [pc, #260]	@ (80035a4 <USB_SetTurnaroundTime+0x11c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d906      	bls.n	80034b2 <USB_SetTurnaroundTime+0x2a>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <USB_SetTurnaroundTime+0x120>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d202      	bcs.n	80034b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034ac:	230f      	movs	r3, #15
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e062      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a3c      	ldr	r2, [pc, #240]	@ (80035a8 <USB_SetTurnaroundTime+0x120>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d306      	bcc.n	80034c8 <USB_SetTurnaroundTime+0x40>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a3b      	ldr	r2, [pc, #236]	@ (80035ac <USB_SetTurnaroundTime+0x124>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d202      	bcs.n	80034c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034c2:	230e      	movs	r3, #14
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e057      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <USB_SetTurnaroundTime+0x124>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d306      	bcc.n	80034de <USB_SetTurnaroundTime+0x56>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <USB_SetTurnaroundTime+0x128>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d202      	bcs.n	80034de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034d8:	230d      	movs	r3, #13
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e04c      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4a33      	ldr	r2, [pc, #204]	@ (80035b0 <USB_SetTurnaroundTime+0x128>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d306      	bcc.n	80034f4 <USB_SetTurnaroundTime+0x6c>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4a32      	ldr	r2, [pc, #200]	@ (80035b4 <USB_SetTurnaroundTime+0x12c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ee:	230c      	movs	r3, #12
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e041      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <USB_SetTurnaroundTime+0x12c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d906      	bls.n	800350a <USB_SetTurnaroundTime+0x82>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a2e      	ldr	r2, [pc, #184]	@ (80035b8 <USB_SetTurnaroundTime+0x130>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d802      	bhi.n	800350a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003504:	230b      	movs	r3, #11
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e036      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a2a      	ldr	r2, [pc, #168]	@ (80035b8 <USB_SetTurnaroundTime+0x130>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d906      	bls.n	8003520 <USB_SetTurnaroundTime+0x98>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <USB_SetTurnaroundTime+0x134>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d802      	bhi.n	8003520 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800351a:	230a      	movs	r3, #10
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e02b      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4a26      	ldr	r2, [pc, #152]	@ (80035bc <USB_SetTurnaroundTime+0x134>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d906      	bls.n	8003536 <USB_SetTurnaroundTime+0xae>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4a25      	ldr	r2, [pc, #148]	@ (80035c0 <USB_SetTurnaroundTime+0x138>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d202      	bcs.n	8003536 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003530:	2309      	movs	r3, #9
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e020      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4a21      	ldr	r2, [pc, #132]	@ (80035c0 <USB_SetTurnaroundTime+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d306      	bcc.n	800354c <USB_SetTurnaroundTime+0xc4>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4a20      	ldr	r2, [pc, #128]	@ (80035c4 <USB_SetTurnaroundTime+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d802      	bhi.n	800354c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003546:	2308      	movs	r3, #8
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e015      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <USB_SetTurnaroundTime+0x13c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d906      	bls.n	8003562 <USB_SetTurnaroundTime+0xda>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4a1c      	ldr	r2, [pc, #112]	@ (80035c8 <USB_SetTurnaroundTime+0x140>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d202      	bcs.n	8003562 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800355c:	2307      	movs	r3, #7
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e00a      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003562:	2306      	movs	r3, #6
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e007      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800356e:	2309      	movs	r3, #9
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e001      	b.n	8003578 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003574:	2309      	movs	r3, #9
 8003576:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	00d8acbf 	.word	0x00d8acbf
 80035a8:	00e4e1c0 	.word	0x00e4e1c0
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	01067380 	.word	0x01067380
 80035b4:	011a499f 	.word	0x011a499f
 80035b8:	01312cff 	.word	0x01312cff
 80035bc:	014ca43f 	.word	0x014ca43f
 80035c0:	016e3600 	.word	0x016e3600
 80035c4:	01a6ab1f 	.word	0x01a6ab1f
 80035c8:	01e84800 	.word	0x01e84800

080035cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800363e:	200a      	movs	r0, #10
 8003640:	f7fd fade 	bl	8000c00 <HAL_Delay>
      ms += 10U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	330a      	adds	r3, #10
 8003648:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 f93f 	bl	80048ce <USB_GetMode>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d01e      	beq.n	8003694 <USB_SetCurrentMode+0x84>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2bc7      	cmp	r3, #199	@ 0xc7
 800365a:	d9f0      	bls.n	800363e <USB_SetCurrentMode+0x2e>
 800365c:	e01a      	b.n	8003694 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d115      	bne.n	8003690 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003670:	200a      	movs	r0, #10
 8003672:	f7fd fac5 	bl	8000c00 <HAL_Delay>
      ms += 10U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	330a      	adds	r3, #10
 800367a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 f926 	bl	80048ce <USB_GetMode>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <USB_SetCurrentMode+0x84>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2bc7      	cmp	r3, #199	@ 0xc7
 800368c:	d9f0      	bls.n	8003670 <USB_SetCurrentMode+0x60>
 800368e:	e001      	b.n	8003694 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e005      	b.n	80036a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2bc8      	cmp	r3, #200	@ 0xc8
 8003698:	d101      	bne.n	800369e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a8:	b084      	sub	sp, #16
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80036b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e009      	b.n	80036dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3340      	adds	r3, #64	@ 0x40
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	2200      	movs	r2, #0
 80036d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3301      	adds	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0e      	cmp	r3, #14
 80036e0:	d9f2      	bls.n	80036c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11c      	bne.n	8003724 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003702:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38
 8003722:	e00b      	b.n	800373c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003742:	461a      	mov	r2, r3
 8003744:	2300      	movs	r3, #0
 8003746:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003748:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10d      	bne.n	800376c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f968 	bl	8003a30 <USB_SetDevSpeed>
 8003760:	e008      	b.n	8003774 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003762:	2101      	movs	r1, #1
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f963 	bl	8003a30 <USB_SetDevSpeed>
 800376a:	e003      	b.n	8003774 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800376c:	2103      	movs	r1, #3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f95e 	bl	8003a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003774:	2110      	movs	r1, #16
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8fa 	bl	8003970 <USB_FlushTxFifo>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f924 	bl	80039d4 <USB_FlushRxFifo>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379c:	461a      	mov	r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a8:	461a      	mov	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b4:	461a      	mov	r2, r3
 80037b6:	2300      	movs	r3, #0
 80037b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e043      	b.n	8003848 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037d6:	d118      	bne.n	800380a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ea:	461a      	mov	r2, r3
 80037ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e013      	b.n	800381c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e008      	b.n	800381c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	2300      	movs	r3, #0
 800382c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383a:	461a      	mov	r2, r3
 800383c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003840:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3301      	adds	r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800384c:	461a      	mov	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4293      	cmp	r3, r2
 8003852:	d3b5      	bcc.n	80037c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e043      	b.n	80038e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800386c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003870:	d118      	bne.n	80038a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e013      	b.n	80038b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e008      	b.n	80038b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	2300      	movs	r3, #0
 80038c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3301      	adds	r3, #1
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038e6:	461a      	mov	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d3b5      	bcc.n	800385a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003900:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800390e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f043 0210 	orr.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	4b10      	ldr	r3, [pc, #64]	@ (800396c <USB_DevInit+0x2c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003930:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f043 0208 	orr.w	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003944:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003968:	b004      	add	sp, #16
 800396a:	4770      	bx	lr
 800396c:	803c3800 	.word	0x803c3800

08003970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800398a:	d901      	bls.n	8003990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e01b      	b.n	80039c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	daf2      	bge.n	800397e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	019b      	lsls	r3, r3, #6
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039b4:	d901      	bls.n	80039ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d0f0      	beq.n	80039a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039ec:	d901      	bls.n	80039f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e018      	b.n	8003a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	daf2      	bge.n	80039e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2210      	movs	r2, #16
 8003a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a10:	d901      	bls.n	8003a16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e006      	b.n	8003a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d0f0      	beq.n	8003a04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0306 	and.w	r3, r3, #6
 8003a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]
 8003a86:	e00a      	b.n	8003a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d002      	beq.n	8003a94 <USB_GetDevSpeed+0x32>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d102      	bne.n	8003a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a94:	2302      	movs	r3, #2
 8003a96:	75fb      	strb	r3, [r7, #23]
 8003a98:	e001      	b.n	8003a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d13a      	bne.n	8003b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d155      	bne.n	8003bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	791b      	ldrb	r3, [r3, #4]
 8003b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	059b      	lsls	r3, r3, #22
 8003b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e036      	b.n	8003bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11a      	bne.n	8003bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b92:	430b      	orrs	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d161      	bne.n	8003c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bee:	d11f      	bne.n	8003c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c50:	4013      	ands	r3, r2
 8003c52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c74:	4013      	ands	r3, r2
 8003c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	0159      	lsls	r1, r3, #5
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	440b      	add	r3, r1
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c92:	4619      	mov	r1, r3
 8003c94:	4b35      	ldr	r3, [pc, #212]	@ (8003d6c <USB_DeactivateEndpoint+0x1b0>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
 8003c9a:	e060      	b.n	8003d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb2:	d11f      	bne.n	8003cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	0151      	lsls	r1, r2, #5
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	440a      	add	r2, r1
 8003cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	43db      	mvns	r3, r3
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0159      	lsls	r1, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d56:	4619      	mov	r1, r3
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <USB_DeactivateEndpoint+0x1b4>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	ec337800 	.word	0xec337800
 8003d70:	eff37800 	.word	0xeff37800

08003d74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f040 817f 	bne.w	8004094 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d132      	bne.n	8003e04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ddc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dfc:	0cdb      	lsrs	r3, r3, #19
 8003dfe:	04db      	lsls	r3, r3, #19
 8003e00:	6113      	str	r3, [r2, #16]
 8003e02:	e097      	b.n	8003f34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e1e:	0cdb      	lsrs	r3, r3, #19
 8003e20:	04db      	lsls	r3, r3, #19
 8003e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11a      	bne.n	8003e84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d903      	bls.n	8003e62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e80:	6113      	str	r3, [r2, #16]
 8003e82:	e044      	b.n	8003f0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	8afb      	ldrh	r3, [r7, #22]
 8003eaa:	04d9      	lsls	r1, r3, #19
 8003eac:	4ba4      	ldr	r3, [pc, #656]	@ (8004140 <USB_EPStartXfer+0x3cc>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	0148      	lsls	r0, r1, #5
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	4401      	add	r1, r0
 8003eb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d122      	bne.n	8003f0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003ee6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	8afb      	ldrh	r3, [r7, #22]
 8003ef8:	075b      	lsls	r3, r3, #29
 8003efa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003efe:	69b9      	ldr	r1, [r7, #24]
 8003f00:	0148      	lsls	r0, r1, #5
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	4401      	add	r1, r0
 8003f06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	0148      	lsls	r0, r1, #5
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d14b      	bne.n	8003fd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	791b      	ldrb	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d128      	bne.n	8003fb0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e00f      	b.n	8003fb0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e166      	b.n	80042a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ff0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	791b      	ldrb	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d015      	beq.n	8004026 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 814e 	beq.w	80042a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004020:	4313      	orrs	r3, r2
 8004022:	634b      	str	r3, [r1, #52]	@ 0x34
 8004024:	e13c      	b.n	80042a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d110      	bne.n	8004058 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00f      	b.n	8004078 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004076:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68d9      	ldr	r1, [r3, #12]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	b298      	uxth	r0, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	4603      	mov	r3, r0
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f9b9 	bl	8004404 <USB_WritePacket>
 8004092:	e105      	b.n	80042a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	0151      	lsls	r1, r2, #5
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	440a      	add	r2, r1
 80040aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ae:	0cdb      	lsrs	r3, r3, #19
 80040b0:	04db      	lsls	r3, r3, #19
 80040b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d132      	bne.n	8004144 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	69b9      	ldr	r1, [r7, #24]
 800410e:	0148      	lsls	r0, r1, #5
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	4401      	add	r1, r0
 8004114:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004118:	4313      	orrs	r3, r2
 800411a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004136:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800413a:	6113      	str	r3, [r2, #16]
 800413c:	e062      	b.n	8004204 <USB_EPStartXfer+0x490>
 800413e:	bf00      	nop
 8004140:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d123      	bne.n	8004194 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	0148      	lsls	r0, r1, #5
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	4401      	add	r1, r0
 800416a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800416e:	4313      	orrs	r3, r2
 8004170:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800418c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004190:	6113      	str	r3, [r2, #16]
 8004192:	e037      	b.n	8004204 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4413      	add	r3, r2
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	8afa      	ldrh	r2, [r7, #22]
 80041b0:	fb03 f202 	mul.w	r2, r3, r2
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	04d9      	lsls	r1, r3, #19
 80041ca:	4b38      	ldr	r3, [pc, #224]	@ (80042ac <USB_EPStartXfer+0x538>)
 80041cc:	400b      	ands	r3, r1
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	0148      	lsls	r0, r1, #5
 80041d2:	69f9      	ldr	r1, [r7, #28]
 80041d4:	4401      	add	r1, r0
 80041d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80041da:	4313      	orrs	r3, r2
 80041dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	69b9      	ldr	r1, [r7, #24]
 80041f6:	0148      	lsls	r0, r1, #5
 80041f8:	69f9      	ldr	r1, [r7, #28]
 80041fa:	4401      	add	r1, r0
 80041fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004200:	4313      	orrs	r3, r2
 8004202:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10d      	bne.n	8004226 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	68d9      	ldr	r1, [r3, #12]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004222:	460a      	mov	r2, r1
 8004224:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	791b      	ldrb	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d128      	bne.n	8004280 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d110      	bne.n	8004260 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004258:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e00f      	b.n	8004280 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800427a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800429a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800429e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	1ff80000 	.word	0x1ff80000

080042b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d14a      	bne.n	8004364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042e6:	f040 8086 	bne.w	80043f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004308:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800430c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800433e:	4293      	cmp	r3, r2
 8004340:	d902      	bls.n	8004348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
          break;
 8004346:	e056      	b.n	80043f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800435c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004360:	d0e7      	beq.n	8004332 <USB_EPStopXfer+0x82>
 8004362:	e048      	b.n	80043f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800437c:	d13b      	bne.n	80043f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800439c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	7812      	ldrb	r2, [r2, #0]
 80043b6:	0151      	lsls	r1, r2, #5
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	440a      	add	r2, r1
 80043bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d902      	bls.n	80043dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
          break;
 80043da:	e00c      	b.n	80043f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f4:	d0e7      	beq.n	80043c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	@ 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	460b      	mov	r3, r1
 8004414:	71fb      	strb	r3, [r7, #7]
 8004416:	4613      	mov	r3, r2
 8004418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004422:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d123      	bne.n	8004472 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800442a:	88bb      	ldrh	r3, [r7, #4]
 800442c:	3303      	adds	r3, #3
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e018      	b.n	800446a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	031a      	lsls	r2, r3, #12
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004444:	461a      	mov	r2, r3
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3301      	adds	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	3301      	adds	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d3e2      	bcc.n	8004438 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3724      	adds	r7, #36	@ 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004480:	b480      	push	{r7}
 8004482:	b08b      	sub	sp, #44	@ 0x2c
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	b29b      	uxth	r3, r3
 800449c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	e014      	b.n	80044d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	3301      	adds	r3, #1
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	3301      	adds	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	3301      	adds	r3, #1
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3e6      	bcc.n	80044ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044de:	8bfb      	ldrh	r3, [r7, #30]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01e      	beq.n	8004522 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ee:	461a      	mov	r2, r3
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
 8004504:	b2da      	uxtb	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	701a      	strb	r2, [r3, #0]
      i++;
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	3301      	adds	r3, #1
 800450e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	3301      	adds	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004516:	8bfb      	ldrh	r3, [r7, #30]
 8004518:	3b01      	subs	r3, #1
 800451a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ea      	bne.n	80044f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004524:	4618      	mov	r0, r3
 8004526:	372c      	adds	r7, #44	@ 0x2c
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d12c      	bne.n	80045a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db12      	blt.n	8004584 <USB_EPSetStall+0x54>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00f      	beq.n	8004584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800457e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800459e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e02b      	b.n	80045fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db12      	blt.n	80045de <USB_EPSetStall+0xae>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00f      	beq.n	80045de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d128      	bne.n	800467a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	440a      	add	r2, r1
 800463e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	791b      	ldrb	r3, [r3, #4]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d003      	beq.n	8004658 <USB_EPClearStall+0x4c>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	791b      	ldrb	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d138      	bne.n	80046ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e027      	b.n	80046ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004694:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d003      	beq.n	80046aa <USB_EPClearStall+0x9e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	791b      	ldrb	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d10f      	bne.n	80046ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80046fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004752:	f023 0302 	bic.w	r3, r3, #2
 8004756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004780:	f023 0303 	bic.w	r3, r3, #3
 8004784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047c0:	68fb      	ldr	r3, [r7, #12]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	0c1b      	lsrs	r3, r3, #16
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	b29b      	uxth	r3, r3
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004864:	68bb      	ldr	r3, [r7, #8]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004872:	b480      	push	{r7}
 8004874:	b087      	sub	sp, #28
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004894:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	01db      	lsls	r3, r3, #7
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048c0:	68bb      	ldr	r3, [r7, #8]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0301 	and.w	r3, r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004904:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004908:	f023 0307 	bic.w	r3, r3, #7
 800490c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	460b      	mov	r3, r1
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	333c      	adds	r3, #60	@ 0x3c
 8004946:	3304      	adds	r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4a26      	ldr	r2, [pc, #152]	@ (80049e8 <USB_EP0_OutStart+0xb8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d90a      	bls.n	800496a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004964:	d101      	bne.n	800496a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e037      	b.n	80049da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004984:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004998:	f043 0318 	orr.w	r3, r3, #24
 800499c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80049b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10f      	bne.n	80049d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80049d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	4f54300a 	.word	0x4f54300a

080049ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a04:	d901      	bls.n	8004a0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e01b      	b.n	8004a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	daf2      	bge.n	80049f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a2e:	d901      	bls.n	8004a34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d0f0      	beq.n	8004a22 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004a60:	f003 fdcc 	bl	80085fc <USBD_static_malloc>
 8004a64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	32b0      	adds	r2, #176	@ 0xb0
 8004a76:	2100      	movs	r1, #0
 8004a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e0d4      	b.n	8004c2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004a84:	2100      	movs	r1, #0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f003 fed0 	bl	800882c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	32b0      	adds	r2, #176	@ 0xb0
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	32b0      	adds	r2, #176	@ 0xb0
 8004aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1b      	ldrb	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d138      	bne.n	8004b2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c34 <USBD_CDC_Init+0x1e4>)
 8004aba:	7819      	ldrb	r1, [r3, #0]
 8004abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f003 fc77 	bl	80083b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c34 <USBD_CDC_Init+0x1e4>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3324      	adds	r3, #36	@ 0x24
 8004ade:	2201      	movs	r2, #1
 8004ae0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ae2:	4b55      	ldr	r3, [pc, #340]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004ae4:	7819      	ldrb	r1, [r3, #0]
 8004ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aea:	2202      	movs	r2, #2
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f003 fc62 	bl	80083b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004af2:	4b51      	ldr	r3, [pc, #324]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f003 020f 	and.w	r2, r3, #15
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c3c <USBD_CDC_Init+0x1ec>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	3326      	adds	r3, #38	@ 0x26
 8004b24:	2210      	movs	r2, #16
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	e035      	b.n	8004b96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b2a:	4b42      	ldr	r3, [pc, #264]	@ (8004c34 <USBD_CDC_Init+0x1e4>)
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	2340      	movs	r3, #64	@ 0x40
 8004b30:	2202      	movs	r2, #2
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f003 fc3f 	bl	80083b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b38:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <USBD_CDC_Init+0x1e4>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3324      	adds	r3, #36	@ 0x24
 8004b4e:	2201      	movs	r2, #1
 8004b50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b52:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	2340      	movs	r3, #64	@ 0x40
 8004b58:	2202      	movs	r2, #2
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f003 fc2b 	bl	80083b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b60:	4b35      	ldr	r3, [pc, #212]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	f003 020f 	and.w	r2, r3, #15
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b78:	2201      	movs	r2, #1
 8004b7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <USBD_CDC_Init+0x1ec>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f003 020f 	and.w	r2, r3, #15
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3326      	adds	r3, #38	@ 0x26
 8004b92:	2210      	movs	r2, #16
 8004b94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b96:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <USBD_CDC_Init+0x1ec>)
 8004b98:	7819      	ldrb	r1, [r3, #0]
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f003 fc09 	bl	80083b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004ba4:	4b25      	ldr	r3, [pc, #148]	@ (8004c3c <USBD_CDC_Init+0x1ec>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3324      	adds	r3, #36	@ 0x24
 8004bba:	2201      	movs	r2, #1
 8004bbc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	33b0      	adds	r3, #176	@ 0xb0
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e018      	b.n	8004c2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7c1b      	ldrb	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c00:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004c02:	7819      	ldrb	r1, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f003 fcc0 	bl	8008594 <USBD_LL_PrepareReceive>
 8004c14:	e008      	b.n	8004c28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c16:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <USBD_CDC_Init+0x1e8>)
 8004c18:	7819      	ldrb	r1, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c20:	2340      	movs	r3, #64	@ 0x40
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f003 fcb6 	bl	8008594 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000093 	.word	0x20000093
 8004c38:	20000094 	.word	0x20000094
 8004c3c:	20000095 	.word	0x20000095

08004c40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d38 <USBD_CDC_DeInit+0xf8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f003 fbd5 	bl	8008402 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c58:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <USBD_CDC_DeInit+0xf8>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3324      	adds	r3, #36	@ 0x24
 8004c6e:	2200      	movs	r2, #0
 8004c70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c72:	4b32      	ldr	r3, [pc, #200]	@ (8004d3c <USBD_CDC_DeInit+0xfc>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f003 fbc2 	bl	8008402 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d3c <USBD_CDC_DeInit+0xfc>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c96:	2200      	movs	r2, #0
 8004c98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <USBD_CDC_DeInit+0x100>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f003 fbae 	bl	8008402 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ca6:	4b26      	ldr	r3, [pc, #152]	@ (8004d40 <USBD_CDC_DeInit+0x100>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f003 020f 	and.w	r2, r3, #15
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	3324      	adds	r3, #36	@ 0x24
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d40 <USBD_CDC_DeInit+0x100>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3326      	adds	r3, #38	@ 0x26
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	32b0      	adds	r2, #176	@ 0xb0
 8004ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01f      	beq.n	8004d2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	33b0      	adds	r3, #176	@ 0xb0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	32b0      	adds	r2, #176	@ 0xb0
 8004d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f003 fc82 	bl	8008618 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	32b0      	adds	r2, #176	@ 0xb0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000093 	.word	0x20000093
 8004d3c:	20000094 	.word	0x20000094
 8004d40:	20000095 	.word	0x20000095

08004d44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	32b0      	adds	r2, #176	@ 0xb0
 8004d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0bf      	b.n	8004ef4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d050      	beq.n	8004e22 <USBD_CDC_Setup+0xde>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	f040 80af 	bne.w	8004ee4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	88db      	ldrh	r3, [r3, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03a      	beq.n	8004e04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	da1b      	bge.n	8004dd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	33b0      	adds	r3, #176	@ 0xb0
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004dae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	88d2      	ldrh	r2, [r2, #6]
 8004db4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	88db      	ldrh	r3, [r3, #6]
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	bf28      	it	cs
 8004dbe:	2307      	movcs	r3, #7
 8004dc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	89fa      	ldrh	r2, [r7, #14]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f001 fd93 	bl	80068f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004dce:	e090      	b.n	8004ef2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785a      	ldrb	r2, [r3, #1]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	88db      	ldrh	r3, [r3, #6]
 8004dde:	2b3f      	cmp	r3, #63	@ 0x3f
 8004de0:	d803      	bhi.n	8004dea <USBD_CDC_Setup+0xa6>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	88db      	ldrh	r3, [r3, #6]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	e000      	b.n	8004dec <USBD_CDC_Setup+0xa8>
 8004dea:	2240      	movs	r2, #64	@ 0x40
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004df2:	6939      	ldr	r1, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 fda5 	bl	800694c <USBD_CtlPrepareRx>
      break;
 8004e02:	e076      	b.n	8004ef2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	33b0      	adds	r3, #176	@ 0xb0
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	7850      	ldrb	r0, [r2, #1]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4798      	blx	r3
      break;
 8004e20:	e067      	b.n	8004ef2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b0b      	cmp	r3, #11
 8004e28:	d851      	bhi.n	8004ece <USBD_CDC_Setup+0x18a>
 8004e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <USBD_CDC_Setup+0xec>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004edd 	.word	0x08004edd
 8004e38:	08004ecf 	.word	0x08004ecf
 8004e3c:	08004ecf 	.word	0x08004ecf
 8004e40:	08004ecf 	.word	0x08004ecf
 8004e44:	08004ecf 	.word	0x08004ecf
 8004e48:	08004ecf 	.word	0x08004ecf
 8004e4c:	08004ecf 	.word	0x08004ecf
 8004e50:	08004ecf 	.word	0x08004ecf
 8004e54:	08004ecf 	.word	0x08004ecf
 8004e58:	08004e8b 	.word	0x08004e8b
 8004e5c:	08004eb5 	.word	0x08004eb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d107      	bne.n	8004e7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e6c:	f107 030a 	add.w	r3, r7, #10
 8004e70:	2202      	movs	r2, #2
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fd3d 	bl	80068f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e7a:	e032      	b.n	8004ee2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f001 fcbb 	bl	80067fa <USBD_CtlError>
            ret = USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	75fb      	strb	r3, [r7, #23]
          break;
 8004e88:	e02b      	b.n	8004ee2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e96:	f107 030d 	add.w	r3, r7, #13
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fd28 	bl	80068f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ea4:	e01d      	b.n	8004ee2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fca6 	bl	80067fa <USBD_CtlError>
            ret = USBD_FAIL;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8004eb2:	e016      	b.n	8004ee2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d00f      	beq.n	8004ee0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fc99 	bl	80067fa <USBD_CtlError>
            ret = USBD_FAIL;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ecc:	e008      	b.n	8004ee0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 fc92 	bl	80067fa <USBD_CtlError>
          ret = USBD_FAIL;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8004eda:	e002      	b.n	8004ee2 <USBD_CDC_Setup+0x19e>
          break;
 8004edc:	bf00      	nop
 8004ede:	e008      	b.n	8004ef2 <USBD_CDC_Setup+0x1ae>
          break;
 8004ee0:	bf00      	nop
      }
      break;
 8004ee2:	e006      	b.n	8004ef2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 fc87 	bl	80067fa <USBD_CtlError>
      ret = USBD_FAIL;
 8004eec:	2303      	movs	r3, #3
 8004eee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004f0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	32b0      	adds	r2, #176	@ 0xb0
 8004f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e065      	b.n	8004ff2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	32b0      	adds	r2, #176	@ 0xb0
 8004f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	f003 020f 	and.w	r2, r3, #15
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3318      	adds	r3, #24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02f      	beq.n	8004fb0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	3318      	adds	r3, #24
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 010f 	and.w	r1, r3, #15
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	440b      	add	r3, r1
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4403      	add	r3, r0
 8004f78:	331c      	adds	r3, #28
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d112      	bne.n	8004fb0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fa2:	78f9      	ldrb	r1, [r7, #3]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f003 fad2 	bl	8008552 <USBD_LL_Transmit>
 8004fae:	e01f      	b.n	8004ff0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	33b0      	adds	r3, #176	@ 0xb0
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	33b0      	adds	r3, #176	@ 0xb0
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	@ 0xb0
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	32b0      	adds	r2, #176	@ 0xb0
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005028:	2303      	movs	r3, #3
 800502a:	e01a      	b.n	8005062 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f003 fad0 	bl	80085d6 <USBD_LL_GetRxDataSize>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	33b0      	adds	r3, #176	@ 0xb0
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800505c:	4611      	mov	r1, r2
 800505e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	32b0      	adds	r2, #176	@ 0xb0
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005088:	2303      	movs	r3, #3
 800508a:	e024      	b.n	80050d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	33b0      	adds	r3, #176	@ 0xb0
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d019      	beq.n	80050d4 <USBD_CDC_EP0_RxReady+0x6a>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80050a6:	2bff      	cmp	r3, #255	@ 0xff
 80050a8:	d014      	beq.n	80050d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	33b0      	adds	r3, #176	@ 0xb0
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80050c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	22ff      	movs	r2, #255	@ 0xff
 80050d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050e8:	2182      	movs	r1, #130	@ 0x82
 80050ea:	4818      	ldr	r0, [pc, #96]	@ (800514c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050ec:	f000 fd4f 	bl	8005b8e <USBD_GetEpDesc>
 80050f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80050f2:	2101      	movs	r1, #1
 80050f4:	4815      	ldr	r0, [pc, #84]	@ (800514c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050f6:	f000 fd4a 	bl	8005b8e <USBD_GetEpDesc>
 80050fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80050fc:	2181      	movs	r1, #129	@ 0x81
 80050fe:	4813      	ldr	r0, [pc, #76]	@ (800514c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005100:	f000 fd45 	bl	8005b8e <USBD_GetEpDesc>
 8005104:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2210      	movs	r2, #16
 8005110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2200      	movs	r2, #0
 800511c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005120:	711a      	strb	r2, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005134:	711a      	strb	r2, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2243      	movs	r2, #67	@ 0x43
 800513e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005140:	4b02      	ldr	r3, [pc, #8]	@ (800514c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000050 	.word	0x20000050

08005150 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005158:	2182      	movs	r1, #130	@ 0x82
 800515a:	4818      	ldr	r0, [pc, #96]	@ (80051bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800515c:	f000 fd17 	bl	8005b8e <USBD_GetEpDesc>
 8005160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005162:	2101      	movs	r1, #1
 8005164:	4815      	ldr	r0, [pc, #84]	@ (80051bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005166:	f000 fd12 	bl	8005b8e <USBD_GetEpDesc>
 800516a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800516c:	2181      	movs	r1, #129	@ 0x81
 800516e:	4813      	ldr	r0, [pc, #76]	@ (80051bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005170:	f000 fd0d 	bl	8005b8e <USBD_GetEpDesc>
 8005174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2210      	movs	r2, #16
 8005180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2200      	movs	r2, #0
 800518c:	711a      	strb	r2, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f042 0202 	orr.w	r2, r2, #2
 8005194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	711a      	strb	r2, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f042 0202 	orr.w	r2, r2, #2
 80051a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2243      	movs	r2, #67	@ 0x43
 80051ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051b0:	4b02      	ldr	r3, [pc, #8]	@ (80051bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000050 	.word	0x20000050

080051c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051c8:	2182      	movs	r1, #130	@ 0x82
 80051ca:	4818      	ldr	r0, [pc, #96]	@ (800522c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051cc:	f000 fcdf 	bl	8005b8e <USBD_GetEpDesc>
 80051d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051d2:	2101      	movs	r1, #1
 80051d4:	4815      	ldr	r0, [pc, #84]	@ (800522c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051d6:	f000 fcda 	bl	8005b8e <USBD_GetEpDesc>
 80051da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051dc:	2181      	movs	r1, #129	@ 0x81
 80051de:	4813      	ldr	r0, [pc, #76]	@ (800522c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051e0:	f000 fcd5 	bl	8005b8e <USBD_GetEpDesc>
 80051e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2210      	movs	r2, #16
 80051f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005200:	711a      	strb	r2, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005214:	711a      	strb	r2, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2243      	movs	r2, #67	@ 0x43
 800521e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000050 	.word	0x20000050

08005230 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	220a      	movs	r2, #10
 800523c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800523e:	4b03      	ldr	r3, [pc, #12]	@ (800524c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	2000000c 	.word	0x2000000c

08005250 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005260:	2303      	movs	r3, #3
 8005262:	e009      	b.n	8005278 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	33b0      	adds	r3, #176	@ 0xb0
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	32b0      	adds	r2, #176	@ 0xb0
 800529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e008      	b.n	80052bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	32b0      	adds	r2, #176	@ 0xb0
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e004      	b.n	80052f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	32b0      	adds	r2, #176	@ 0xb0
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005326:	2303      	movs	r3, #3
 8005328:	e025      	b.n	8005376 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11f      	bne.n	8005374 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2201      	movs	r2, #1
 8005338:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800533c:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <USBD_CDC_TransmitPacket+0x7c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4403      	add	r3, r0
 8005356:	3318      	adds	r3, #24
 8005358:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <USBD_CDC_TransmitPacket+0x7c>)
 800535c:	7819      	ldrb	r1, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f003 f8f1 	bl	8008552 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000093 	.word	0x20000093

08005384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32b0      	adds	r2, #176	@ 0xb0
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	@ 0xb0
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e018      	b.n	80053e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7c1b      	ldrb	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053ba:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <USBD_CDC_ReceivePacket+0x68>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f003 f8e3 	bl	8008594 <USBD_LL_PrepareReceive>
 80053ce:	e008      	b.n	80053e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <USBD_CDC_ReceivePacket+0x68>)
 80053d2:	7819      	ldrb	r1, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053da:	2340      	movs	r3, #64	@ 0x40
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f003 f8d9 	bl	8008594 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000094 	.word	0x20000094

080053f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	e01f      	b.n	8005448 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	79fa      	ldrb	r2, [r7, #7]
 800543a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f002 ff53 	bl	80082e8 <USBD_LL_Init>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005464:	2303      	movs	r3, #3
 8005466:	e025      	b.n	80054b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	32ae      	adds	r2, #174	@ 0xae
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00f      	beq.n	80054a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	32ae      	adds	r2, #174	@ 0xae
 800548e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	f107 020e 	add.w	r2, r7, #14
 8005498:	4610      	mov	r0, r2
 800549a:	4798      	blx	r3
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f002 ff5b 	bl	8008380 <USBD_LL_Start>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	4611      	mov	r1, r2
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	4611      	mov	r1, r2
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005548:	2303      	movs	r3, #3
 800554a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f001 f90c 	bl	8006786 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2b02      	cmp	r3, #2
 8005590:	d01a      	beq.n	80055c8 <USBD_LL_SetupStage+0x72>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d822      	bhi.n	80055dc <USBD_LL_SetupStage+0x86>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <USBD_LL_SetupStage+0x4a>
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00a      	beq.n	80055b4 <USBD_LL_SetupStage+0x5e>
 800559e:	e01d      	b.n	80055dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fb63 	bl	8005c74 <USBD_StdDevReq>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]
      break;
 80055b2:	e020      	b.n	80055f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fbcb 	bl	8005d58 <USBD_StdItfReq>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
      break;
 80055c6:	e016      	b.n	80055f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fc2d 	bl	8005e30 <USBD_StdEPReq>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]
      break;
 80055da:	e00c      	b.n	80055f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f002 ff28 	bl	8008440 <USBD_LL_StallEP>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	bf00      	nop
  }

  return ret;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	460b      	mov	r3, r1
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d16e      	bne.n	80056f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800561e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005626:	2b03      	cmp	r3, #3
 8005628:	f040 8098 	bne.w	800575c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d913      	bls.n	8005660 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	1ad2      	subs	r2, r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	4293      	cmp	r3, r2
 8005650:	bf28      	it	cs
 8005652:	4613      	movcs	r3, r2
 8005654:	461a      	mov	r2, r3
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f001 f994 	bl	8006986 <USBD_CtlContinueRx>
 800565e:	e07d      	b.n	800575c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2b02      	cmp	r3, #2
 800566c:	d014      	beq.n	8005698 <USBD_LL_DataOutStage+0x98>
 800566e:	2b02      	cmp	r3, #2
 8005670:	d81d      	bhi.n	80056ae <USBD_LL_DataOutStage+0xae>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <USBD_LL_DataOutStage+0x7c>
 8005676:	2b01      	cmp	r3, #1
 8005678:	d003      	beq.n	8005682 <USBD_LL_DataOutStage+0x82>
 800567a:	e018      	b.n	80056ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	75bb      	strb	r3, [r7, #22]
            break;
 8005680:	e018      	b.n	80056b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005688:	b2db      	uxtb	r3, r3
 800568a:	4619      	mov	r1, r3
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa64 	bl	8005b5a <USBD_CoreFindIF>
 8005692:	4603      	mov	r3, r0
 8005694:	75bb      	strb	r3, [r7, #22]
            break;
 8005696:	e00d      	b.n	80056b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fa66 	bl	8005b74 <USBD_CoreFindEP>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75bb      	strb	r3, [r7, #22]
            break;
 80056ac:	e002      	b.n	80056b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75bb      	strb	r3, [r7, #22]
            break;
 80056b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056b4:	7dbb      	ldrb	r3, [r7, #22]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d119      	bne.n	80056ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d113      	bne.n	80056ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056c6:	7dba      	ldrb	r2, [r7, #22]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	32ae      	adds	r2, #174	@ 0xae
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056d6:	7dba      	ldrb	r2, [r7, #22]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056de:	7dba      	ldrb	r2, [r7, #22]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	32ae      	adds	r2, #174	@ 0xae
 80056e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f001 f95a 	bl	80069a8 <USBD_CtlSendStatus>
 80056f4:	e032      	b.n	800575c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fa37 	bl	8005b74 <USBD_CoreFindEP>
 8005706:	4603      	mov	r3, r0
 8005708:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800570a:	7dbb      	ldrb	r3, [r7, #22]
 800570c:	2bff      	cmp	r3, #255	@ 0xff
 800570e:	d025      	beq.n	800575c <USBD_LL_DataOutStage+0x15c>
 8005710:	7dbb      	ldrb	r3, [r7, #22]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d122      	bne.n	800575c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b03      	cmp	r3, #3
 8005720:	d117      	bne.n	8005752 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005722:	7dba      	ldrb	r2, [r7, #22]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	32ae      	adds	r2, #174	@ 0xae
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00f      	beq.n	8005752 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005732:	7dba      	ldrb	r2, [r7, #22]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800573a:	7dba      	ldrb	r2, [r7, #22]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	32ae      	adds	r2, #174	@ 0xae
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	7afa      	ldrb	r2, [r7, #11]
 8005748:	4611      	mov	r1, r2
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	4798      	blx	r3
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	e000      	b.n	800575e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	460b      	mov	r3, r1
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d16f      	bne.n	800585a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3314      	adds	r3, #20
 800577e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005786:	2b02      	cmp	r3, #2
 8005788:	d15a      	bne.n	8005840 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	429a      	cmp	r2, r3
 8005794:	d914      	bls.n	80057c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 f8bc 	bl	800692a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f002 feeb 	bl	8008594 <USBD_LL_PrepareReceive>
 80057be:	e03f      	b.n	8005840 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d11c      	bne.n	8005806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d316      	bcc.n	8005806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d20f      	bcs.n	8005806 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2100      	movs	r1, #0
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f001 f89d 	bl	800692a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057f8:	2300      	movs	r3, #0
 80057fa:	2200      	movs	r2, #0
 80057fc:	2100      	movs	r1, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f002 fec8 	bl	8008594 <USBD_LL_PrepareReceive>
 8005804:	e01c      	b.n	8005840 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d10f      	bne.n	8005832 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f002 fe03 	bl	8008440 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f001 f8c7 	bl	80069ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03a      	beq.n	80058c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fe42 	bl	80054d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005858:	e032      	b.n	80058c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800585a:	7afb      	ldrb	r3, [r7, #11]
 800585c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005860:	b2db      	uxtb	r3, r3
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f985 	bl	8005b74 <USBD_CoreFindEP>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2bff      	cmp	r3, #255	@ 0xff
 8005872:	d025      	beq.n	80058c0 <USBD_LL_DataInStage+0x15a>
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d122      	bne.n	80058c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b03      	cmp	r3, #3
 8005884:	d11c      	bne.n	80058c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005886:	7dfa      	ldrb	r2, [r7, #23]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	32ae      	adds	r2, #174	@ 0xae
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d014      	beq.n	80058c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005896:	7dfa      	ldrb	r2, [r7, #23]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800589e:	7dfa      	ldrb	r2, [r7, #23]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	32ae      	adds	r2, #174	@ 0xae
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	7afa      	ldrb	r2, [r7, #11]
 80058ac:	4611      	mov	r1, r2
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058b6:	7dbb      	ldrb	r3, [r7, #22]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058bc:	7dbb      	ldrb	r3, [r7, #22]
 80058be:	e000      	b.n	80058c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d014      	beq.n	8005930 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005930:	2340      	movs	r3, #64	@ 0x40
 8005932:	2200      	movs	r2, #0
 8005934:	2100      	movs	r1, #0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f002 fd3d 	bl	80083b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800594c:	2340      	movs	r3, #64	@ 0x40
 800594e:	2200      	movs	r2, #0
 8005950:	2180      	movs	r1, #128	@ 0x80
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f002 fd2f 	bl	80083b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2240      	movs	r2, #64	@ 0x40
 8005962:	621a      	str	r2, [r3, #32]

  return ret;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d006      	beq.n	80059b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d106      	bne.n	80059e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d110      	bne.n	8005a2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	32ae      	adds	r2, #174	@ 0xae
 8005a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e01c      	b.n	8005a92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d115      	bne.n	8005a90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	32ae      	adds	r2, #174	@ 0xae
 8005a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	32ae      	adds	r2, #174	@ 0xae
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	32ae      	adds	r2, #174	@ 0xae
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e01c      	b.n	8005af6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d115      	bne.n	8005af4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32ae      	adds	r2, #174	@ 0xae
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	32ae      	adds	r2, #174	@ 0xae
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	4611      	mov	r1, r2
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6852      	ldr	r2, [r2, #4]
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	4611      	mov	r1, r2
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	885b      	ldrh	r3, [r3, #2]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d91f      	bls.n	8005bf4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005bba:	e013      	b.n	8005be4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005bbc:	f107 030a 	add.w	r3, r7, #10
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f000 f81b 	bl	8005bfe <USBD_GetNextDesc>
 8005bc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d108      	bne.n	8005be4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	789b      	ldrb	r3, [r3, #2]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d008      	beq.n	8005bf2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	897b      	ldrh	r3, [r7, #10]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d8e5      	bhi.n	8005bbc <USBD_GetEpDesc+0x2e>
 8005bf0:	e000      	b.n	8005bf4 <USBD_GetEpDesc+0x66>
          break;
 8005bf2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005bf4:	693b      	ldr	r3, [r7, #16]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	7812      	ldrb	r2, [r2, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c54:	8a3b      	ldrh	r3, [r7, #16]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	b21a      	sxth	r2, r3
 8005c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c64:	89fb      	ldrh	r3, [r7, #14]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d005      	beq.n	8005c9a <USBD_StdDevReq+0x26>
 8005c8e:	2b40      	cmp	r3, #64	@ 0x40
 8005c90:	d857      	bhi.n	8005d42 <USBD_StdDevReq+0xce>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <USBD_StdDevReq+0x42>
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d153      	bne.n	8005d42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	32ae      	adds	r2, #174	@ 0xae
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	e04a      	b.n	8005d4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d83b      	bhi.n	8005d36 <USBD_StdDevReq+0xc2>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <USBD_StdDevReq+0x50>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d19 	.word	0x08005d19
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d37 	.word	0x08005d37
 8005cd0:	08005d23 	.word	0x08005d23
 8005cd4:	08005d37 	.word	0x08005d37
 8005cd8:	08005cf7 	.word	0x08005cf7
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005d37 	.word	0x08005d37
 8005ce4:	08005d0f 	.word	0x08005d0f
 8005ce8:	08005d01 	.word	0x08005d01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa3c 	bl	800616c <USBD_GetDescriptor>
          break;
 8005cf4:	e024      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fba1 	bl	8006440 <USBD_SetAddress>
          break;
 8005cfe:	e01f      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fbe0 	bl	80064c8 <USBD_SetConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d0c:	e018      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fc83 	bl	800661c <USBD_GetConfig>
          break;
 8005d16:	e013      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fcb4 	bl	8006688 <USBD_GetStatus>
          break;
 8005d20:	e00e      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fce3 	bl	80066f0 <USBD_SetFeature>
          break;
 8005d2a:	e009      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd07 	bl	8006742 <USBD_ClrFeature>
          break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fd5e 	bl	80067fa <USBD_CtlError>
          break;
 8005d3e:	bf00      	nop
      }
      break;
 8005d40:	e004      	b.n	8005d4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fd58 	bl	80067fa <USBD_CtlError>
      break;
 8005d4a:	bf00      	nop
  }

  return ret;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d005      	beq.n	8005d7e <USBD_StdItfReq+0x26>
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d852      	bhi.n	8005e1c <USBD_StdItfReq+0xc4>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <USBD_StdItfReq+0x26>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d14e      	bne.n	8005e1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d840      	bhi.n	8005e0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	889b      	ldrh	r3, [r3, #4]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d836      	bhi.n	8005e04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	889b      	ldrh	r3, [r3, #4]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fedb 	bl	8005b5a <USBD_CoreFindIF>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	2bff      	cmp	r3, #255	@ 0xff
 8005dac:	d01d      	beq.n	8005dea <USBD_StdItfReq+0x92>
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11a      	bne.n	8005dea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005db4:	7bba      	ldrb	r2, [r7, #14]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32ae      	adds	r2, #174	@ 0xae
 8005dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00f      	beq.n	8005de4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005dc4:	7bba      	ldrb	r2, [r7, #14]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005dcc:	7bba      	ldrb	r2, [r7, #14]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32ae      	adds	r2, #174	@ 0xae
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005de2:	e004      	b.n	8005dee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005de8:	e001      	b.n	8005dee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dea:	2303      	movs	r3, #3
 8005dec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	88db      	ldrh	r3, [r3, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d110      	bne.n	8005e18 <USBD_StdItfReq+0xc0>
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fdd3 	bl	80069a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e02:	e009      	b.n	8005e18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fcf7 	bl	80067fa <USBD_CtlError>
          break;
 8005e0c:	e004      	b.n	8005e18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fcf2 	bl	80067fa <USBD_CtlError>
          break;
 8005e16:	e000      	b.n	8005e1a <USBD_StdItfReq+0xc2>
          break;
 8005e18:	bf00      	nop
      }
      break;
 8005e1a:	e004      	b.n	8005e26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fceb 	bl	80067fa <USBD_CtlError>
      break;
 8005e24:	bf00      	nop
  }

  return ret;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	889b      	ldrh	r3, [r3, #4]
 8005e42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e4c:	2b40      	cmp	r3, #64	@ 0x40
 8005e4e:	d007      	beq.n	8005e60 <USBD_StdEPReq+0x30>
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	f200 817f 	bhi.w	8006154 <USBD_StdEPReq+0x324>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02a      	beq.n	8005eb0 <USBD_StdEPReq+0x80>
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	f040 817a 	bne.w	8006154 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fe85 	bl	8005b74 <USBD_CoreFindEP>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e6e:	7b7b      	ldrb	r3, [r7, #13]
 8005e70:	2bff      	cmp	r3, #255	@ 0xff
 8005e72:	f000 8174 	beq.w	800615e <USBD_StdEPReq+0x32e>
 8005e76:	7b7b      	ldrb	r3, [r7, #13]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 8170 	bne.w	800615e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e7e:	7b7a      	ldrb	r2, [r7, #13]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e86:	7b7a      	ldrb	r2, [r7, #13]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32ae      	adds	r2, #174	@ 0xae
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8163 	beq.w	800615e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e98:	7b7a      	ldrb	r2, [r7, #13]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32ae      	adds	r2, #174	@ 0xae
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eae:	e156      	b.n	800615e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d008      	beq.n	8005eca <USBD_StdEPReq+0x9a>
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	f300 8145 	bgt.w	8006148 <USBD_StdEPReq+0x318>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 809b 	beq.w	8005ffa <USBD_StdEPReq+0x1ca>
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d03c      	beq.n	8005f42 <USBD_StdEPReq+0x112>
 8005ec8:	e13e      	b.n	8006148 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d002      	beq.n	8005edc <USBD_StdEPReq+0xac>
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d016      	beq.n	8005f08 <USBD_StdEPReq+0xd8>
 8005eda:	e02c      	b.n	8005f36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <USBD_StdEPReq+0xce>
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b80      	cmp	r3, #128	@ 0x80
 8005ee6:	d00a      	beq.n	8005efe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f002 faa7 	bl	8008440 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f002 faa3 	bl	8008440 <USBD_LL_StallEP>
 8005efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005efc:	e020      	b.n	8005f40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fc7a 	bl	80067fa <USBD_CtlError>
              break;
 8005f06:	e01b      	b.n	8005f40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	885b      	ldrh	r3, [r3, #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10e      	bne.n	8005f2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <USBD_StdEPReq+0xfe>
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b80      	cmp	r3, #128	@ 0x80
 8005f1a:	d008      	beq.n	8005f2e <USBD_StdEPReq+0xfe>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	88db      	ldrh	r3, [r3, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f002 fa89 	bl	8008440 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fd3a 	bl	80069a8 <USBD_CtlSendStatus>

              break;
 8005f34:	e004      	b.n	8005f40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc5e 	bl	80067fa <USBD_CtlError>
              break;
 8005f3e:	bf00      	nop
          }
          break;
 8005f40:	e107      	b.n	8006152 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d002      	beq.n	8005f54 <USBD_StdEPReq+0x124>
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d016      	beq.n	8005f80 <USBD_StdEPReq+0x150>
 8005f52:	e04b      	b.n	8005fec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <USBD_StdEPReq+0x146>
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	2b80      	cmp	r3, #128	@ 0x80
 8005f5e:	d00a      	beq.n	8005f76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f002 fa6b 	bl	8008440 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6a:	2180      	movs	r1, #128	@ 0x80
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f002 fa67 	bl	8008440 <USBD_LL_StallEP>
 8005f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f74:	e040      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc3e 	bl	80067fa <USBD_CtlError>
              break;
 8005f7e:	e03b      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	885b      	ldrh	r3, [r3, #2]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d136      	bne.n	8005ff6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 fa71 	bl	800847e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fd03 	bl	80069a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fde4 	bl	8005b74 <USBD_CoreFindEP>
 8005fac:	4603      	mov	r3, r0
 8005fae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fb0:	7b7b      	ldrb	r3, [r7, #13]
 8005fb2:	2bff      	cmp	r3, #255	@ 0xff
 8005fb4:	d01f      	beq.n	8005ff6 <USBD_StdEPReq+0x1c6>
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11c      	bne.n	8005ff6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fbc:	7b7a      	ldrb	r2, [r7, #13]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	@ 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fd4:	7b7a      	ldrb	r2, [r7, #13]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32ae      	adds	r2, #174	@ 0xae
 8005fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fea:	e004      	b.n	8005ff6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc03 	bl	80067fa <USBD_CtlError>
              break;
 8005ff4:	e000      	b.n	8005ff8 <USBD_StdEPReq+0x1c8>
              break;
 8005ff6:	bf00      	nop
          }
          break;
 8005ff8:	e0ab      	b.n	8006152 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d002      	beq.n	800600c <USBD_StdEPReq+0x1dc>
 8006006:	2b03      	cmp	r3, #3
 8006008:	d032      	beq.n	8006070 <USBD_StdEPReq+0x240>
 800600a:	e097      	b.n	800613c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <USBD_StdEPReq+0x1f2>
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	2b80      	cmp	r3, #128	@ 0x80
 8006016:	d004      	beq.n	8006022 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fbed 	bl	80067fa <USBD_CtlError>
                break;
 8006020:	e091      	b.n	8006146 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0b      	bge.n	8006042 <USBD_StdEPReq+0x212>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	3310      	adds	r3, #16
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	e00b      	b.n	800605a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2202      	movs	r2, #2
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc43 	bl	80068f4 <USBD_CtlSendData>
              break;
 800606e:	e06a      	b.n	8006146 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da11      	bge.n	800609c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3324      	adds	r3, #36	@ 0x24
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d117      	bne.n	80060c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fbb0 	bl	80067fa <USBD_CtlError>
                  break;
 800609a:	e054      	b.n	8006146 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb9d 	bl	80067fa <USBD_CtlError>
                  break;
 80060c0:	e041      	b.n	8006146 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0b      	bge.n	80060e2 <USBD_StdEPReq+0x2b2>
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	3310      	adds	r3, #16
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	e00b      	b.n	80060fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	3304      	adds	r3, #4
 80060fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <USBD_StdEPReq+0x2d8>
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b80      	cmp	r3, #128	@ 0x80
 8006106:	d103      	bne.n	8006110 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e00e      	b.n	800612e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f002 f9d1 	bl	80084bc <USBD_LL_IsStallEP>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e002      	b.n	800612e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2202      	movs	r2, #2
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fbdd 	bl	80068f4 <USBD_CtlSendData>
              break;
 800613a:	e004      	b.n	8006146 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb5b 	bl	80067fa <USBD_CtlError>
              break;
 8006144:	bf00      	nop
          }
          break;
 8006146:	e004      	b.n	8006152 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb55 	bl	80067fa <USBD_CtlError>
          break;
 8006150:	bf00      	nop
      }
      break;
 8006152:	e005      	b.n	8006160 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fb4f 	bl	80067fa <USBD_CtlError>
      break;
 800615c:	e000      	b.n	8006160 <USBD_StdEPReq+0x330>
      break;
 800615e:	bf00      	nop
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	885b      	ldrh	r3, [r3, #2]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	2b06      	cmp	r3, #6
 800618e:	f200 8128 	bhi.w	80063e2 <USBD_GetDescriptor+0x276>
 8006192:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <USBD_GetDescriptor+0x2c>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061cd 	.word	0x080061cd
 80061a0:	0800620d 	.word	0x0800620d
 80061a4:	080063e3 	.word	0x080063e3
 80061a8:	080063e3 	.word	0x080063e3
 80061ac:	08006383 	.word	0x08006383
 80061b0:	080063af 	.word	0x080063af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	7c12      	ldrb	r2, [r2, #16]
 80061c0:	f107 0108 	add.w	r1, r7, #8
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
 80061c8:	60f8      	str	r0, [r7, #12]
      break;
 80061ca:	e112      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7c1b      	ldrb	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	f107 0208 	add.w	r2, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	2202      	movs	r2, #2
 80061ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061ee:	e100      	b.n	80063f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f8:	f107 0208 	add.w	r2, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
      break;
 800620a:	e0f2      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b05      	cmp	r3, #5
 8006214:	f200 80ac 	bhi.w	8006370 <USBD_GetDescriptor+0x204>
 8006218:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <USBD_GetDescriptor+0xb4>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006239 	.word	0x08006239
 8006224:	0800626d 	.word	0x0800626d
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062d5 	.word	0x080062d5
 8006230:	08006309 	.word	0x08006309
 8006234:	0800633d 	.word	0x0800633d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	7c12      	ldrb	r2, [r2, #16]
 8006250:	f107 0108 	add.w	r1, r7, #8
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800625a:	e091      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 facb 	bl	80067fa <USBD_CtlError>
            err++;
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	3301      	adds	r3, #1
 8006268:	72fb      	strb	r3, [r7, #11]
          break;
 800626a:	e089      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7c12      	ldrb	r2, [r2, #16]
 8006284:	f107 0108 	add.w	r1, r7, #8
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800628e:	e077      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fab1 	bl	80067fa <USBD_CtlError>
            err++;
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	3301      	adds	r3, #1
 800629c:	72fb      	strb	r3, [r7, #11]
          break;
 800629e:	e06f      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	7c12      	ldrb	r2, [r2, #16]
 80062b8:	f107 0108 	add.w	r1, r7, #8
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c2:	e05d      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa97 	bl	80067fa <USBD_CtlError>
            err++;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
 80062ce:	3301      	adds	r3, #1
 80062d0:	72fb      	strb	r3, [r7, #11]
          break;
 80062d2:	e055      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062f6:	e043      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa7d 	bl	80067fa <USBD_CtlError>
            err++;
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	3301      	adds	r3, #1
 8006304:	72fb      	strb	r3, [r7, #11]
          break;
 8006306:	e03b      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7c12      	ldrb	r2, [r2, #16]
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632a:	e029      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa63 	bl	80067fa <USBD_CtlError>
            err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
          break;
 800633a:	e021      	b.n	8006380 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	7c12      	ldrb	r2, [r2, #16]
 8006354:	f107 0108 	add.w	r1, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800635e:	e00f      	b.n	8006380 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa49 	bl	80067fa <USBD_CtlError>
            err++;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	3301      	adds	r3, #1
 800636c:	72fb      	strb	r3, [r7, #11]
          break;
 800636e:	e007      	b.n	8006380 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa41 	bl	80067fa <USBD_CtlError>
          err++;
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	3301      	adds	r3, #1
 800637c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800637e:	bf00      	nop
      }
      break;
 8006380:	e037      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7c1b      	ldrb	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006392:	f107 0208 	add.w	r2, r7, #8
 8006396:	4610      	mov	r0, r2
 8006398:	4798      	blx	r3
 800639a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800639c:	e029      	b.n	80063f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa2a 	bl	80067fa <USBD_CtlError>
        err++;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	3301      	adds	r3, #1
 80063aa:	72fb      	strb	r3, [r7, #11]
      break;
 80063ac:	e021      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7c1b      	ldrb	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	4610      	mov	r0, r2
 80063c4:	4798      	blx	r3
 80063c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	2207      	movs	r2, #7
 80063ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063d0:	e00f      	b.n	80063f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa10 	bl	80067fa <USBD_CtlError>
        err++;
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	3301      	adds	r3, #1
 80063de:	72fb      	strb	r3, [r7, #11]
      break;
 80063e0:	e007      	b.n	80063f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa08 	bl	80067fa <USBD_CtlError>
      err++;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	3301      	adds	r3, #1
 80063ee:	72fb      	strb	r3, [r7, #11]
      break;
 80063f0:	bf00      	nop
  }

  if (err != 0U)
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11e      	bne.n	8006436 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	88db      	ldrh	r3, [r3, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d016      	beq.n	800642e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88da      	ldrh	r2, [r3, #6]
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	4293      	cmp	r3, r2
 800640e:	bf28      	it	cs
 8006410:	4613      	movcs	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006416:	893b      	ldrh	r3, [r7, #8]
 8006418:	461a      	mov	r2, r3
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fa69 	bl	80068f4 <USBD_CtlSendData>
 8006422:	e009      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9e7 	bl	80067fa <USBD_CtlError>
 800642c:	e004      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 faba 	bl	80069a8 <USBD_CtlSendStatus>
 8006434:	e000      	b.n	8006438 <USBD_GetDescriptor+0x2cc>
    return;
 8006436:	bf00      	nop
  }
}
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop

08006440 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	889b      	ldrh	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d131      	bne.n	80064b6 <USBD_SetAddress+0x76>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d12d      	bne.n	80064b6 <USBD_SetAddress+0x76>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	885b      	ldrh	r3, [r3, #2]
 800645e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006460:	d829      	bhi.n	80064b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800646c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b03      	cmp	r3, #3
 8006478:	d104      	bne.n	8006484 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9bc 	bl	80067fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	e01d      	b.n	80064c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 f83f 	bl	8008514 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa86 	bl	80069a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	e009      	b.n	80064c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b4:	e004      	b.n	80064c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f99e 	bl	80067fa <USBD_CtlError>
  }
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b4e      	ldr	r3, [pc, #312]	@ (8006618 <USBD_SetConfig+0x150>)
 80064de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006618 <USBD_SetConfig+0x150>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d905      	bls.n	80064f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f985 	bl	80067fa <USBD_CtlError>
    return USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e08c      	b.n	800660e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d002      	beq.n	8006506 <USBD_SetConfig+0x3e>
 8006500:	2b03      	cmp	r3, #3
 8006502:	d029      	beq.n	8006558 <USBD_SetConfig+0x90>
 8006504:	e075      	b.n	80065f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006506:	4b44      	ldr	r3, [pc, #272]	@ (8006618 <USBD_SetConfig+0x150>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800650e:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <USBD_SetConfig+0x150>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006518:	4b3f      	ldr	r3, [pc, #252]	@ (8006618 <USBD_SetConfig+0x150>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fe ffe3 	bl	80054ea <USBD_SetClassConfig>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f962 	bl	80067fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800653e:	e065      	b.n	800660c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa31 	bl	80069a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2203      	movs	r2, #3
 800654a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800654e:	e05d      	b.n	800660c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa29 	bl	80069a8 <USBD_CtlSendStatus>
      break;
 8006556:	e059      	b.n	800660c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006558:	4b2f      	ldr	r3, [pc, #188]	@ (8006618 <USBD_SetConfig+0x150>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d112      	bne.n	8006586 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006568:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <USBD_SetConfig+0x150>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006572:	4b29      	ldr	r3, [pc, #164]	@ (8006618 <USBD_SetConfig+0x150>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fe ffd2 	bl	8005522 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa12 	bl	80069a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006584:	e042      	b.n	800660c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <USBD_SetConfig+0x150>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d02a      	beq.n	80065ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fe ffc0 	bl	8005522 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <USBD_SetConfig+0x150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <USBD_SetConfig+0x150>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fe ff99 	bl	80054ea <USBD_SetClassConfig>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f918 	bl	80067fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fe ffa5 	bl	8005522 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065e0:	e014      	b.n	800660c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9e0 	bl	80069a8 <USBD_CtlSendStatus>
      break;
 80065e8:	e010      	b.n	800660c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9dc 	bl	80069a8 <USBD_CtlSendStatus>
      break;
 80065f0:	e00c      	b.n	800660c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f900 	bl	80067fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065fa:	4b07      	ldr	r3, [pc, #28]	@ (8006618 <USBD_SetConfig+0x150>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fe ff8e 	bl	8005522 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	73fb      	strb	r3, [r7, #15]
      break;
 800660a:	bf00      	nop
  }

  return ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000470 	.word	0x20000470

0800661c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d004      	beq.n	8006638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8e2 	bl	80067fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006636:	e023      	b.n	8006680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	dc02      	bgt.n	800664a <USBD_GetConfig+0x2e>
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc03      	bgt.n	8006650 <USBD_GetConfig+0x34>
 8006648:	e015      	b.n	8006676 <USBD_GetConfig+0x5a>
 800664a:	2b03      	cmp	r3, #3
 800664c:	d00b      	beq.n	8006666 <USBD_GetConfig+0x4a>
 800664e:	e012      	b.n	8006676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3308      	adds	r3, #8
 800665a:	2201      	movs	r2, #1
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f948 	bl	80068f4 <USBD_CtlSendData>
        break;
 8006664:	e00c      	b.n	8006680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2201      	movs	r2, #1
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f940 	bl	80068f4 <USBD_CtlSendData>
        break;
 8006674:	e004      	b.n	8006680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8be 	bl	80067fa <USBD_CtlError>
        break;
 800667e:	bf00      	nop
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	2b02      	cmp	r3, #2
 800669e:	d81e      	bhi.n	80066de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	88db      	ldrh	r3, [r3, #6]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d004      	beq.n	80066b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8a5 	bl	80067fa <USBD_CtlError>
        break;
 80066b0:	e01a      	b.n	80066e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f043 0202 	orr.w	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	330c      	adds	r3, #12
 80066d2:	2202      	movs	r2, #2
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f90c 	bl	80068f4 <USBD_CtlSendData>
      break;
 80066dc:	e004      	b.n	80066e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f88a 	bl	80067fa <USBD_CtlError>
      break;
 80066e6:	bf00      	nop
  }
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f94c 	bl	80069a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006710:	e013      	b.n	800673a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	885b      	ldrh	r3, [r3, #2]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d10b      	bne.n	8006732 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	b29b      	uxth	r3, r3
 8006722:	b2da      	uxtb	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f93c 	bl	80069a8 <USBD_CtlSendStatus>
}
 8006730:	e003      	b.n	800673a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f860 	bl	80067fa <USBD_CtlError>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	2b02      	cmp	r3, #2
 8006758:	d80b      	bhi.n	8006772 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	885b      	ldrh	r3, [r3, #2]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10c      	bne.n	800677c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f91c 	bl	80069a8 <USBD_CtlSendStatus>
      }
      break;
 8006770:	e004      	b.n	800677c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f840 	bl	80067fa <USBD_CtlError>
      break;
 800677a:	e000      	b.n	800677e <USBD_ClrFeature+0x3c>
      break;
 800677c:	bf00      	nop
  }
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	781a      	ldrb	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fa40 	bl	8005c36 <SWAPBYTE>
 80067b6:	4603      	mov	r3, r0
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fa33 	bl	8005c36 <SWAPBYTE>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff fa26 	bl	8005c36 <SWAPBYTE>
 80067ea:	4603      	mov	r3, r0
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	80da      	strh	r2, [r3, #6]
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006804:	2180      	movs	r1, #128	@ 0x80
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fe1a 	bl	8008440 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fe16 	bl	8008440 <USBD_LL_StallEP>
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d042      	beq.n	80068b8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006836:	6938      	ldr	r0, [r7, #16]
 8006838:	f000 f842 	bl	80068c0 <USBD_GetLen>
 800683c:	4603      	mov	r3, r0
 800683e:	3301      	adds	r3, #1
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006846:	d808      	bhi.n	800685a <USBD_GetString+0x3e>
 8006848:	6938      	ldr	r0, [r7, #16]
 800684a:	f000 f839 	bl	80068c0 <USBD_GetLen>
 800684e:	4603      	mov	r3, r0
 8006850:	3301      	adds	r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	e001      	b.n	800685e <USBD_GetString+0x42>
 800685a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	701a      	strb	r2, [r3, #0]
  idx++;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	3301      	adds	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	2203      	movs	r2, #3
 800687c:	701a      	strb	r2, [r3, #0]
  idx++;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	3301      	adds	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006884:	e013      	b.n	80068ae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4413      	add	r3, r2
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3301      	adds	r3, #1
 8006896:	613b      	str	r3, [r7, #16]
    idx++;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	3301      	adds	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	4413      	add	r3, r2
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	3301      	adds	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e7      	bne.n	8006886 <USBD_GetString+0x6a>
 80068b6:	e000      	b.n	80068ba <USBD_GetString+0x9e>
    return;
 80068b8:	bf00      	nop
  }
}
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068d0:	e005      	b.n	80068de <USBD_GetLen+0x1e>
  {
    len++;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	3301      	adds	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	3301      	adds	r3, #1
 80068dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f5      	bne.n	80068d2 <USBD_GetLen+0x12>
  }

  return len;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2202      	movs	r2, #2
 8006904:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	2100      	movs	r1, #0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f001 fe19 	bl	8008552 <USBD_LL_Transmit>

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	2100      	movs	r1, #0
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f001 fe08 	bl	8008552 <USBD_LL_Transmit>

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2203      	movs	r2, #3
 800695c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	2100      	movs	r1, #0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f001 fe0c 	bl	8008594 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	2100      	movs	r1, #0
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f001 fdfb 	bl	8008594 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2204      	movs	r2, #4
 80069b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069b8:	2300      	movs	r3, #0
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fdc7 	bl	8008552 <USBD_LL_Transmit>

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2205      	movs	r2, #5
 80069da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069de:	2300      	movs	r3, #0
 80069e0:	2200      	movs	r2, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 fdd5 	bl	8008594 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f103 0208 	add.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 0208 	add.w	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f103 0208 	add.w	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6892      	ldr	r2, [r2, #8]
 8006aac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6852      	ldr	r2, [r2, #4]
 8006ab6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d103      	bne.n	8006aca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1e5a      	subs	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b08e      	sub	sp, #56	@ 0x38
 8006aee:	af04      	add	r7, sp, #16
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61fb      	str	r3, [r7, #28]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b34:	23a0      	movs	r3, #160	@ 0xa0
 8006b36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b3c:	d00b      	beq.n	8006b56 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	61bb      	str	r3, [r7, #24]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01e      	beq.n	8006b9c <xTaskCreateStatic+0xb2>
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b6c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b76:	2300      	movs	r3, #0
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	9302      	str	r3, [sp, #8]
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f850 	bl	8006c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b96:	f000 f8ed 	bl	8006d74 <prvAddNewTaskToReadyList>
 8006b9a:	e001      	b.n	8006ba0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ba0:	697b      	ldr	r3, [r7, #20]
	}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3728      	adds	r7, #40	@ 0x28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b08c      	sub	sp, #48	@ 0x30
 8006bae:	af04      	add	r7, sp, #16
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fe62 	bl	8007888 <pvPortMalloc>
 8006bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00e      	beq.n	8006bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bcc:	20a0      	movs	r0, #160	@ 0xa0
 8006bce:	f000 fe5b 	bl	8007888 <pvPortMalloc>
 8006bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	631a      	str	r2, [r3, #48]	@ 0x30
 8006be0:	e005      	b.n	8006bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006be2:	6978      	ldr	r0, [r7, #20]
 8006be4:	f000 ff1e 	bl	8007a24 <vPortFree>
 8006be8:	e001      	b.n	8006bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d017      	beq.n	8006c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bfc:	88fa      	ldrh	r2, [r7, #6]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9303      	str	r3, [sp, #12]
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	9302      	str	r3, [sp, #8]
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f80e 	bl	8006c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c18:	69f8      	ldr	r0, [r7, #28]
 8006c1a:	f000 f8ab 	bl	8006d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	e002      	b.n	8006c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	617b      	str	r3, [r7, #20]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e012      	b.n	8006cb0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	7819      	ldrb	r1, [r3, #0]
 8006c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	3334      	adds	r3, #52	@ 0x34
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d006      	beq.n	8006cb8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b0f      	cmp	r3, #15
 8006cb4:	d9e9      	bls.n	8006c8a <prvInitialiseNewTask+0x56>
 8006cb6:	e000      	b.n	8006cba <prvInitialiseNewTask+0x86>
			{
				break;
 8006cb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cc2:	e003      	b.n	8006ccc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	2b06      	cmp	r3, #6
 8006cd0:	d901      	bls.n	8006cd6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cda:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ce0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fea1 	bl	8006a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fe9c 	bl	8006a34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	f1c3 0207 	rsb	r2, r3, #7
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	334c      	adds	r3, #76	@ 0x4c
 8006d26:	224c      	movs	r2, #76	@ 0x4c
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 fd7e 	bl	800882c <memset>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	4a0d      	ldr	r2, [pc, #52]	@ (8006d68 <prvInitialiseNewTask+0x134>)
 8006d34:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	4a0c      	ldr	r2, [pc, #48]	@ (8006d6c <prvInitialiseNewTask+0x138>)
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <prvInitialiseNewTask+0x13c>)
 8006d40:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	68f9      	ldr	r1, [r7, #12]
 8006d46:	69b8      	ldr	r0, [r7, #24]
 8006d48:	f000 fb8e 	bl	8007468 <pxPortInitialiseStack>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d5e:	bf00      	nop
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20005da8 	.word	0x20005da8
 8006d6c:	20005e10 	.word	0x20005e10
 8006d70:	20005e78 	.word	0x20005e78

08006d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d7c:	f000 fca4 	bl	80076c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	@ (8006e2c <prvAddNewTaskToReadyList+0xb8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a29      	ldr	r2, [pc, #164]	@ (8006e2c <prvAddNewTaskToReadyList+0xb8>)
 8006d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8a:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <prvAddNewTaskToReadyList+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d92:	4a27      	ldr	r2, [pc, #156]	@ (8006e30 <prvAddNewTaskToReadyList+0xbc>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d98:	4b24      	ldr	r3, [pc, #144]	@ (8006e2c <prvAddNewTaskToReadyList+0xb8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d110      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da0:	f000 fa9e 	bl	80072e0 <prvInitialiseTaskLists>
 8006da4:	e00d      	b.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006da6:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <prvAddNewTaskToReadyList+0xc0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dae:	4b20      	ldr	r3, [pc, #128]	@ (8006e30 <prvAddNewTaskToReadyList+0xbc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d802      	bhi.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e30 <prvAddNewTaskToReadyList+0xbc>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006dca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	4b19      	ldr	r3, [pc, #100]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	4a18      	ldr	r2, [pc, #96]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a15      	ldr	r2, [pc, #84]	@ (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006dec:	441a      	add	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7ff fe2a 	bl	8006a4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dfa:	f000 fc97 	bl	800772c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <prvAddNewTaskToReadyList+0xc0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <prvAddNewTaskToReadyList+0xbc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d207      	bcs.n	8006e24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e14:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000574 	.word	0x20000574
 8006e30:	20000474 	.word	0x20000474
 8006e34:	20000580 	.word	0x20000580
 8006e38:	20000590 	.word	0x20000590
 8006e3c:	2000057c 	.word	0x2000057c
 8006e40:	20000478 	.word	0x20000478
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	@ 0x28
 8006e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e56:	463a      	mov	r2, r7
 8006e58:	1d39      	adds	r1, r7, #4
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7f9 fb98 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	9202      	str	r2, [sp, #8]
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	460a      	mov	r2, r1
 8006e76:	4921      	ldr	r1, [pc, #132]	@ (8006efc <vTaskStartScheduler+0xb4>)
 8006e78:	4821      	ldr	r0, [pc, #132]	@ (8006f00 <vTaskStartScheduler+0xb8>)
 8006e7a:	f7ff fe36 	bl	8006aea <xTaskCreateStatic>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4a20      	ldr	r2, [pc, #128]	@ (8006f04 <vTaskStartScheduler+0xbc>)
 8006e82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e84:	4b1f      	ldr	r3, [pc, #124]	@ (8006f04 <vTaskStartScheduler+0xbc>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e001      	b.n	8006e96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d11b      	bne.n	8006ed4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	613b      	str	r3, [r7, #16]
}
 8006eae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eb0:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <vTaskStartScheduler+0xc0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	334c      	adds	r3, #76	@ 0x4c
 8006eb6:	4a15      	ldr	r2, [pc, #84]	@ (8006f0c <vTaskStartScheduler+0xc4>)
 8006eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eba:	4b15      	ldr	r3, [pc, #84]	@ (8006f10 <vTaskStartScheduler+0xc8>)
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ec2:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <vTaskStartScheduler+0xcc>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ec8:	4b13      	ldr	r3, [pc, #76]	@ (8006f18 <vTaskStartScheduler+0xd0>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ece:	f000 fb57 	bl	8007580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ed2:	e00f      	b.n	8006ef4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eda:	d10b      	bne.n	8006ef4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <vTaskStartScheduler+0xa8>
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	080095e0 	.word	0x080095e0
 8006f00:	080072b1 	.word	0x080072b1
 8006f04:	20000598 	.word	0x20000598
 8006f08:	20000474 	.word	0x20000474
 8006f0c:	2000010c 	.word	0x2000010c
 8006f10:	20000594 	.word	0x20000594
 8006f14:	20000580 	.word	0x20000580
 8006f18:	20000578 	.word	0x20000578

08006f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <vTaskSuspendAll+0x18>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	4a03      	ldr	r2, [pc, #12]	@ (8006f34 <vTaskSuspendAll+0x18>)
 8006f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f2a:	bf00      	nop
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	2000059c 	.word	0x2000059c

08006f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f46:	4b42      	ldr	r3, [pc, #264]	@ (8007050 <xTaskResumeAll+0x118>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xTaskResumeAll+0x2e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	603b      	str	r3, [r7, #0]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f66:	f000 fbaf 	bl	80076c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f6a:	4b39      	ldr	r3, [pc, #228]	@ (8007050 <xTaskResumeAll+0x118>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <xTaskResumeAll+0x118>)
 8006f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f74:	4b36      	ldr	r3, [pc, #216]	@ (8007050 <xTaskResumeAll+0x118>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d161      	bne.n	8007040 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f7c:	4b35      	ldr	r3, [pc, #212]	@ (8007054 <xTaskResumeAll+0x11c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05d      	beq.n	8007040 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f84:	e02e      	b.n	8006fe4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f86:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <xTaskResumeAll+0x120>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3318      	adds	r3, #24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fd7f 	bl	8006a96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fd7a 	bl	8006a96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b2c      	ldr	r3, [pc, #176]	@ (800705c <xTaskResumeAll+0x124>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800705c <xTaskResumeAll+0x124>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a27      	ldr	r2, [pc, #156]	@ (8007060 <xTaskResumeAll+0x128>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7ff fd3f 	bl	8006a4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd4:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <xTaskResumeAll+0x12c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fde:	4b22      	ldr	r3, [pc, #136]	@ (8007068 <xTaskResumeAll+0x130>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8007058 <xTaskResumeAll+0x120>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1cc      	bne.n	8006f86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ff2:	f000 fa19 	bl	8007428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800706c <xTaskResumeAll+0x134>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d010      	beq.n	8007024 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007002:	f000 f837 	bl	8007074 <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <xTaskResumeAll+0x130>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800701e:	4b13      	ldr	r3, [pc, #76]	@ (800706c <xTaskResumeAll+0x134>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007024:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <xTaskResumeAll+0x130>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007030:	4b0f      	ldr	r3, [pc, #60]	@ (8007070 <xTaskResumeAll+0x138>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007040:	f000 fb74 	bl	800772c <vPortExitCritical>

	return xAlreadyYielded;
 8007044:	68bb      	ldr	r3, [r7, #8]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2000059c 	.word	0x2000059c
 8007054:	20000574 	.word	0x20000574
 8007058:	20000534 	.word	0x20000534
 800705c:	2000057c 	.word	0x2000057c
 8007060:	20000478 	.word	0x20000478
 8007064:	20000474 	.word	0x20000474
 8007068:	20000588 	.word	0x20000588
 800706c:	20000584 	.word	0x20000584
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707e:	4b4f      	ldr	r3, [pc, #316]	@ (80071bc <xTaskIncrementTick+0x148>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 808f 	bne.w	80071a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007088:	4b4d      	ldr	r3, [pc, #308]	@ (80071c0 <xTaskIncrementTick+0x14c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3301      	adds	r3, #1
 800708e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007090:	4a4b      	ldr	r2, [pc, #300]	@ (80071c0 <xTaskIncrementTick+0x14c>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d121      	bne.n	80070e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800709c:	4b49      	ldr	r3, [pc, #292]	@ (80071c4 <xTaskIncrementTick+0x150>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <xTaskIncrementTick+0x4a>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	603b      	str	r3, [r7, #0]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <xTaskIncrementTick+0x46>
 80070be:	4b41      	ldr	r3, [pc, #260]	@ (80071c4 <xTaskIncrementTick+0x150>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	4b40      	ldr	r3, [pc, #256]	@ (80071c8 <xTaskIncrementTick+0x154>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3e      	ldr	r2, [pc, #248]	@ (80071c4 <xTaskIncrementTick+0x150>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	4a3e      	ldr	r2, [pc, #248]	@ (80071c8 <xTaskIncrementTick+0x154>)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	4b3e      	ldr	r3, [pc, #248]	@ (80071cc <xTaskIncrementTick+0x158>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3301      	adds	r3, #1
 80070d8:	4a3c      	ldr	r2, [pc, #240]	@ (80071cc <xTaskIncrementTick+0x158>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	f000 f9a4 	bl	8007428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070e0:	4b3b      	ldr	r3, [pc, #236]	@ (80071d0 <xTaskIncrementTick+0x15c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d348      	bcc.n	800717c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ea:	4b36      	ldr	r3, [pc, #216]	@ (80071c4 <xTaskIncrementTick+0x150>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f4:	4b36      	ldr	r3, [pc, #216]	@ (80071d0 <xTaskIncrementTick+0x15c>)
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070fa:	601a      	str	r2, [r3, #0]
					break;
 80070fc:	e03e      	b.n	800717c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fe:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <xTaskIncrementTick+0x150>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d203      	bcs.n	800711e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007116:	4a2e      	ldr	r2, [pc, #184]	@ (80071d0 <xTaskIncrementTick+0x15c>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800711c:	e02e      	b.n	800717c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fcb7 	bl	8006a96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	3318      	adds	r3, #24
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fcae 	bl	8006a96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	2201      	movs	r2, #1
 8007140:	409a      	lsls	r2, r3
 8007142:	4b24      	ldr	r3, [pc, #144]	@ (80071d4 <xTaskIncrementTick+0x160>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4313      	orrs	r3, r2
 8007148:	4a22      	ldr	r2, [pc, #136]	@ (80071d4 <xTaskIncrementTick+0x160>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4a1f      	ldr	r2, [pc, #124]	@ (80071d8 <xTaskIncrementTick+0x164>)
 800715a:	441a      	add	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7ff fc73 	bl	8006a4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <xTaskIncrementTick+0x168>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d3b9      	bcc.n	80070ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007176:	2301      	movs	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717a:	e7b6      	b.n	80070ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800717c:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <xTaskIncrementTick+0x168>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007182:	4915      	ldr	r1, [pc, #84]	@ (80071d8 <xTaskIncrementTick+0x164>)
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d901      	bls.n	8007198 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007198:	4b11      	ldr	r3, [pc, #68]	@ (80071e0 <xTaskIncrementTick+0x16c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e004      	b.n	80071b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <xTaskIncrementTick+0x170>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a0d      	ldr	r2, [pc, #52]	@ (80071e4 <xTaskIncrementTick+0x170>)
 80071ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071b0:	697b      	ldr	r3, [r7, #20]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	2000059c 	.word	0x2000059c
 80071c0:	20000578 	.word	0x20000578
 80071c4:	2000052c 	.word	0x2000052c
 80071c8:	20000530 	.word	0x20000530
 80071cc:	2000058c 	.word	0x2000058c
 80071d0:	20000594 	.word	0x20000594
 80071d4:	2000057c 	.word	0x2000057c
 80071d8:	20000478 	.word	0x20000478
 80071dc:	20000474 	.word	0x20000474
 80071e0:	20000588 	.word	0x20000588
 80071e4:	20000584 	.word	0x20000584

080071e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007298 <vTaskSwitchContext+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071f6:	4b29      	ldr	r3, [pc, #164]	@ (800729c <vTaskSwitchContext+0xb4>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071fc:	e045      	b.n	800728a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80071fe:	4b27      	ldr	r3, [pc, #156]	@ (800729c <vTaskSwitchContext+0xb4>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007204:	4b26      	ldr	r3, [pc, #152]	@ (80072a0 <vTaskSwitchContext+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	fab3 f383 	clz	r3, r3
 8007210:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	f1c3 031f 	rsb	r3, r3, #31
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	4922      	ldr	r1, [pc, #136]	@ (80072a4 <vTaskSwitchContext+0xbc>)
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <vTaskSwitchContext+0x5e>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <vTaskSwitchContext+0x5a>
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4a14      	ldr	r2, [pc, #80]	@ (80072a4 <vTaskSwitchContext+0xbc>)
 8007252:	4413      	add	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3308      	adds	r3, #8
 8007268:	429a      	cmp	r2, r3
 800726a:	d104      	bne.n	8007276 <vTaskSwitchContext+0x8e>
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4a0a      	ldr	r2, [pc, #40]	@ (80072a8 <vTaskSwitchContext+0xc0>)
 800727e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007280:	4b09      	ldr	r3, [pc, #36]	@ (80072a8 <vTaskSwitchContext+0xc0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	334c      	adds	r3, #76	@ 0x4c
 8007286:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <vTaskSwitchContext+0xc4>)
 8007288:	6013      	str	r3, [r2, #0]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	2000059c 	.word	0x2000059c
 800729c:	20000588 	.word	0x20000588
 80072a0:	2000057c 	.word	0x2000057c
 80072a4:	20000478 	.word	0x20000478
 80072a8:	20000474 	.word	0x20000474
 80072ac:	2000010c 	.word	0x2000010c

080072b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072b8:	f000 f852 	bl	8007360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072bc:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <prvIdleTask+0x28>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d9f9      	bls.n	80072b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <prvIdleTask+0x2c>)
 80072c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072d4:	e7f0      	b.n	80072b8 <prvIdleTask+0x8>
 80072d6:	bf00      	nop
 80072d8:	20000478 	.word	0x20000478
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072e6:	2300      	movs	r3, #0
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	e00c      	b.n	8007306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4a12      	ldr	r2, [pc, #72]	@ (8007340 <prvInitialiseTaskLists+0x60>)
 80072f8:	4413      	add	r3, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fb7a 	bl	80069f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3301      	adds	r3, #1
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b06      	cmp	r3, #6
 800730a:	d9ef      	bls.n	80072ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800730c:	480d      	ldr	r0, [pc, #52]	@ (8007344 <prvInitialiseTaskLists+0x64>)
 800730e:	f7ff fb71 	bl	80069f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007312:	480d      	ldr	r0, [pc, #52]	@ (8007348 <prvInitialiseTaskLists+0x68>)
 8007314:	f7ff fb6e 	bl	80069f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007318:	480c      	ldr	r0, [pc, #48]	@ (800734c <prvInitialiseTaskLists+0x6c>)
 800731a:	f7ff fb6b 	bl	80069f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800731e:	480c      	ldr	r0, [pc, #48]	@ (8007350 <prvInitialiseTaskLists+0x70>)
 8007320:	f7ff fb68 	bl	80069f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007324:	480b      	ldr	r0, [pc, #44]	@ (8007354 <prvInitialiseTaskLists+0x74>)
 8007326:	f7ff fb65 	bl	80069f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <prvInitialiseTaskLists+0x78>)
 800732c:	4a05      	ldr	r2, [pc, #20]	@ (8007344 <prvInitialiseTaskLists+0x64>)
 800732e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <prvInitialiseTaskLists+0x7c>)
 8007332:	4a05      	ldr	r2, [pc, #20]	@ (8007348 <prvInitialiseTaskLists+0x68>)
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000478 	.word	0x20000478
 8007344:	20000504 	.word	0x20000504
 8007348:	20000518 	.word	0x20000518
 800734c:	20000534 	.word	0x20000534
 8007350:	20000548 	.word	0x20000548
 8007354:	20000560 	.word	0x20000560
 8007358:	2000052c 	.word	0x2000052c
 800735c:	20000530 	.word	0x20000530

08007360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007366:	e019      	b.n	800739c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007368:	f000 f9ae 	bl	80076c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736c:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <prvCheckTasksWaitingTermination+0x50>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fb8c 	bl	8006a96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <prvCheckTasksWaitingTermination+0x54>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3b01      	subs	r3, #1
 8007384:	4a0b      	ldr	r2, [pc, #44]	@ (80073b4 <prvCheckTasksWaitingTermination+0x54>)
 8007386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007388:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <prvCheckTasksWaitingTermination+0x58>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	4a0a      	ldr	r2, [pc, #40]	@ (80073b8 <prvCheckTasksWaitingTermination+0x58>)
 8007390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007392:	f000 f9cb 	bl	800772c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f810 	bl	80073bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800739c:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <prvCheckTasksWaitingTermination+0x58>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e1      	bne.n	8007368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000548 	.word	0x20000548
 80073b4:	20000574 	.word	0x20000574
 80073b8:	2000055c 	.word	0x2000055c

080073bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	334c      	adds	r3, #76	@ 0x4c
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 fa37 	bl	800883c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fb21 	bl	8007a24 <vPortFree>
				vPortFree( pxTCB );
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb1e 	bl	8007a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073e8:	e019      	b.n	800741e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d103      	bne.n	80073fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fb15 	bl	8007a24 <vPortFree>
	}
 80073fa:	e010      	b.n	800741e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007402:	2b02      	cmp	r3, #2
 8007404:	d00b      	beq.n	800741e <prvDeleteTCB+0x62>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <prvDeleteTCB+0x5e>
	}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800742e:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <prvResetNextTaskUnblockTime+0x38>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007438:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <prvResetNextTaskUnblockTime+0x3c>)
 800743a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800743e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007440:	e008      	b.n	8007454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007442:	4b07      	ldr	r3, [pc, #28]	@ (8007460 <prvResetNextTaskUnblockTime+0x38>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4a04      	ldr	r2, [pc, #16]	@ (8007464 <prvResetNextTaskUnblockTime+0x3c>)
 8007452:	6013      	str	r3, [r2, #0]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	2000052c 	.word	0x2000052c
 8007464:	20000594 	.word	0x20000594

08007468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3b04      	subs	r3, #4
 8007478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b04      	subs	r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0201 	bic.w	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3b04      	subs	r3, #4
 8007496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007498:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <pxPortInitialiseStack+0x64>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b14      	subs	r3, #20
 80074a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f06f 0202 	mvn.w	r2, #2
 80074b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3b20      	subs	r3, #32
 80074bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	080074d1 	.word	0x080074d1

080074d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074da:	4b13      	ldr	r3, [pc, #76]	@ (8007528 <prvTaskExitError+0x58>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e2:	d00b      	beq.n	80074fc <prvTaskExitError+0x2c>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60fb      	str	r3, [r7, #12]
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <prvTaskExitError+0x28>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60bb      	str	r3, [r7, #8]
}
 800750e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007510:	bf00      	nop
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0fc      	beq.n	8007512 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000098 	.word	0x20000098
 800752c:	00000000 	.word	0x00000000

08007530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007530:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <pxCurrentTCBConst2>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	f380 8809 	msr	PSP, r0
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	4770      	bx	lr
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst2>:
 8007550:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007558:	4808      	ldr	r0, [pc, #32]	@ (800757c <prvPortStartFirstTask+0x24>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8814 	msr	CONTROL, r0
 800756a:	b662      	cpsie	i
 800756c:	b661      	cpsie	f
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	df00      	svc	0
 8007578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800757a:	bf00      	nop
 800757c:	e000ed08 	.word	0xe000ed08

08007580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007586:	4b47      	ldr	r3, [pc, #284]	@ (80076a4 <xPortStartScheduler+0x124>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a47      	ldr	r2, [pc, #284]	@ (80076a8 <xPortStartScheduler+0x128>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10b      	bne.n	80075a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	613b      	str	r3, [r7, #16]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075a8:	4b3e      	ldr	r3, [pc, #248]	@ (80076a4 <xPortStartScheduler+0x124>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3f      	ldr	r2, [pc, #252]	@ (80076ac <xPortStartScheduler+0x12c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d10b      	bne.n	80075ca <xPortStartScheduler+0x4a>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60fb      	str	r3, [r7, #12]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075ca:	4b39      	ldr	r3, [pc, #228]	@ (80076b0 <xPortStartScheduler+0x130>)
 80075cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	22ff      	movs	r2, #255	@ 0xff
 80075da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <xPortStartScheduler+0x134>)
 80075f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075f2:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <xPortStartScheduler+0x138>)
 80075f4:	2207      	movs	r2, #7
 80075f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075f8:	e009      	b.n	800760e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80075fa:	4b2f      	ldr	r3, [pc, #188]	@ (80076b8 <xPortStartScheduler+0x138>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3b01      	subs	r3, #1
 8007600:	4a2d      	ldr	r2, [pc, #180]	@ (80076b8 <xPortStartScheduler+0x138>)
 8007602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007616:	2b80      	cmp	r3, #128	@ 0x80
 8007618:	d0ef      	beq.n	80075fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800761a:	4b27      	ldr	r3, [pc, #156]	@ (80076b8 <xPortStartScheduler+0x138>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1c3 0307 	rsb	r3, r3, #7
 8007622:	2b04      	cmp	r3, #4
 8007624:	d00b      	beq.n	800763e <xPortStartScheduler+0xbe>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60bb      	str	r3, [r7, #8]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800763e:	4b1e      	ldr	r3, [pc, #120]	@ (80076b8 <xPortStartScheduler+0x138>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <xPortStartScheduler+0x138>)
 8007646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007648:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <xPortStartScheduler+0x138>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007650:	4a19      	ldr	r2, [pc, #100]	@ (80076b8 <xPortStartScheduler+0x138>)
 8007652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	b2da      	uxtb	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800765c:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <xPortStartScheduler+0x13c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a16      	ldr	r2, [pc, #88]	@ (80076bc <xPortStartScheduler+0x13c>)
 8007662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007668:	4b14      	ldr	r3, [pc, #80]	@ (80076bc <xPortStartScheduler+0x13c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a13      	ldr	r2, [pc, #76]	@ (80076bc <xPortStartScheduler+0x13c>)
 800766e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007674:	f000 f8da 	bl	800782c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007678:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <xPortStartScheduler+0x140>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800767e:	f000 f8f9 	bl	8007874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007682:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <xPortStartScheduler+0x144>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a0f      	ldr	r2, [pc, #60]	@ (80076c4 <xPortStartScheduler+0x144>)
 8007688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800768c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800768e:	f7ff ff63 	bl	8007558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007692:	f7ff fda9 	bl	80071e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007696:	f7ff ff1b 	bl	80074d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	e000ed00 	.word	0xe000ed00
 80076a8:	410fc271 	.word	0x410fc271
 80076ac:	410fc270 	.word	0x410fc270
 80076b0:	e000e400 	.word	0xe000e400
 80076b4:	200005a0 	.word	0x200005a0
 80076b8:	200005a4 	.word	0x200005a4
 80076bc:	e000ed20 	.word	0xe000ed20
 80076c0:	20000098 	.word	0x20000098
 80076c4:	e000ef34 	.word	0xe000ef34

080076c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076e2:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <vPortEnterCritical+0x5c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3301      	adds	r3, #1
 80076e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007724 <vPortEnterCritical+0x5c>)
 80076ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007724 <vPortEnterCritical+0x5c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d110      	bne.n	8007716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <vPortEnterCritical+0x60>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <vPortEnterCritical+0x4e>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	603b      	str	r3, [r7, #0]
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	e7fd      	b.n	8007712 <vPortEnterCritical+0x4a>
	}
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000098 	.word	0x20000098
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007732:	4b12      	ldr	r3, [pc, #72]	@ (800777c <vPortExitCritical+0x50>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <vPortExitCritical+0x26>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	607b      	str	r3, [r7, #4]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <vPortExitCritical+0x50>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3b01      	subs	r3, #1
 8007758:	4a08      	ldr	r2, [pc, #32]	@ (800777c <vPortExitCritical+0x50>)
 800775a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800775c:	4b07      	ldr	r3, [pc, #28]	@ (800777c <vPortExitCritical+0x50>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <vPortExitCritical+0x44>
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800776e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	20000098 	.word	0x20000098

08007780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007780:	f3ef 8009 	mrs	r0, PSP
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <pxCurrentTCBConst>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	f01e 0f10 	tst.w	lr, #16
 8007790:	bf08      	it	eq
 8007792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077a4:	f380 8811 	msr	BASEPRI, r0
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f7ff fd1a 	bl	80071e8 <vTaskSwitchContext>
 80077b4:	f04f 0000 	mov.w	r0, #0
 80077b8:	f380 8811 	msr	BASEPRI, r0
 80077bc:	bc09      	pop	{r0, r3}
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	6808      	ldr	r0, [r1, #0]
 80077c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c6:	f01e 0f10 	tst.w	lr, #16
 80077ca:	bf08      	it	eq
 80077cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077d0:	f380 8809 	msr	PSP, r0
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst>:
 80077e0:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007802:	f7ff fc37 	bl	8007074 <xTaskIncrementTick>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <SysTick_Handler+0x40>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f383 8811 	msr	BASEPRI, r3
}
 800781e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007830:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007836:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <vPortSetupTimerInterrupt+0x38>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800783c:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <vPortSetupTimerInterrupt+0x3c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a0a      	ldr	r2, [pc, #40]	@ (800786c <vPortSetupTimerInterrupt+0x40>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	4a09      	ldr	r2, [pc, #36]	@ (8007870 <vPortSetupTimerInterrupt+0x44>)
 800784a:	3b01      	subs	r3, #1
 800784c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800784e:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007850:	2207      	movs	r2, #7
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	e000e010 	.word	0xe000e010
 8007864:	e000e018 	.word	0xe000e018
 8007868:	20000000 	.word	0x20000000
 800786c:	10624dd3 	.word	0x10624dd3
 8007870:	e000e014 	.word	0xe000e014

08007874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007884 <vPortEnableVFP+0x10>
 8007878:	6801      	ldr	r1, [r0, #0]
 800787a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800787e:	6001      	str	r1, [r0, #0]
 8007880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007882:	bf00      	nop
 8007884:	e000ed88 	.word	0xe000ed88

08007888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	@ 0x28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007894:	f7ff fb42 	bl	8006f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007898:	4b5c      	ldr	r3, [pc, #368]	@ (8007a0c <pvPortMalloc+0x184>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a0:	f000 f924 	bl	8007aec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a10 <pvPortMalloc+0x188>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8095 	bne.w	80079dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01e      	beq.n	80078f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	3308      	adds	r3, #8
 80078d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <pvPortMalloc+0x6e>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	617b      	str	r3, [r7, #20]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d06f      	beq.n	80079dc <pvPortMalloc+0x154>
 80078fc:	4b45      	ldr	r3, [pc, #276]	@ (8007a14 <pvPortMalloc+0x18c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	429a      	cmp	r2, r3
 8007904:	d86a      	bhi.n	80079dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007906:	4b44      	ldr	r3, [pc, #272]	@ (8007a18 <pvPortMalloc+0x190>)
 8007908:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800790a:	4b43      	ldr	r3, [pc, #268]	@ (8007a18 <pvPortMalloc+0x190>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007910:	e004      	b.n	800791c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d903      	bls.n	800792e <pvPortMalloc+0xa6>
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f1      	bne.n	8007912 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800792e:	4b37      	ldr	r3, [pc, #220]	@ (8007a0c <pvPortMalloc+0x184>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	429a      	cmp	r2, r3
 8007936:	d051      	beq.n	80079dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	4413      	add	r3, r2
 8007940:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	2308      	movs	r3, #8
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	429a      	cmp	r2, r3
 8007958:	d920      	bls.n	800799c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800795a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <pvPortMalloc+0xfc>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	613b      	str	r3, [r7, #16]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007996:	69b8      	ldr	r0, [r7, #24]
 8007998:	f000 f90a 	bl	8007bb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800799c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a14 <pvPortMalloc+0x18c>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a14 <pvPortMalloc+0x18c>)
 80079a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <pvPortMalloc+0x18c>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b1b      	ldr	r3, [pc, #108]	@ (8007a1c <pvPortMalloc+0x194>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d203      	bcs.n	80079be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079b6:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <pvPortMalloc+0x18c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a18      	ldr	r2, [pc, #96]	@ (8007a1c <pvPortMalloc+0x194>)
 80079bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <pvPortMalloc+0x188>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079d2:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <pvPortMalloc+0x198>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	4a11      	ldr	r2, [pc, #68]	@ (8007a20 <pvPortMalloc+0x198>)
 80079da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079dc:	f7ff faac 	bl	8006f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <pvPortMalloc+0x17a>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60fb      	str	r3, [r7, #12]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <pvPortMalloc+0x176>
	return pvReturn;
 8007a02:	69fb      	ldr	r3, [r7, #28]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3728      	adds	r7, #40	@ 0x28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200041b0 	.word	0x200041b0
 8007a10:	200041c4 	.word	0x200041c4
 8007a14:	200041b4 	.word	0x200041b4
 8007a18:	200041a8 	.word	0x200041a8
 8007a1c:	200041b8 	.word	0x200041b8
 8007a20:	200041bc 	.word	0x200041bc

08007a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d04f      	beq.n	8007ad6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a36:	2308      	movs	r3, #8
 8007a38:	425b      	negs	r3, r3
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b25      	ldr	r3, [pc, #148]	@ (8007ae0 <vPortFree+0xbc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <vPortFree+0x46>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60fb      	str	r3, [r7, #12]
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	e7fd      	b.n	8007a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <vPortFree+0x66>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60bb      	str	r3, [r7, #8]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	4b14      	ldr	r3, [pc, #80]	@ (8007ae0 <vPortFree+0xbc>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01e      	beq.n	8007ad6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d11a      	bne.n	8007ad6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae0 <vPortFree+0xbc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	401a      	ands	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab0:	f7ff fa34 	bl	8006f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <vPortFree+0xc0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	4a09      	ldr	r2, [pc, #36]	@ (8007ae4 <vPortFree+0xc0>)
 8007ac0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ac2:	6938      	ldr	r0, [r7, #16]
 8007ac4:	f000 f874 	bl	8007bb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ac8:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <vPortFree+0xc4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a06      	ldr	r2, [pc, #24]	@ (8007ae8 <vPortFree+0xc4>)
 8007ad0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ad2:	f7ff fa31 	bl	8006f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200041c4 	.word	0x200041c4
 8007ae4:	200041b4 	.word	0x200041b4
 8007ae8:	200041c0 	.word	0x200041c0

08007aec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007af2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007af6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af8:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <prvHeapInit+0xac>)
 8007afa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3307      	adds	r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0307 	bic.w	r3, r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b98 <prvHeapInit+0xac>)
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b24:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <prvHeapInit+0xb0>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b9c <prvHeapInit+0xb0>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b38:	2208      	movs	r2, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ba0 <prvHeapInit+0xb4>)
 8007b4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b4e:	4b14      	ldr	r3, [pc, #80]	@ (8007ba0 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b56:	4b12      	ldr	r3, [pc, #72]	@ (8007ba0 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <prvHeapInit+0xb4>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba4 <prvHeapInit+0xb8>)
 8007b7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a09      	ldr	r2, [pc, #36]	@ (8007ba8 <prvHeapInit+0xbc>)
 8007b82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b84:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <prvHeapInit+0xc0>)
 8007b86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b8a:	601a      	str	r2, [r3, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	200005a8 	.word	0x200005a8
 8007b9c:	200041a8 	.word	0x200041a8
 8007ba0:	200041b0 	.word	0x200041b0
 8007ba4:	200041b8 	.word	0x200041b8
 8007ba8:	200041b4 	.word	0x200041b4
 8007bac:	200041c4 	.word	0x200041c4

08007bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb8:	4b28      	ldr	r3, [pc, #160]	@ (8007c5c <prvInsertBlockIntoFreeList+0xac>)
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e002      	b.n	8007bc4 <prvInsertBlockIntoFreeList+0x14>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d8f7      	bhi.n	8007bbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	4413      	add	r3, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d108      	bne.n	8007bf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d118      	bne.n	8007c38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <prvInsertBlockIntoFreeList+0xb0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d00d      	beq.n	8007c2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e008      	b.n	8007c40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <prvInsertBlockIntoFreeList+0xb0>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e003      	b.n	8007c40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d002      	beq.n	8007c4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	200041a8 	.word	0x200041a8
 8007c60:	200041b0 	.word	0x200041b0

08007c64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4912      	ldr	r1, [pc, #72]	@ (8007cb4 <MX_USB_DEVICE_Init+0x50>)
 8007c6c:	4812      	ldr	r0, [pc, #72]	@ (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c6e:	f7fd fbbf 	bl	80053f0 <USBD_Init>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c78:	f7f8 fdde 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c7c:	490f      	ldr	r1, [pc, #60]	@ (8007cbc <MX_USB_DEVICE_Init+0x58>)
 8007c7e:	480e      	ldr	r0, [pc, #56]	@ (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c80:	f7fd fbe6 	bl	8005450 <USBD_RegisterClass>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c8a:	f7f8 fdd5 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c8e:	490c      	ldr	r1, [pc, #48]	@ (8007cc0 <MX_USB_DEVICE_Init+0x5c>)
 8007c90:	4809      	ldr	r0, [pc, #36]	@ (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c92:	f7fd fadd 	bl	8005250 <USBD_CDC_RegisterInterface>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c9c:	f7f8 fdcc 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca0:	4805      	ldr	r0, [pc, #20]	@ (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007ca2:	f7fd fc0b 	bl	80054bc <USBD_Start>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cac:	f7f8 fdc4 	bl	8000838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200000b0 	.word	0x200000b0
 8007cb8:	200041c8 	.word	0x200041c8
 8007cbc:	20000018 	.word	0x20000018
 8007cc0:	2000009c 	.word	0x2000009c

08007cc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4905      	ldr	r1, [pc, #20]	@ (8007ce0 <CDC_Init_FS+0x1c>)
 8007ccc:	4805      	ldr	r0, [pc, #20]	@ (8007ce4 <CDC_Init_FS+0x20>)
 8007cce:	f7fd fad9 	bl	8005284 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cd2:	4905      	ldr	r1, [pc, #20]	@ (8007ce8 <CDC_Init_FS+0x24>)
 8007cd4:	4803      	ldr	r0, [pc, #12]	@ (8007ce4 <CDC_Init_FS+0x20>)
 8007cd6:	f7fd faf7 	bl	80052c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20004ca4 	.word	0x20004ca4
 8007ce4:	200041c8 	.word	0x200041c8
 8007ce8:	200044a4 	.word	0x200044a4

08007cec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b23      	cmp	r3, #35	@ 0x23
 8007d10:	d84a      	bhi.n	8007da8 <CDC_Control_FS+0xac>
 8007d12:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <CDC_Control_FS+0x1c>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007da9 	.word	0x08007da9
 8007d1c:	08007da9 	.word	0x08007da9
 8007d20:	08007da9 	.word	0x08007da9
 8007d24:	08007da9 	.word	0x08007da9
 8007d28:	08007da9 	.word	0x08007da9
 8007d2c:	08007da9 	.word	0x08007da9
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007da9 	.word	0x08007da9
 8007d38:	08007da9 	.word	0x08007da9
 8007d3c:	08007da9 	.word	0x08007da9
 8007d40:	08007da9 	.word	0x08007da9
 8007d44:	08007da9 	.word	0x08007da9
 8007d48:	08007da9 	.word	0x08007da9
 8007d4c:	08007da9 	.word	0x08007da9
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007da9 	.word	0x08007da9
 8007d58:	08007da9 	.word	0x08007da9
 8007d5c:	08007da9 	.word	0x08007da9
 8007d60:	08007da9 	.word	0x08007da9
 8007d64:	08007da9 	.word	0x08007da9
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007da9 	.word	0x08007da9
 8007d74:	08007da9 	.word	0x08007da9
 8007d78:	08007da9 	.word	0x08007da9
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007da9 	.word	0x08007da9
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007da9 	.word	0x08007da9
 8007da0:	08007da9 	.word	0x08007da9
 8007da4:	08007da9 	.word	0x08007da9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007da8:	bf00      	nop
  }

  return (USBD_OK);
 8007daa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4805      	ldr	r0, [pc, #20]	@ (8007ddc <CDC_Receive_FS+0x24>)
 8007dc6:	f7fd fa7f 	bl	80052c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dca:	4804      	ldr	r0, [pc, #16]	@ (8007ddc <CDC_Receive_FS+0x24>)
 8007dcc:	f7fd fada 	bl	8005384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200041c8 	.word	0x200041c8

08007de0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007df0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <CDC_Transmit_FS+0x48>)
 8007df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007df6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e00b      	b.n	8007e1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e06:	887b      	ldrh	r3, [r7, #2]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4806      	ldr	r0, [pc, #24]	@ (8007e28 <CDC_Transmit_FS+0x48>)
 8007e0e:	f7fd fa39 	bl	8005284 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e12:	4805      	ldr	r0, [pc, #20]	@ (8007e28 <CDC_Transmit_FS+0x48>)
 8007e14:	f7fd fa76 	bl	8005304 <USBD_CDC_TransmitPacket>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	200041c8 	.word	0x200041c8

08007e2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2212      	movs	r2, #18
 8007e60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e62:	4b03      	ldr	r3, [pc, #12]	@ (8007e70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	200000cc 	.word	0x200000cc

08007e74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2204      	movs	r2, #4
 8007e84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e86:	4b03      	ldr	r3, [pc, #12]	@ (8007e94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	200000e0 	.word	0x200000e0

08007e98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4907      	ldr	r1, [pc, #28]	@ (8007ecc <USBD_FS_ProductStrDescriptor+0x34>)
 8007eae:	4808      	ldr	r0, [pc, #32]	@ (8007ed0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007eb0:	f7fe fcb4 	bl	800681c <USBD_GetString>
 8007eb4:	e004      	b.n	8007ec0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	4904      	ldr	r1, [pc, #16]	@ (8007ecc <USBD_FS_ProductStrDescriptor+0x34>)
 8007eba:	4805      	ldr	r0, [pc, #20]	@ (8007ed0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ebc:	f7fe fcae 	bl	800681c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec0:	4b02      	ldr	r3, [pc, #8]	@ (8007ecc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	200054a4 	.word	0x200054a4
 8007ed0:	080095e8 	.word	0x080095e8

08007ed4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	4904      	ldr	r1, [pc, #16]	@ (8007ef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ee4:	4804      	ldr	r0, [pc, #16]	@ (8007ef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ee6:	f7fe fc99 	bl	800681c <USBD_GetString>
  return USBD_StrDesc;
 8007eea:	4b02      	ldr	r3, [pc, #8]	@ (8007ef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200054a4 	.word	0x200054a4
 8007ef8:	08009600 	.word	0x08009600

08007efc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	221a      	movs	r2, #26
 8007f0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f0e:	f000 f843 	bl	8007f98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f12:	4b02      	ldr	r3, [pc, #8]	@ (8007f1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	200000e4 	.word	0x200000e4

08007f20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	4907      	ldr	r1, [pc, #28]	@ (8007f54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f36:	4808      	ldr	r0, [pc, #32]	@ (8007f58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f38:	f7fe fc70 	bl	800681c <USBD_GetString>
 8007f3c:	e004      	b.n	8007f48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	4904      	ldr	r1, [pc, #16]	@ (8007f54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f42:	4805      	ldr	r0, [pc, #20]	@ (8007f58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f44:	f7fe fc6a 	bl	800681c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f48:	4b02      	ldr	r3, [pc, #8]	@ (8007f54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	200054a4 	.word	0x200054a4
 8007f58:	08009614 	.word	0x08009614

08007f5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	6039      	str	r1, [r7, #0]
 8007f66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4907      	ldr	r1, [pc, #28]	@ (8007f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f72:	4808      	ldr	r0, [pc, #32]	@ (8007f94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f74:	f7fe fc52 	bl	800681c <USBD_GetString>
 8007f78:	e004      	b.n	8007f84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4904      	ldr	r1, [pc, #16]	@ (8007f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f7e:	4805      	ldr	r0, [pc, #20]	@ (8007f94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f80:	f7fe fc4c 	bl	800681c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f84:	4b02      	ldr	r3, [pc, #8]	@ (8007f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	200054a4 	.word	0x200054a4
 8007f94:	08009620 	.word	0x08009620

08007f98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fdc <Get_SerialNum+0x44>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe0 <Get_SerialNum+0x48>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007faa:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe4 <Get_SerialNum+0x4c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	4909      	ldr	r1, [pc, #36]	@ (8007fe8 <Get_SerialNum+0x50>)
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f814 	bl	8007ff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fc8:	2204      	movs	r2, #4
 8007fca:	4908      	ldr	r1, [pc, #32]	@ (8007fec <Get_SerialNum+0x54>)
 8007fcc:	68b8      	ldr	r0, [r7, #8]
 8007fce:	f000 f80f 	bl	8007ff0 <IntToUnicode>
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	1fff7a10 	.word	0x1fff7a10
 8007fe0:	1fff7a14 	.word	0x1fff7a14
 8007fe4:	1fff7a18 	.word	0x1fff7a18
 8007fe8:	200000e6 	.word	0x200000e6
 8007fec:	200000f6 	.word	0x200000f6

08007ff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]
 8008006:	e027      	b.n	8008058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	2b09      	cmp	r3, #9
 800800e:	d80b      	bhi.n	8008028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	0f1b      	lsrs	r3, r3, #28
 8008014:	b2da      	uxtb	r2, r3
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	4619      	mov	r1, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	440b      	add	r3, r1
 8008020:	3230      	adds	r2, #48	@ 0x30
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e00a      	b.n	800803e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	0f1b      	lsrs	r3, r3, #28
 800802c:	b2da      	uxtb	r2, r3
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4619      	mov	r1, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	440b      	add	r3, r1
 8008038:	3237      	adds	r2, #55	@ 0x37
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	3301      	adds	r3, #1
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	3301      	adds	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]
 8008058:	7dfa      	ldrb	r2, [r7, #23]
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	429a      	cmp	r2, r3
 800805e:	d3d3      	bcc.n	8008008 <IntToUnicode+0x18>
  }
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08a      	sub	sp, #40	@ 0x28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008078:	f107 0314 	add.w	r3, r7, #20
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008090:	d13a      	bne.n	8008108 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	4b1e      	ldr	r3, [pc, #120]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809a:	4a1d      	ldr	r2, [pc, #116]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 800809c:	f043 0301 	orr.w	r3, r3, #1
 80080a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80080a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b4:	2302      	movs	r3, #2
 80080b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080bc:	2303      	movs	r3, #3
 80080be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080c0:	230a      	movs	r3, #10
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	4619      	mov	r1, r3
 80080ca:	4812      	ldr	r0, [pc, #72]	@ (8008114 <HAL_PCD_MspInit+0xa4>)
 80080cc:	f7f8 fe9e 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080da:	6353      	str	r3, [r2, #52]	@ 0x34
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80080ec:	4b08      	ldr	r3, [pc, #32]	@ (8008110 <HAL_PCD_MspInit+0xa0>)
 80080ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80080f8:	2200      	movs	r2, #0
 80080fa:	2105      	movs	r1, #5
 80080fc:	2043      	movs	r0, #67	@ 0x43
 80080fe:	f7f8 fe5b 	bl	8000db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008102:	2043      	movs	r0, #67	@ 0x43
 8008104:	f7f8 fe74 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008108:	bf00      	nop
 800810a:	3728      	adds	r7, #40	@ 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40023800 	.word	0x40023800
 8008114:	40020000 	.word	0x40020000

08008118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fd fa11 	bl	8005556 <USBD_LL_SetupStage>
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	4619      	mov	r1, r3
 8008166:	f7fd fa4b 	bl	8005600 <USBD_LL_DataOutStage>
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	3320      	adds	r3, #32
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	4619      	mov	r1, r3
 800819a:	f7fd fae4 	bl	8005766 <USBD_LL_DataInStage>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fd fc1e 	bl	80059f6 <USBD_LL_SOF>
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	79db      	ldrb	r3, [r3, #7]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d001      	beq.n	80081da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081d6:	f7f8 fb2f 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081e0:	7bfa      	ldrb	r2, [r7, #15]
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd fbc2 	bl	800596e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fd fb6a 	bl	80058ca <USBD_LL_Reset>
}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fbbd 	bl	800598e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7adb      	ldrb	r3, [r3, #11]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008234:	4b04      	ldr	r3, [pc, #16]	@ (8008248 <HAL_PCD_SuspendCallback+0x48>)
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	4a03      	ldr	r2, [pc, #12]	@ (8008248 <HAL_PCD_SuspendCallback+0x48>)
 800823a:	f043 0306 	orr.w	r3, r3, #6
 800823e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed00 	.word	0xe000ed00

0800824c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800825a:	4618      	mov	r0, r3
 800825c:	f7fd fbb3 	bl	80059c6 <USBD_LL_Resume>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fd fc0b 	bl	8005a9a <USBD_LL_IsoOUTIncomplete>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fbc7 	bl	8005a36 <USBD_LL_IsoINIncomplete>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fd fc1d 	bl	8005afe <USBD_LL_DevConnected>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fd fc1a 	bl	8005b14 <USBD_LL_DevDisconnected>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d13c      	bne.n	8008372 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082f8:	4a20      	ldr	r2, [pc, #128]	@ (800837c <USBD_LL_Init+0x94>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1e      	ldr	r2, [pc, #120]	@ (800837c <USBD_LL_Init+0x94>)
 8008304:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008308:	4b1c      	ldr	r3, [pc, #112]	@ (800837c <USBD_LL_Init+0x94>)
 800830a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800830e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008310:	4b1a      	ldr	r3, [pc, #104]	@ (800837c <USBD_LL_Init+0x94>)
 8008312:	2204      	movs	r2, #4
 8008314:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008316:	4b19      	ldr	r3, [pc, #100]	@ (800837c <USBD_LL_Init+0x94>)
 8008318:	2202      	movs	r2, #2
 800831a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800831c:	4b17      	ldr	r3, [pc, #92]	@ (800837c <USBD_LL_Init+0x94>)
 800831e:	2200      	movs	r2, #0
 8008320:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008322:	4b16      	ldr	r3, [pc, #88]	@ (800837c <USBD_LL_Init+0x94>)
 8008324:	2202      	movs	r2, #2
 8008326:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008328:	4b14      	ldr	r3, [pc, #80]	@ (800837c <USBD_LL_Init+0x94>)
 800832a:	2200      	movs	r2, #0
 800832c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800832e:	4b13      	ldr	r3, [pc, #76]	@ (800837c <USBD_LL_Init+0x94>)
 8008330:	2200      	movs	r2, #0
 8008332:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008334:	4b11      	ldr	r3, [pc, #68]	@ (800837c <USBD_LL_Init+0x94>)
 8008336:	2200      	movs	r2, #0
 8008338:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800833a:	4b10      	ldr	r3, [pc, #64]	@ (800837c <USBD_LL_Init+0x94>)
 800833c:	2200      	movs	r2, #0
 800833e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008340:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <USBD_LL_Init+0x94>)
 8008342:	2200      	movs	r2, #0
 8008344:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008346:	480d      	ldr	r0, [pc, #52]	@ (800837c <USBD_LL_Init+0x94>)
 8008348:	f7f8 fefd 	bl	8001146 <HAL_PCD_Init>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008352:	f7f8 fa71 	bl	8000838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008356:	2180      	movs	r1, #128	@ 0x80
 8008358:	4808      	ldr	r0, [pc, #32]	@ (800837c <USBD_LL_Init+0x94>)
 800835a:	f7fa f92a 	bl	80025b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800835e:	2240      	movs	r2, #64	@ 0x40
 8008360:	2100      	movs	r1, #0
 8008362:	4806      	ldr	r0, [pc, #24]	@ (800837c <USBD_LL_Init+0x94>)
 8008364:	f7fa f8de 	bl	8002524 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008368:	2280      	movs	r2, #128	@ 0x80
 800836a:	2101      	movs	r1, #1
 800836c:	4803      	ldr	r0, [pc, #12]	@ (800837c <USBD_LL_Init+0x94>)
 800836e:	f7fa f8d9 	bl	8002524 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	200056a4 	.word	0x200056a4

08008380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 ffe4 	bl	8001364 <HAL_PCD_Start>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f942 	bl	800862c <USBD_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	4608      	mov	r0, r1
 80083c0:	4611      	mov	r1, r2
 80083c2:	461a      	mov	r2, r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	70fb      	strb	r3, [r7, #3]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70bb      	strb	r3, [r7, #2]
 80083cc:	4613      	mov	r3, r2
 80083ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083de:	78bb      	ldrb	r3, [r7, #2]
 80083e0:	883a      	ldrh	r2, [r7, #0]
 80083e2:	78f9      	ldrb	r1, [r7, #3]
 80083e4:	f7f9 fcb8 	bl	8001d58 <HAL_PCD_EP_Open>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f91c 	bl	800862c <USBD_Get_USB_Status>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f7f9 fd03 	bl	8001e2c <HAL_PCD_EP_Close>
 8008426:	4603      	mov	r3, r0
 8008428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f8fd 	bl	800862c <USBD_Get_USB_Status>
 8008432:	4603      	mov	r3, r0
 8008434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008436:	7bbb      	ldrb	r3, [r7, #14]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800845a:	78fa      	ldrb	r2, [r7, #3]
 800845c:	4611      	mov	r1, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f7f9 fdbb 	bl	8001fda <HAL_PCD_EP_SetStall>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 f8de 	bl	800862c <USBD_Get_USB_Status>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008474:	7bbb      	ldrb	r3, [r7, #14]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7f9 fdff 	bl	80020a0 <HAL_PCD_EP_ClrStall>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f8bf 	bl	800862c <USBD_Get_USB_Status>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da0b      	bge.n	80084f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	3316      	adds	r3, #22
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	e00b      	b.n	8008508 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	4613      	mov	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008506:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 fbec 	bl	8001d10 <HAL_PCD_SetAddress>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f874 	bl	800862c <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	460b      	mov	r3, r1
 8008560:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008570:	7af9      	ldrb	r1, [r7, #11]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	f7f9 fcf6 	bl	8001f66 <HAL_PCD_EP_Transmit>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f853 	bl	800862c <USBD_Get_USB_Status>
 8008586:	4603      	mov	r3, r0
 8008588:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800858a:	7dbb      	ldrb	r3, [r7, #22]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	460b      	mov	r3, r1
 80085a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085b2:	7af9      	ldrb	r1, [r7, #11]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	f7f9 fc82 	bl	8001ec0 <HAL_PCD_EP_Receive>
 80085bc:	4603      	mov	r3, r0
 80085be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f832 	bl	800862c <USBD_Get_USB_Status>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4611      	mov	r1, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f9 fca2 	bl	8001f36 <HAL_PCD_EP_GetRxCount>
 80085f2:	4603      	mov	r3, r0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008604:	4b03      	ldr	r3, [pc, #12]	@ (8008614 <USBD_static_malloc+0x18>)
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20005b88 	.word	0x20005b88

08008618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d817      	bhi.n	8008670 <USBD_Get_USB_Status+0x44>
 8008640:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USBD_Get_USB_Status+0x1c>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	08008659 	.word	0x08008659
 800864c:	0800865f 	.word	0x0800865f
 8008650:	08008665 	.word	0x08008665
 8008654:	0800866b 	.word	0x0800866b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
    break;
 800865c:	e00b      	b.n	8008676 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	73fb      	strb	r3, [r7, #15]
    break;
 8008662:	e008      	b.n	8008676 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
    break;
 8008668:	e005      	b.n	8008676 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	73fb      	strb	r3, [r7, #15]
    break;
 800866e:	e002      	b.n	8008676 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008670:	2303      	movs	r3, #3
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	bf00      	nop
  }
  return usb_status;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <std>:
 8008684:	2300      	movs	r3, #0
 8008686:	b510      	push	{r4, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	e9c0 3300 	strd	r3, r3, [r0]
 800868e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008692:	6083      	str	r3, [r0, #8]
 8008694:	8181      	strh	r1, [r0, #12]
 8008696:	6643      	str	r3, [r0, #100]	@ 0x64
 8008698:	81c2      	strh	r2, [r0, #14]
 800869a:	6183      	str	r3, [r0, #24]
 800869c:	4619      	mov	r1, r3
 800869e:	2208      	movs	r2, #8
 80086a0:	305c      	adds	r0, #92	@ 0x5c
 80086a2:	f000 f8c3 	bl	800882c <memset>
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <std+0x58>)
 80086a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086aa:	4b0d      	ldr	r3, [pc, #52]	@ (80086e0 <std+0x5c>)
 80086ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ae:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <std+0x60>)
 80086b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <std+0x64>)
 80086b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <std+0x68>)
 80086b8:	6224      	str	r4, [r4, #32]
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d006      	beq.n	80086cc <std+0x48>
 80086be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086c2:	4294      	cmp	r4, r2
 80086c4:	d002      	beq.n	80086cc <std+0x48>
 80086c6:	33d0      	adds	r3, #208	@ 0xd0
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d105      	bne.n	80086d8 <std+0x54>
 80086cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d4:	f000 b932 	b.w	800893c <__retarget_lock_init_recursive>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	bf00      	nop
 80086dc:	0800922d 	.word	0x0800922d
 80086e0:	0800924f 	.word	0x0800924f
 80086e4:	08009287 	.word	0x08009287
 80086e8:	080092ab 	.word	0x080092ab
 80086ec:	20005da8 	.word	0x20005da8

080086f0 <stdio_exit_handler>:
 80086f0:	4a02      	ldr	r2, [pc, #8]	@ (80086fc <stdio_exit_handler+0xc>)
 80086f2:	4903      	ldr	r1, [pc, #12]	@ (8008700 <stdio_exit_handler+0x10>)
 80086f4:	4803      	ldr	r0, [pc, #12]	@ (8008704 <stdio_exit_handler+0x14>)
 80086f6:	f000 b869 	b.w	80087cc <_fwalk_sglue>
 80086fa:	bf00      	nop
 80086fc:	20000100 	.word	0x20000100
 8008700:	080091c5 	.word	0x080091c5
 8008704:	20000110 	.word	0x20000110

08008708 <cleanup_stdio>:
 8008708:	6841      	ldr	r1, [r0, #4]
 800870a:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <cleanup_stdio+0x34>)
 800870c:	4299      	cmp	r1, r3
 800870e:	b510      	push	{r4, lr}
 8008710:	4604      	mov	r4, r0
 8008712:	d001      	beq.n	8008718 <cleanup_stdio+0x10>
 8008714:	f000 fd56 	bl	80091c4 <_fflush_r>
 8008718:	68a1      	ldr	r1, [r4, #8]
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <cleanup_stdio+0x38>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <cleanup_stdio+0x1e>
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fd4f 	bl	80091c4 <_fflush_r>
 8008726:	68e1      	ldr	r1, [r4, #12]
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <cleanup_stdio+0x3c>)
 800872a:	4299      	cmp	r1, r3
 800872c:	d004      	beq.n	8008738 <cleanup_stdio+0x30>
 800872e:	4620      	mov	r0, r4
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f000 bd46 	b.w	80091c4 <_fflush_r>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	bf00      	nop
 800873c:	20005da8 	.word	0x20005da8
 8008740:	20005e10 	.word	0x20005e10
 8008744:	20005e78 	.word	0x20005e78

08008748 <global_stdio_init.part.0>:
 8008748:	b510      	push	{r4, lr}
 800874a:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <global_stdio_init.part.0+0x30>)
 800874c:	4c0b      	ldr	r4, [pc, #44]	@ (800877c <global_stdio_init.part.0+0x34>)
 800874e:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <global_stdio_init.part.0+0x38>)
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	4620      	mov	r0, r4
 8008754:	2200      	movs	r2, #0
 8008756:	2104      	movs	r1, #4
 8008758:	f7ff ff94 	bl	8008684 <std>
 800875c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008760:	2201      	movs	r2, #1
 8008762:	2109      	movs	r1, #9
 8008764:	f7ff ff8e 	bl	8008684 <std>
 8008768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800876c:	2202      	movs	r2, #2
 800876e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008772:	2112      	movs	r1, #18
 8008774:	f7ff bf86 	b.w	8008684 <std>
 8008778:	20005ee0 	.word	0x20005ee0
 800877c:	20005da8 	.word	0x20005da8
 8008780:	080086f1 	.word	0x080086f1

08008784 <__sfp_lock_acquire>:
 8008784:	4801      	ldr	r0, [pc, #4]	@ (800878c <__sfp_lock_acquire+0x8>)
 8008786:	f000 b8da 	b.w	800893e <__retarget_lock_acquire_recursive>
 800878a:	bf00      	nop
 800878c:	20005ee9 	.word	0x20005ee9

08008790 <__sfp_lock_release>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__sfp_lock_release+0x8>)
 8008792:	f000 b8d5 	b.w	8008940 <__retarget_lock_release_recursive>
 8008796:	bf00      	nop
 8008798:	20005ee9 	.word	0x20005ee9

0800879c <__sinit>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4604      	mov	r4, r0
 80087a0:	f7ff fff0 	bl	8008784 <__sfp_lock_acquire>
 80087a4:	6a23      	ldr	r3, [r4, #32]
 80087a6:	b11b      	cbz	r3, 80087b0 <__sinit+0x14>
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ac:	f7ff bff0 	b.w	8008790 <__sfp_lock_release>
 80087b0:	4b04      	ldr	r3, [pc, #16]	@ (80087c4 <__sinit+0x28>)
 80087b2:	6223      	str	r3, [r4, #32]
 80087b4:	4b04      	ldr	r3, [pc, #16]	@ (80087c8 <__sinit+0x2c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f5      	bne.n	80087a8 <__sinit+0xc>
 80087bc:	f7ff ffc4 	bl	8008748 <global_stdio_init.part.0>
 80087c0:	e7f2      	b.n	80087a8 <__sinit+0xc>
 80087c2:	bf00      	nop
 80087c4:	08008709 	.word	0x08008709
 80087c8:	20005ee0 	.word	0x20005ee0

080087cc <_fwalk_sglue>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4607      	mov	r7, r0
 80087d2:	4688      	mov	r8, r1
 80087d4:	4614      	mov	r4, r2
 80087d6:	2600      	movs	r6, #0
 80087d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087dc:	f1b9 0901 	subs.w	r9, r9, #1
 80087e0:	d505      	bpl.n	80087ee <_fwalk_sglue+0x22>
 80087e2:	6824      	ldr	r4, [r4, #0]
 80087e4:	2c00      	cmp	r4, #0
 80087e6:	d1f7      	bne.n	80087d8 <_fwalk_sglue+0xc>
 80087e8:	4630      	mov	r0, r6
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d907      	bls.n	8008804 <_fwalk_sglue+0x38>
 80087f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087f8:	3301      	adds	r3, #1
 80087fa:	d003      	beq.n	8008804 <_fwalk_sglue+0x38>
 80087fc:	4629      	mov	r1, r5
 80087fe:	4638      	mov	r0, r7
 8008800:	47c0      	blx	r8
 8008802:	4306      	orrs	r6, r0
 8008804:	3568      	adds	r5, #104	@ 0x68
 8008806:	e7e9      	b.n	80087dc <_fwalk_sglue+0x10>

08008808 <iprintf>:
 8008808:	b40f      	push	{r0, r1, r2, r3}
 800880a:	b507      	push	{r0, r1, r2, lr}
 800880c:	4906      	ldr	r1, [pc, #24]	@ (8008828 <iprintf+0x20>)
 800880e:	ab04      	add	r3, sp, #16
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	6881      	ldr	r1, [r0, #8]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f000 f907 	bl	8008a2c <_vfiprintf_r>
 800881e:	b003      	add	sp, #12
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b004      	add	sp, #16
 8008826:	4770      	bx	lr
 8008828:	2000010c 	.word	0x2000010c

0800882c <memset>:
 800882c:	4402      	add	r2, r0
 800882e:	4603      	mov	r3, r0
 8008830:	4293      	cmp	r3, r2
 8008832:	d100      	bne.n	8008836 <memset+0xa>
 8008834:	4770      	bx	lr
 8008836:	f803 1b01 	strb.w	r1, [r3], #1
 800883a:	e7f9      	b.n	8008830 <memset+0x4>

0800883c <_reclaim_reent>:
 800883c:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <_reclaim_reent+0xa8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4283      	cmp	r3, r0
 8008842:	b570      	push	{r4, r5, r6, lr}
 8008844:	4604      	mov	r4, r0
 8008846:	d04b      	beq.n	80088e0 <_reclaim_reent+0xa4>
 8008848:	69c3      	ldr	r3, [r0, #28]
 800884a:	b1ab      	cbz	r3, 8008878 <_reclaim_reent+0x3c>
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	b16b      	cbz	r3, 800886c <_reclaim_reent+0x30>
 8008850:	2500      	movs	r5, #0
 8008852:	69e3      	ldr	r3, [r4, #28]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	5959      	ldr	r1, [r3, r5]
 8008858:	2900      	cmp	r1, #0
 800885a:	d13b      	bne.n	80088d4 <_reclaim_reent+0x98>
 800885c:	3504      	adds	r5, #4
 800885e:	2d80      	cmp	r5, #128	@ 0x80
 8008860:	d1f7      	bne.n	8008852 <_reclaim_reent+0x16>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	4620      	mov	r0, r4
 8008866:	68d9      	ldr	r1, [r3, #12]
 8008868:	f000 f86c 	bl	8008944 <_free_r>
 800886c:	69e3      	ldr	r3, [r4, #28]
 800886e:	6819      	ldr	r1, [r3, #0]
 8008870:	b111      	cbz	r1, 8008878 <_reclaim_reent+0x3c>
 8008872:	4620      	mov	r0, r4
 8008874:	f000 f866 	bl	8008944 <_free_r>
 8008878:	6961      	ldr	r1, [r4, #20]
 800887a:	b111      	cbz	r1, 8008882 <_reclaim_reent+0x46>
 800887c:	4620      	mov	r0, r4
 800887e:	f000 f861 	bl	8008944 <_free_r>
 8008882:	69e1      	ldr	r1, [r4, #28]
 8008884:	b111      	cbz	r1, 800888c <_reclaim_reent+0x50>
 8008886:	4620      	mov	r0, r4
 8008888:	f000 f85c 	bl	8008944 <_free_r>
 800888c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800888e:	b111      	cbz	r1, 8008896 <_reclaim_reent+0x5a>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f857 	bl	8008944 <_free_r>
 8008896:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008898:	b111      	cbz	r1, 80088a0 <_reclaim_reent+0x64>
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f852 	bl	8008944 <_free_r>
 80088a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088a2:	b111      	cbz	r1, 80088aa <_reclaim_reent+0x6e>
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 f84d 	bl	8008944 <_free_r>
 80088aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088ac:	b111      	cbz	r1, 80088b4 <_reclaim_reent+0x78>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f848 	bl	8008944 <_free_r>
 80088b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088b6:	b111      	cbz	r1, 80088be <_reclaim_reent+0x82>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f843 	bl	8008944 <_free_r>
 80088be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x8c>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f83e 	bl	8008944 <_free_r>
 80088c8:	6a23      	ldr	r3, [r4, #32]
 80088ca:	b14b      	cbz	r3, 80088e0 <_reclaim_reent+0xa4>
 80088cc:	4620      	mov	r0, r4
 80088ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088d2:	4718      	bx	r3
 80088d4:	680e      	ldr	r6, [r1, #0]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f834 	bl	8008944 <_free_r>
 80088dc:	4631      	mov	r1, r6
 80088de:	e7bb      	b.n	8008858 <_reclaim_reent+0x1c>
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	bf00      	nop
 80088e4:	2000010c 	.word	0x2000010c

080088e8 <__errno>:
 80088e8:	4b01      	ldr	r3, [pc, #4]	@ (80088f0 <__errno+0x8>)
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	2000010c 	.word	0x2000010c

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4d0d      	ldr	r5, [pc, #52]	@ (800892c <__libc_init_array+0x38>)
 80088f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008930 <__libc_init_array+0x3c>)
 80088fa:	1b64      	subs	r4, r4, r5
 80088fc:	10a4      	asrs	r4, r4, #2
 80088fe:	2600      	movs	r6, #0
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	4d0b      	ldr	r5, [pc, #44]	@ (8008934 <__libc_init_array+0x40>)
 8008906:	4c0c      	ldr	r4, [pc, #48]	@ (8008938 <__libc_init_array+0x44>)
 8008908:	f000 fe42 	bl	8009590 <_init>
 800890c:	1b64      	subs	r4, r4, r5
 800890e:	10a4      	asrs	r4, r4, #2
 8008910:	2600      	movs	r6, #0
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	f855 3b04 	ldr.w	r3, [r5], #4
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	f855 3b04 	ldr.w	r3, [r5], #4
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	08009684 	.word	0x08009684
 8008930:	08009684 	.word	0x08009684
 8008934:	08009684 	.word	0x08009684
 8008938:	08009688 	.word	0x08009688

0800893c <__retarget_lock_init_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_acquire_recursive>:
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_release_recursive>:
 8008940:	4770      	bx	lr
	...

08008944 <_free_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4605      	mov	r5, r0
 8008948:	2900      	cmp	r1, #0
 800894a:	d041      	beq.n	80089d0 <_free_r+0x8c>
 800894c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008950:	1f0c      	subs	r4, r1, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfb8      	it	lt
 8008956:	18e4      	addlt	r4, r4, r3
 8008958:	f000 fc5c 	bl	8009214 <__malloc_lock>
 800895c:	4a1d      	ldr	r2, [pc, #116]	@ (80089d4 <_free_r+0x90>)
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	b933      	cbnz	r3, 8008970 <_free_r+0x2c>
 8008962:	6063      	str	r3, [r4, #4]
 8008964:	6014      	str	r4, [r2, #0]
 8008966:	4628      	mov	r0, r5
 8008968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800896c:	f000 bc58 	b.w	8009220 <__malloc_unlock>
 8008970:	42a3      	cmp	r3, r4
 8008972:	d908      	bls.n	8008986 <_free_r+0x42>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	1821      	adds	r1, r4, r0
 8008978:	428b      	cmp	r3, r1
 800897a:	bf01      	itttt	eq
 800897c:	6819      	ldreq	r1, [r3, #0]
 800897e:	685b      	ldreq	r3, [r3, #4]
 8008980:	1809      	addeq	r1, r1, r0
 8008982:	6021      	streq	r1, [r4, #0]
 8008984:	e7ed      	b.n	8008962 <_free_r+0x1e>
 8008986:	461a      	mov	r2, r3
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b10b      	cbz	r3, 8008990 <_free_r+0x4c>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d9fa      	bls.n	8008986 <_free_r+0x42>
 8008990:	6811      	ldr	r1, [r2, #0]
 8008992:	1850      	adds	r0, r2, r1
 8008994:	42a0      	cmp	r0, r4
 8008996:	d10b      	bne.n	80089b0 <_free_r+0x6c>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	4401      	add	r1, r0
 800899c:	1850      	adds	r0, r2, r1
 800899e:	4283      	cmp	r3, r0
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	d1e0      	bne.n	8008966 <_free_r+0x22>
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	6053      	str	r3, [r2, #4]
 80089aa:	4408      	add	r0, r1
 80089ac:	6010      	str	r0, [r2, #0]
 80089ae:	e7da      	b.n	8008966 <_free_r+0x22>
 80089b0:	d902      	bls.n	80089b8 <_free_r+0x74>
 80089b2:	230c      	movs	r3, #12
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	e7d6      	b.n	8008966 <_free_r+0x22>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	1821      	adds	r1, r4, r0
 80089bc:	428b      	cmp	r3, r1
 80089be:	bf04      	itt	eq
 80089c0:	6819      	ldreq	r1, [r3, #0]
 80089c2:	685b      	ldreq	r3, [r3, #4]
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	bf04      	itt	eq
 80089c8:	1809      	addeq	r1, r1, r0
 80089ca:	6021      	streq	r1, [r4, #0]
 80089cc:	6054      	str	r4, [r2, #4]
 80089ce:	e7ca      	b.n	8008966 <_free_r+0x22>
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	20005ef0 	.word	0x20005ef0

080089d8 <__sfputc_r>:
 80089d8:	6893      	ldr	r3, [r2, #8]
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	b410      	push	{r4}
 80089e0:	6093      	str	r3, [r2, #8]
 80089e2:	da08      	bge.n	80089f6 <__sfputc_r+0x1e>
 80089e4:	6994      	ldr	r4, [r2, #24]
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	db01      	blt.n	80089ee <__sfputc_r+0x16>
 80089ea:	290a      	cmp	r1, #10
 80089ec:	d103      	bne.n	80089f6 <__sfputc_r+0x1e>
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	f000 bc5e 	b.w	80092b2 <__swbuf_r>
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	1c58      	adds	r0, r3, #1
 80089fa:	6010      	str	r0, [r2, #0]
 80089fc:	7019      	strb	r1, [r3, #0]
 80089fe:	4608      	mov	r0, r1
 8008a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <__sfputs_r>:
 8008a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	18d5      	adds	r5, r2, r3
 8008a10:	42ac      	cmp	r4, r5
 8008a12:	d101      	bne.n	8008a18 <__sfputs_r+0x12>
 8008a14:	2000      	movs	r0, #0
 8008a16:	e007      	b.n	8008a28 <__sfputs_r+0x22>
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ffda 	bl	80089d8 <__sfputc_r>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d1f3      	bne.n	8008a10 <__sfputs_r+0xa>
 8008a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a2c <_vfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	460d      	mov	r5, r1
 8008a32:	b09d      	sub	sp, #116	@ 0x74
 8008a34:	4614      	mov	r4, r2
 8008a36:	4698      	mov	r8, r3
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_vfiprintf_r+0x18>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x18>
 8008a40:	f7ff feac 	bl	800879c <__sinit>
 8008a44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a46:	07d9      	lsls	r1, r3, #31
 8008a48:	d405      	bmi.n	8008a56 <_vfiprintf_r+0x2a>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	059a      	lsls	r2, r3, #22
 8008a4e:	d402      	bmi.n	8008a56 <_vfiprintf_r+0x2a>
 8008a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a52:	f7ff ff74 	bl	800893e <__retarget_lock_acquire_recursive>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	071b      	lsls	r3, r3, #28
 8008a5a:	d501      	bpl.n	8008a60 <_vfiprintf_r+0x34>
 8008a5c:	692b      	ldr	r3, [r5, #16]
 8008a5e:	b99b      	cbnz	r3, 8008a88 <_vfiprintf_r+0x5c>
 8008a60:	4629      	mov	r1, r5
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 fc64 	bl	8009330 <__swsetup_r>
 8008a68:	b170      	cbz	r0, 8008a88 <_vfiprintf_r+0x5c>
 8008a6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a6c:	07dc      	lsls	r4, r3, #31
 8008a6e:	d504      	bpl.n	8008a7a <_vfiprintf_r+0x4e>
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a74:	b01d      	add	sp, #116	@ 0x74
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	0598      	lsls	r0, r3, #22
 8008a7e:	d4f7      	bmi.n	8008a70 <_vfiprintf_r+0x44>
 8008a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a82:	f7ff ff5d 	bl	8008940 <__retarget_lock_release_recursive>
 8008a86:	e7f3      	b.n	8008a70 <_vfiprintf_r+0x44>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a96:	2330      	movs	r3, #48	@ 0x30
 8008a98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c48 <_vfiprintf_r+0x21c>
 8008a9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aa0:	f04f 0901 	mov.w	r9, #1
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	469a      	mov	sl, r3
 8008aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_vfiprintf_r+0x86>
 8008aae:	2a25      	cmp	r2, #37	@ 0x25
 8008ab0:	d1f9      	bne.n	8008aa6 <_vfiprintf_r+0x7a>
 8008ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab6:	d00b      	beq.n	8008ad0 <_vfiprintf_r+0xa4>
 8008ab8:	465b      	mov	r3, fp
 8008aba:	4622      	mov	r2, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff ffa1 	bl	8008a06 <__sfputs_r>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f000 80a7 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008acc:	445a      	add	r2, fp
 8008ace:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 809f 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae4:	f10a 0a01 	add.w	sl, sl, #1
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	9307      	str	r3, [sp, #28]
 8008aec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008af0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af2:	4654      	mov	r4, sl
 8008af4:	2205      	movs	r2, #5
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	4853      	ldr	r0, [pc, #332]	@ (8008c48 <_vfiprintf_r+0x21c>)
 8008afc:	f7f7 fb70 	bl	80001e0 <memchr>
 8008b00:	9a04      	ldr	r2, [sp, #16]
 8008b02:	b9d8      	cbnz	r0, 8008b3c <_vfiprintf_r+0x110>
 8008b04:	06d1      	lsls	r1, r2, #27
 8008b06:	bf44      	itt	mi
 8008b08:	2320      	movmi	r3, #32
 8008b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b0e:	0713      	lsls	r3, r2, #28
 8008b10:	bf44      	itt	mi
 8008b12:	232b      	movmi	r3, #43	@ 0x2b
 8008b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b18:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b1e:	d015      	beq.n	8008b4c <_vfiprintf_r+0x120>
 8008b20:	9a07      	ldr	r2, [sp, #28]
 8008b22:	4654      	mov	r4, sl
 8008b24:	2000      	movs	r0, #0
 8008b26:	f04f 0c0a 	mov.w	ip, #10
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b30:	3b30      	subs	r3, #48	@ 0x30
 8008b32:	2b09      	cmp	r3, #9
 8008b34:	d94b      	bls.n	8008bce <_vfiprintf_r+0x1a2>
 8008b36:	b1b0      	cbz	r0, 8008b66 <_vfiprintf_r+0x13a>
 8008b38:	9207      	str	r2, [sp, #28]
 8008b3a:	e014      	b.n	8008b66 <_vfiprintf_r+0x13a>
 8008b3c:	eba0 0308 	sub.w	r3, r0, r8
 8008b40:	fa09 f303 	lsl.w	r3, r9, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	46a2      	mov	sl, r4
 8008b4a:	e7d2      	b.n	8008af2 <_vfiprintf_r+0xc6>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1d19      	adds	r1, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	9103      	str	r1, [sp, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfbb      	ittet	lt
 8008b58:	425b      	neglt	r3, r3
 8008b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b5e:	9307      	strge	r3, [sp, #28]
 8008b60:	9307      	strlt	r3, [sp, #28]
 8008b62:	bfb8      	it	lt
 8008b64:	9204      	strlt	r2, [sp, #16]
 8008b66:	7823      	ldrb	r3, [r4, #0]
 8008b68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b6a:	d10a      	bne.n	8008b82 <_vfiprintf_r+0x156>
 8008b6c:	7863      	ldrb	r3, [r4, #1]
 8008b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b70:	d132      	bne.n	8008bd8 <_vfiprintf_r+0x1ac>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	1d1a      	adds	r2, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9203      	str	r2, [sp, #12]
 8008b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b7e:	3402      	adds	r4, #2
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c58 <_vfiprintf_r+0x22c>
 8008b86:	7821      	ldrb	r1, [r4, #0]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f7f7 fb28 	bl	80001e0 <memchr>
 8008b90:	b138      	cbz	r0, 8008ba2 <_vfiprintf_r+0x176>
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	eba0 000a 	sub.w	r0, r0, sl
 8008b98:	2240      	movs	r2, #64	@ 0x40
 8008b9a:	4082      	lsls	r2, r0
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	3401      	adds	r4, #1
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba6:	4829      	ldr	r0, [pc, #164]	@ (8008c4c <_vfiprintf_r+0x220>)
 8008ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bac:	2206      	movs	r2, #6
 8008bae:	f7f7 fb17 	bl	80001e0 <memchr>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d03f      	beq.n	8008c36 <_vfiprintf_r+0x20a>
 8008bb6:	4b26      	ldr	r3, [pc, #152]	@ (8008c50 <_vfiprintf_r+0x224>)
 8008bb8:	bb1b      	cbnz	r3, 8008c02 <_vfiprintf_r+0x1d6>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	443b      	add	r3, r7
 8008bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bcc:	e76a      	b.n	8008aa4 <_vfiprintf_r+0x78>
 8008bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	e7a8      	b.n	8008b2a <_vfiprintf_r+0xfe>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	3401      	adds	r4, #1
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bea:	3a30      	subs	r2, #48	@ 0x30
 8008bec:	2a09      	cmp	r2, #9
 8008bee:	d903      	bls.n	8008bf8 <_vfiprintf_r+0x1cc>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0c6      	beq.n	8008b82 <_vfiprintf_r+0x156>
 8008bf4:	9105      	str	r1, [sp, #20]
 8008bf6:	e7c4      	b.n	8008b82 <_vfiprintf_r+0x156>
 8008bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7f0      	b.n	8008be4 <_vfiprintf_r+0x1b8>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4b12      	ldr	r3, [pc, #72]	@ (8008c54 <_vfiprintf_r+0x228>)
 8008c0a:	a904      	add	r1, sp, #16
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f3af 8000 	nop.w
 8008c12:	4607      	mov	r7, r0
 8008c14:	1c78      	adds	r0, r7, #1
 8008c16:	d1d6      	bne.n	8008bc6 <_vfiprintf_r+0x19a>
 8008c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_vfiprintf_r+0x1fe>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	059a      	lsls	r2, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_vfiprintf_r+0x1fe>
 8008c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c26:	f7ff fe8b 	bl	8008940 <__retarget_lock_release_recursive>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	065b      	lsls	r3, r3, #25
 8008c2e:	f53f af1f 	bmi.w	8008a70 <_vfiprintf_r+0x44>
 8008c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c34:	e71e      	b.n	8008a74 <_vfiprintf_r+0x48>
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <_vfiprintf_r+0x228>)
 8008c3e:	a904      	add	r1, sp, #16
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 f91b 	bl	8008e7c <_printf_i>
 8008c46:	e7e4      	b.n	8008c12 <_vfiprintf_r+0x1e6>
 8008c48:	08009648 	.word	0x08009648
 8008c4c:	08009652 	.word	0x08009652
 8008c50:	00000000 	.word	0x00000000
 8008c54:	08008a07 	.word	0x08008a07
 8008c58:	0800964e 	.word	0x0800964e

08008c5c <sbrk_aligned>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c9c <sbrk_aligned+0x40>)
 8008c60:	460c      	mov	r4, r1
 8008c62:	6831      	ldr	r1, [r6, #0]
 8008c64:	4605      	mov	r5, r0
 8008c66:	b911      	cbnz	r1, 8008c6e <sbrk_aligned+0x12>
 8008c68:	f000 fc70 	bl	800954c <_sbrk_r>
 8008c6c:	6030      	str	r0, [r6, #0]
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 fc6b 	bl	800954c <_sbrk_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d103      	bne.n	8008c82 <sbrk_aligned+0x26>
 8008c7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c7e:	4620      	mov	r0, r4
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	1cc4      	adds	r4, r0, #3
 8008c84:	f024 0403 	bic.w	r4, r4, #3
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d0f8      	beq.n	8008c7e <sbrk_aligned+0x22>
 8008c8c:	1a21      	subs	r1, r4, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 fc5c 	bl	800954c <_sbrk_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d1f2      	bne.n	8008c7e <sbrk_aligned+0x22>
 8008c98:	e7ef      	b.n	8008c7a <sbrk_aligned+0x1e>
 8008c9a:	bf00      	nop
 8008c9c:	20005eec 	.word	0x20005eec

08008ca0 <_malloc_r>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	1ccd      	adds	r5, r1, #3
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	db01      	blt.n	8008cbc <_malloc_r+0x1c>
 8008cb8:	42a9      	cmp	r1, r5
 8008cba:	d904      	bls.n	8008cc6 <_malloc_r+0x26>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d9c <_malloc_r+0xfc>
 8008cca:	f000 faa3 	bl	8009214 <__malloc_lock>
 8008cce:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd2:	461c      	mov	r4, r3
 8008cd4:	bb44      	cbnz	r4, 8008d28 <_malloc_r+0x88>
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ffbf 	bl	8008c5c <sbrk_aligned>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	d158      	bne.n	8008d96 <_malloc_r+0xf6>
 8008ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ce8:	4627      	mov	r7, r4
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	d143      	bne.n	8008d76 <_malloc_r+0xd6>
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	d04b      	beq.n	8008d8a <_malloc_r+0xea>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	eb04 0903 	add.w	r9, r4, r3
 8008cfc:	f000 fc26 	bl	800954c <_sbrk_r>
 8008d00:	4581      	cmp	r9, r0
 8008d02:	d142      	bne.n	8008d8a <_malloc_r+0xea>
 8008d04:	6821      	ldr	r1, [r4, #0]
 8008d06:	1a6d      	subs	r5, r5, r1
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7ff ffa6 	bl	8008c5c <sbrk_aligned>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d03a      	beq.n	8008d8a <_malloc_r+0xea>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	442b      	add	r3, r5
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	bb62      	cbnz	r2, 8008d7c <_malloc_r+0xdc>
 8008d22:	f8c8 7000 	str.w	r7, [r8]
 8008d26:	e00f      	b.n	8008d48 <_malloc_r+0xa8>
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	1b52      	subs	r2, r2, r5
 8008d2c:	d420      	bmi.n	8008d70 <_malloc_r+0xd0>
 8008d2e:	2a0b      	cmp	r2, #11
 8008d30:	d917      	bls.n	8008d62 <_malloc_r+0xc2>
 8008d32:	1961      	adds	r1, r4, r5
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	6025      	str	r5, [r4, #0]
 8008d38:	bf18      	it	ne
 8008d3a:	6059      	strne	r1, [r3, #4]
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	bf08      	it	eq
 8008d40:	f8c8 1000 	streq.w	r1, [r8]
 8008d44:	5162      	str	r2, [r4, r5]
 8008d46:	604b      	str	r3, [r1, #4]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 fa69 	bl	8009220 <__malloc_unlock>
 8008d4e:	f104 000b 	add.w	r0, r4, #11
 8008d52:	1d23      	adds	r3, r4, #4
 8008d54:	f020 0007 	bic.w	r0, r0, #7
 8008d58:	1ac2      	subs	r2, r0, r3
 8008d5a:	bf1c      	itt	ne
 8008d5c:	1a1b      	subne	r3, r3, r0
 8008d5e:	50a3      	strne	r3, [r4, r2]
 8008d60:	e7af      	b.n	8008cc2 <_malloc_r+0x22>
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	bf0c      	ite	eq
 8008d68:	f8c8 2000 	streq.w	r2, [r8]
 8008d6c:	605a      	strne	r2, [r3, #4]
 8008d6e:	e7eb      	b.n	8008d48 <_malloc_r+0xa8>
 8008d70:	4623      	mov	r3, r4
 8008d72:	6864      	ldr	r4, [r4, #4]
 8008d74:	e7ae      	b.n	8008cd4 <_malloc_r+0x34>
 8008d76:	463c      	mov	r4, r7
 8008d78:	687f      	ldr	r7, [r7, #4]
 8008d7a:	e7b6      	b.n	8008cea <_malloc_r+0x4a>
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d1fb      	bne.n	8008d7c <_malloc_r+0xdc>
 8008d84:	2300      	movs	r3, #0
 8008d86:	6053      	str	r3, [r2, #4]
 8008d88:	e7de      	b.n	8008d48 <_malloc_r+0xa8>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f000 fa46 	bl	8009220 <__malloc_unlock>
 8008d94:	e794      	b.n	8008cc0 <_malloc_r+0x20>
 8008d96:	6005      	str	r5, [r0, #0]
 8008d98:	e7d6      	b.n	8008d48 <_malloc_r+0xa8>
 8008d9a:	bf00      	nop
 8008d9c:	20005ef0 	.word	0x20005ef0

08008da0 <_printf_common>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	4616      	mov	r6, r2
 8008da6:	4698      	mov	r8, r3
 8008da8:	688a      	ldr	r2, [r1, #8]
 8008daa:	690b      	ldr	r3, [r1, #16]
 8008dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bfb8      	it	lt
 8008db4:	4613      	movlt	r3, r2
 8008db6:	6033      	str	r3, [r6, #0]
 8008db8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b10a      	cbz	r2, 8008dc6 <_printf_common+0x26>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6033      	str	r3, [r6, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	6833      	ldrmi	r3, [r6, #0]
 8008dce:	3302      	addmi	r3, #2
 8008dd0:	6033      	strmi	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	f015 0506 	ands.w	r5, r5, #6
 8008dd8:	d106      	bne.n	8008de8 <_printf_common+0x48>
 8008dda:	f104 0a19 	add.w	sl, r4, #25
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	6832      	ldr	r2, [r6, #0]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc26      	bgt.n	8008e36 <_printf_common+0x96>
 8008de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	3b00      	subs	r3, #0
 8008df0:	bf18      	it	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	0692      	lsls	r2, r2, #26
 8008df6:	d42b      	bmi.n	8008e50 <_printf_common+0xb0>
 8008df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dfc:	4641      	mov	r1, r8
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47c8      	blx	r9
 8008e02:	3001      	adds	r0, #1
 8008e04:	d01e      	beq.n	8008e44 <_printf_common+0xa4>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	f003 0306 	and.w	r3, r3, #6
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	bf02      	ittt	eq
 8008e12:	68e5      	ldreq	r5, [r4, #12]
 8008e14:	6833      	ldreq	r3, [r6, #0]
 8008e16:	1aed      	subeq	r5, r5, r3
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	bf0c      	ite	eq
 8008e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e20:	2500      	movne	r5, #0
 8008e22:	4293      	cmp	r3, r2
 8008e24:	bfc4      	itt	gt
 8008e26:	1a9b      	subgt	r3, r3, r2
 8008e28:	18ed      	addgt	r5, r5, r3
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	341a      	adds	r4, #26
 8008e2e:	42b5      	cmp	r5, r6
 8008e30:	d11a      	bne.n	8008e68 <_printf_common+0xc8>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e008      	b.n	8008e48 <_printf_common+0xa8>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4652      	mov	r2, sl
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	47c8      	blx	r9
 8008e40:	3001      	adds	r0, #1
 8008e42:	d103      	bne.n	8008e4c <_printf_common+0xac>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	e7c6      	b.n	8008dde <_printf_common+0x3e>
 8008e50:	18e1      	adds	r1, r4, r3
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	2030      	movs	r0, #48	@ 0x30
 8008e56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e5a:	4422      	add	r2, r4
 8008e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e64:	3302      	adds	r3, #2
 8008e66:	e7c7      	b.n	8008df8 <_printf_common+0x58>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	4638      	mov	r0, r7
 8008e70:	47c8      	blx	r9
 8008e72:	3001      	adds	r0, #1
 8008e74:	d0e6      	beq.n	8008e44 <_printf_common+0xa4>
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7d9      	b.n	8008e2e <_printf_common+0x8e>
	...

08008e7c <_printf_i>:
 8008e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	7e0f      	ldrb	r7, [r1, #24]
 8008e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e84:	2f78      	cmp	r7, #120	@ 0x78
 8008e86:	4691      	mov	r9, r2
 8008e88:	4680      	mov	r8, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	469a      	mov	sl, r3
 8008e8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e92:	d807      	bhi.n	8008ea4 <_printf_i+0x28>
 8008e94:	2f62      	cmp	r7, #98	@ 0x62
 8008e96:	d80a      	bhi.n	8008eae <_printf_i+0x32>
 8008e98:	2f00      	cmp	r7, #0
 8008e9a:	f000 80d2 	beq.w	8009042 <_printf_i+0x1c6>
 8008e9e:	2f58      	cmp	r7, #88	@ 0x58
 8008ea0:	f000 80b9 	beq.w	8009016 <_printf_i+0x19a>
 8008ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008eac:	e03a      	b.n	8008f24 <_printf_i+0xa8>
 8008eae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eb2:	2b15      	cmp	r3, #21
 8008eb4:	d8f6      	bhi.n	8008ea4 <_printf_i+0x28>
 8008eb6:	a101      	add	r1, pc, #4	@ (adr r1, 8008ebc <_printf_i+0x40>)
 8008eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f29 	.word	0x08008f29
 8008ec4:	08008ea5 	.word	0x08008ea5
 8008ec8:	08008ea5 	.word	0x08008ea5
 8008ecc:	08008ea5 	.word	0x08008ea5
 8008ed0:	08008ea5 	.word	0x08008ea5
 8008ed4:	08008f29 	.word	0x08008f29
 8008ed8:	08008ea5 	.word	0x08008ea5
 8008edc:	08008ea5 	.word	0x08008ea5
 8008ee0:	08008ea5 	.word	0x08008ea5
 8008ee4:	08008ea5 	.word	0x08008ea5
 8008ee8:	08009029 	.word	0x08009029
 8008eec:	08008f53 	.word	0x08008f53
 8008ef0:	08008fe3 	.word	0x08008fe3
 8008ef4:	08008ea5 	.word	0x08008ea5
 8008ef8:	08008ea5 	.word	0x08008ea5
 8008efc:	0800904b 	.word	0x0800904b
 8008f00:	08008ea5 	.word	0x08008ea5
 8008f04:	08008f53 	.word	0x08008f53
 8008f08:	08008ea5 	.word	0x08008ea5
 8008f0c:	08008ea5 	.word	0x08008ea5
 8008f10:	08008feb 	.word	0x08008feb
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	1d1a      	adds	r2, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6032      	str	r2, [r6, #0]
 8008f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f24:	2301      	movs	r3, #1
 8008f26:	e09d      	b.n	8009064 <_printf_i+0x1e8>
 8008f28:	6833      	ldr	r3, [r6, #0]
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	1d19      	adds	r1, r3, #4
 8008f2e:	6031      	str	r1, [r6, #0]
 8008f30:	0606      	lsls	r6, r0, #24
 8008f32:	d501      	bpl.n	8008f38 <_printf_i+0xbc>
 8008f34:	681d      	ldr	r5, [r3, #0]
 8008f36:	e003      	b.n	8008f40 <_printf_i+0xc4>
 8008f38:	0645      	lsls	r5, r0, #25
 8008f3a:	d5fb      	bpl.n	8008f34 <_printf_i+0xb8>
 8008f3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	da03      	bge.n	8008f4c <_printf_i+0xd0>
 8008f44:	232d      	movs	r3, #45	@ 0x2d
 8008f46:	426d      	negs	r5, r5
 8008f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f4c:	4859      	ldr	r0, [pc, #356]	@ (80090b4 <_printf_i+0x238>)
 8008f4e:	230a      	movs	r3, #10
 8008f50:	e011      	b.n	8008f76 <_printf_i+0xfa>
 8008f52:	6821      	ldr	r1, [r4, #0]
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	0608      	lsls	r0, r1, #24
 8008f58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f5c:	d402      	bmi.n	8008f64 <_printf_i+0xe8>
 8008f5e:	0649      	lsls	r1, r1, #25
 8008f60:	bf48      	it	mi
 8008f62:	b2ad      	uxthmi	r5, r5
 8008f64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f66:	4853      	ldr	r0, [pc, #332]	@ (80090b4 <_printf_i+0x238>)
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	bf14      	ite	ne
 8008f6c:	230a      	movne	r3, #10
 8008f6e:	2308      	moveq	r3, #8
 8008f70:	2100      	movs	r1, #0
 8008f72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f76:	6866      	ldr	r6, [r4, #4]
 8008f78:	60a6      	str	r6, [r4, #8]
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	bfa2      	ittt	ge
 8008f7e:	6821      	ldrge	r1, [r4, #0]
 8008f80:	f021 0104 	bicge.w	r1, r1, #4
 8008f84:	6021      	strge	r1, [r4, #0]
 8008f86:	b90d      	cbnz	r5, 8008f8c <_printf_i+0x110>
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	d04b      	beq.n	8009024 <_printf_i+0x1a8>
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f92:	fb03 5711 	mls	r7, r3, r1, r5
 8008f96:	5dc7      	ldrb	r7, [r0, r7]
 8008f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f9c:	462f      	mov	r7, r5
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	d9f4      	bls.n	8008f8e <_printf_i+0x112>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d10b      	bne.n	8008fc0 <_printf_i+0x144>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07df      	lsls	r7, r3, #31
 8008fac:	d508      	bpl.n	8008fc0 <_printf_i+0x144>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	bfde      	ittt	le
 8008fb6:	2330      	movle	r3, #48	@ 0x30
 8008fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fbc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008fc0:	1b92      	subs	r2, r2, r6
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	aa03      	add	r2, sp, #12
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fee6 	bl	8008da0 <_printf_common>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d14a      	bne.n	800906e <_printf_i+0x1f2>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	f043 0320 	orr.w	r3, r3, #32
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	4833      	ldr	r0, [pc, #204]	@ (80090b8 <_printf_i+0x23c>)
 8008fec:	2778      	movs	r7, #120	@ 0x78
 8008fee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	6831      	ldr	r1, [r6, #0]
 8008ff6:	061f      	lsls	r7, r3, #24
 8008ff8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ffc:	d402      	bmi.n	8009004 <_printf_i+0x188>
 8008ffe:	065f      	lsls	r7, r3, #25
 8009000:	bf48      	it	mi
 8009002:	b2ad      	uxthmi	r5, r5
 8009004:	6031      	str	r1, [r6, #0]
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	bf44      	itt	mi
 800900a:	f043 0320 	orrmi.w	r3, r3, #32
 800900e:	6023      	strmi	r3, [r4, #0]
 8009010:	b11d      	cbz	r5, 800901a <_printf_i+0x19e>
 8009012:	2310      	movs	r3, #16
 8009014:	e7ac      	b.n	8008f70 <_printf_i+0xf4>
 8009016:	4827      	ldr	r0, [pc, #156]	@ (80090b4 <_printf_i+0x238>)
 8009018:	e7e9      	b.n	8008fee <_printf_i+0x172>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	f023 0320 	bic.w	r3, r3, #32
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	e7f6      	b.n	8009012 <_printf_i+0x196>
 8009024:	4616      	mov	r6, r2
 8009026:	e7bd      	b.n	8008fa4 <_printf_i+0x128>
 8009028:	6833      	ldr	r3, [r6, #0]
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	6961      	ldr	r1, [r4, #20]
 800902e:	1d18      	adds	r0, r3, #4
 8009030:	6030      	str	r0, [r6, #0]
 8009032:	062e      	lsls	r6, r5, #24
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	d501      	bpl.n	800903c <_printf_i+0x1c0>
 8009038:	6019      	str	r1, [r3, #0]
 800903a:	e002      	b.n	8009042 <_printf_i+0x1c6>
 800903c:	0668      	lsls	r0, r5, #25
 800903e:	d5fb      	bpl.n	8009038 <_printf_i+0x1bc>
 8009040:	8019      	strh	r1, [r3, #0]
 8009042:	2300      	movs	r3, #0
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	4616      	mov	r6, r2
 8009048:	e7bc      	b.n	8008fc4 <_printf_i+0x148>
 800904a:	6833      	ldr	r3, [r6, #0]
 800904c:	1d1a      	adds	r2, r3, #4
 800904e:	6032      	str	r2, [r6, #0]
 8009050:	681e      	ldr	r6, [r3, #0]
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	2100      	movs	r1, #0
 8009056:	4630      	mov	r0, r6
 8009058:	f7f7 f8c2 	bl	80001e0 <memchr>
 800905c:	b108      	cbz	r0, 8009062 <_printf_i+0x1e6>
 800905e:	1b80      	subs	r0, r0, r6
 8009060:	6060      	str	r0, [r4, #4]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	2300      	movs	r3, #0
 8009068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800906c:	e7aa      	b.n	8008fc4 <_printf_i+0x148>
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	4632      	mov	r2, r6
 8009072:	4649      	mov	r1, r9
 8009074:	4640      	mov	r0, r8
 8009076:	47d0      	blx	sl
 8009078:	3001      	adds	r0, #1
 800907a:	d0ad      	beq.n	8008fd8 <_printf_i+0x15c>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	079b      	lsls	r3, r3, #30
 8009080:	d413      	bmi.n	80090aa <_printf_i+0x22e>
 8009082:	68e0      	ldr	r0, [r4, #12]
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	4298      	cmp	r0, r3
 8009088:	bfb8      	it	lt
 800908a:	4618      	movlt	r0, r3
 800908c:	e7a6      	b.n	8008fdc <_printf_i+0x160>
 800908e:	2301      	movs	r3, #1
 8009090:	4632      	mov	r2, r6
 8009092:	4649      	mov	r1, r9
 8009094:	4640      	mov	r0, r8
 8009096:	47d0      	blx	sl
 8009098:	3001      	adds	r0, #1
 800909a:	d09d      	beq.n	8008fd8 <_printf_i+0x15c>
 800909c:	3501      	adds	r5, #1
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	9903      	ldr	r1, [sp, #12]
 80090a2:	1a5b      	subs	r3, r3, r1
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dcf2      	bgt.n	800908e <_printf_i+0x212>
 80090a8:	e7eb      	b.n	8009082 <_printf_i+0x206>
 80090aa:	2500      	movs	r5, #0
 80090ac:	f104 0619 	add.w	r6, r4, #25
 80090b0:	e7f5      	b.n	800909e <_printf_i+0x222>
 80090b2:	bf00      	nop
 80090b4:	08009659 	.word	0x08009659
 80090b8:	0800966a 	.word	0x0800966a

080090bc <__sflush_r>:
 80090bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	0716      	lsls	r6, r2, #28
 80090c6:	4605      	mov	r5, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	d454      	bmi.n	8009176 <__sflush_r+0xba>
 80090cc:	684b      	ldr	r3, [r1, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc02      	bgt.n	80090d8 <__sflush_r+0x1c>
 80090d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd48      	ble.n	800916a <__sflush_r+0xae>
 80090d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d045      	beq.n	800916a <__sflush_r+0xae>
 80090de:	2300      	movs	r3, #0
 80090e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090e4:	682f      	ldr	r7, [r5, #0]
 80090e6:	6a21      	ldr	r1, [r4, #32]
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	d030      	beq.n	800914e <__sflush_r+0x92>
 80090ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	0759      	lsls	r1, r3, #29
 80090f2:	d505      	bpl.n	8009100 <__sflush_r+0x44>
 80090f4:	6863      	ldr	r3, [r4, #4]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090fa:	b10b      	cbz	r3, 8009100 <__sflush_r+0x44>
 80090fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	2300      	movs	r3, #0
 8009102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009104:	6a21      	ldr	r1, [r4, #32]
 8009106:	4628      	mov	r0, r5
 8009108:	47b0      	blx	r6
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	d106      	bne.n	800911e <__sflush_r+0x62>
 8009110:	6829      	ldr	r1, [r5, #0]
 8009112:	291d      	cmp	r1, #29
 8009114:	d82b      	bhi.n	800916e <__sflush_r+0xb2>
 8009116:	4a2a      	ldr	r2, [pc, #168]	@ (80091c0 <__sflush_r+0x104>)
 8009118:	410a      	asrs	r2, r1
 800911a:	07d6      	lsls	r6, r2, #31
 800911c:	d427      	bmi.n	800916e <__sflush_r+0xb2>
 800911e:	2200      	movs	r2, #0
 8009120:	6062      	str	r2, [r4, #4]
 8009122:	04d9      	lsls	r1, r3, #19
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	d504      	bpl.n	8009134 <__sflush_r+0x78>
 800912a:	1c42      	adds	r2, r0, #1
 800912c:	d101      	bne.n	8009132 <__sflush_r+0x76>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b903      	cbnz	r3, 8009134 <__sflush_r+0x78>
 8009132:	6560      	str	r0, [r4, #84]	@ 0x54
 8009134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009136:	602f      	str	r7, [r5, #0]
 8009138:	b1b9      	cbz	r1, 800916a <__sflush_r+0xae>
 800913a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800913e:	4299      	cmp	r1, r3
 8009140:	d002      	beq.n	8009148 <__sflush_r+0x8c>
 8009142:	4628      	mov	r0, r5
 8009144:	f7ff fbfe 	bl	8008944 <_free_r>
 8009148:	2300      	movs	r3, #0
 800914a:	6363      	str	r3, [r4, #52]	@ 0x34
 800914c:	e00d      	b.n	800916a <__sflush_r+0xae>
 800914e:	2301      	movs	r3, #1
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	4602      	mov	r2, r0
 8009156:	1c50      	adds	r0, r2, #1
 8009158:	d1c9      	bne.n	80090ee <__sflush_r+0x32>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0c6      	beq.n	80090ee <__sflush_r+0x32>
 8009160:	2b1d      	cmp	r3, #29
 8009162:	d001      	beq.n	8009168 <__sflush_r+0xac>
 8009164:	2b16      	cmp	r3, #22
 8009166:	d11e      	bne.n	80091a6 <__sflush_r+0xea>
 8009168:	602f      	str	r7, [r5, #0]
 800916a:	2000      	movs	r0, #0
 800916c:	e022      	b.n	80091b4 <__sflush_r+0xf8>
 800916e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009172:	b21b      	sxth	r3, r3
 8009174:	e01b      	b.n	80091ae <__sflush_r+0xf2>
 8009176:	690f      	ldr	r7, [r1, #16]
 8009178:	2f00      	cmp	r7, #0
 800917a:	d0f6      	beq.n	800916a <__sflush_r+0xae>
 800917c:	0793      	lsls	r3, r2, #30
 800917e:	680e      	ldr	r6, [r1, #0]
 8009180:	bf08      	it	eq
 8009182:	694b      	ldreq	r3, [r1, #20]
 8009184:	600f      	str	r7, [r1, #0]
 8009186:	bf18      	it	ne
 8009188:	2300      	movne	r3, #0
 800918a:	eba6 0807 	sub.w	r8, r6, r7
 800918e:	608b      	str	r3, [r1, #8]
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	dde9      	ble.n	800916a <__sflush_r+0xae>
 8009196:	6a21      	ldr	r1, [r4, #32]
 8009198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800919a:	4643      	mov	r3, r8
 800919c:	463a      	mov	r2, r7
 800919e:	4628      	mov	r0, r5
 80091a0:	47b0      	blx	r6
 80091a2:	2800      	cmp	r0, #0
 80091a4:	dc08      	bgt.n	80091b8 <__sflush_r+0xfc>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	4407      	add	r7, r0
 80091ba:	eba8 0800 	sub.w	r8, r8, r0
 80091be:	e7e7      	b.n	8009190 <__sflush_r+0xd4>
 80091c0:	dfbffffe 	.word	0xdfbffffe

080091c4 <_fflush_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	690b      	ldr	r3, [r1, #16]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b913      	cbnz	r3, 80091d4 <_fflush_r+0x10>
 80091ce:	2500      	movs	r5, #0
 80091d0:	4628      	mov	r0, r5
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	b118      	cbz	r0, 80091de <_fflush_r+0x1a>
 80091d6:	6a03      	ldr	r3, [r0, #32]
 80091d8:	b90b      	cbnz	r3, 80091de <_fflush_r+0x1a>
 80091da:	f7ff fadf 	bl	800879c <__sinit>
 80091de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0f3      	beq.n	80091ce <_fflush_r+0xa>
 80091e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091e8:	07d0      	lsls	r0, r2, #31
 80091ea:	d404      	bmi.n	80091f6 <_fflush_r+0x32>
 80091ec:	0599      	lsls	r1, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_fflush_r+0x32>
 80091f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091f2:	f7ff fba4 	bl	800893e <__retarget_lock_acquire_recursive>
 80091f6:	4628      	mov	r0, r5
 80091f8:	4621      	mov	r1, r4
 80091fa:	f7ff ff5f 	bl	80090bc <__sflush_r>
 80091fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009200:	07da      	lsls	r2, r3, #31
 8009202:	4605      	mov	r5, r0
 8009204:	d4e4      	bmi.n	80091d0 <_fflush_r+0xc>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	059b      	lsls	r3, r3, #22
 800920a:	d4e1      	bmi.n	80091d0 <_fflush_r+0xc>
 800920c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800920e:	f7ff fb97 	bl	8008940 <__retarget_lock_release_recursive>
 8009212:	e7dd      	b.n	80091d0 <_fflush_r+0xc>

08009214 <__malloc_lock>:
 8009214:	4801      	ldr	r0, [pc, #4]	@ (800921c <__malloc_lock+0x8>)
 8009216:	f7ff bb92 	b.w	800893e <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	20005ee8 	.word	0x20005ee8

08009220 <__malloc_unlock>:
 8009220:	4801      	ldr	r0, [pc, #4]	@ (8009228 <__malloc_unlock+0x8>)
 8009222:	f7ff bb8d 	b.w	8008940 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	20005ee8 	.word	0x20005ee8

0800922c <__sread>:
 800922c:	b510      	push	{r4, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009234:	f000 f978 	bl	8009528 <_read_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	bfab      	itete	ge
 800923c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800923e:	89a3      	ldrhlt	r3, [r4, #12]
 8009240:	181b      	addge	r3, r3, r0
 8009242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009246:	bfac      	ite	ge
 8009248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800924a:	81a3      	strhlt	r3, [r4, #12]
 800924c:	bd10      	pop	{r4, pc}

0800924e <__swrite>:
 800924e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009252:	461f      	mov	r7, r3
 8009254:	898b      	ldrh	r3, [r1, #12]
 8009256:	05db      	lsls	r3, r3, #23
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	4616      	mov	r6, r2
 800925e:	d505      	bpl.n	800926c <__swrite+0x1e>
 8009260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009264:	2302      	movs	r3, #2
 8009266:	2200      	movs	r2, #0
 8009268:	f000 f94c 	bl	8009504 <_lseek_r>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	4628      	mov	r0, r5
 800927e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009282:	f000 b973 	b.w	800956c <_write_r>

08009286 <__sseek>:
 8009286:	b510      	push	{r4, lr}
 8009288:	460c      	mov	r4, r1
 800928a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928e:	f000 f939 	bl	8009504 <_lseek_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	bf15      	itete	ne
 8009298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800929a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800929e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092a2:	81a3      	strheq	r3, [r4, #12]
 80092a4:	bf18      	it	ne
 80092a6:	81a3      	strhne	r3, [r4, #12]
 80092a8:	bd10      	pop	{r4, pc}

080092aa <__sclose>:
 80092aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ae:	f000 b8f7 	b.w	80094a0 <_close_r>

080092b2 <__swbuf_r>:
 80092b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b4:	460e      	mov	r6, r1
 80092b6:	4614      	mov	r4, r2
 80092b8:	4605      	mov	r5, r0
 80092ba:	b118      	cbz	r0, 80092c4 <__swbuf_r+0x12>
 80092bc:	6a03      	ldr	r3, [r0, #32]
 80092be:	b90b      	cbnz	r3, 80092c4 <__swbuf_r+0x12>
 80092c0:	f7ff fa6c 	bl	800879c <__sinit>
 80092c4:	69a3      	ldr	r3, [r4, #24]
 80092c6:	60a3      	str	r3, [r4, #8]
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	071a      	lsls	r2, r3, #28
 80092cc:	d501      	bpl.n	80092d2 <__swbuf_r+0x20>
 80092ce:	6923      	ldr	r3, [r4, #16]
 80092d0:	b943      	cbnz	r3, 80092e4 <__swbuf_r+0x32>
 80092d2:	4621      	mov	r1, r4
 80092d4:	4628      	mov	r0, r5
 80092d6:	f000 f82b 	bl	8009330 <__swsetup_r>
 80092da:	b118      	cbz	r0, 80092e4 <__swbuf_r+0x32>
 80092dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092e0:	4638      	mov	r0, r7
 80092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	6922      	ldr	r2, [r4, #16]
 80092e8:	1a98      	subs	r0, r3, r2
 80092ea:	6963      	ldr	r3, [r4, #20]
 80092ec:	b2f6      	uxtb	r6, r6
 80092ee:	4283      	cmp	r3, r0
 80092f0:	4637      	mov	r7, r6
 80092f2:	dc05      	bgt.n	8009300 <__swbuf_r+0x4e>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4628      	mov	r0, r5
 80092f8:	f7ff ff64 	bl	80091c4 <_fflush_r>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d1ed      	bne.n	80092dc <__swbuf_r+0x2a>
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	3b01      	subs	r3, #1
 8009304:	60a3      	str	r3, [r4, #8]
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	701e      	strb	r6, [r3, #0]
 800930e:	6962      	ldr	r2, [r4, #20]
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	429a      	cmp	r2, r3
 8009314:	d004      	beq.n	8009320 <__swbuf_r+0x6e>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	07db      	lsls	r3, r3, #31
 800931a:	d5e1      	bpl.n	80092e0 <__swbuf_r+0x2e>
 800931c:	2e0a      	cmp	r6, #10
 800931e:	d1df      	bne.n	80092e0 <__swbuf_r+0x2e>
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff ff4e 	bl	80091c4 <_fflush_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	d0d9      	beq.n	80092e0 <__swbuf_r+0x2e>
 800932c:	e7d6      	b.n	80092dc <__swbuf_r+0x2a>
	...

08009330 <__swsetup_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4b29      	ldr	r3, [pc, #164]	@ (80093d8 <__swsetup_r+0xa8>)
 8009334:	4605      	mov	r5, r0
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	460c      	mov	r4, r1
 800933a:	b118      	cbz	r0, 8009344 <__swsetup_r+0x14>
 800933c:	6a03      	ldr	r3, [r0, #32]
 800933e:	b90b      	cbnz	r3, 8009344 <__swsetup_r+0x14>
 8009340:	f7ff fa2c 	bl	800879c <__sinit>
 8009344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009348:	0719      	lsls	r1, r3, #28
 800934a:	d422      	bmi.n	8009392 <__swsetup_r+0x62>
 800934c:	06da      	lsls	r2, r3, #27
 800934e:	d407      	bmi.n	8009360 <__swsetup_r+0x30>
 8009350:	2209      	movs	r2, #9
 8009352:	602a      	str	r2, [r5, #0]
 8009354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800935e:	e033      	b.n	80093c8 <__swsetup_r+0x98>
 8009360:	0758      	lsls	r0, r3, #29
 8009362:	d512      	bpl.n	800938a <__swsetup_r+0x5a>
 8009364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009366:	b141      	cbz	r1, 800937a <__swsetup_r+0x4a>
 8009368:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__swsetup_r+0x46>
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff fae7 	bl	8008944 <_free_r>
 8009376:	2300      	movs	r3, #0
 8009378:	6363      	str	r3, [r4, #52]	@ 0x34
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	b94b      	cbnz	r3, 80093aa <__swsetup_r+0x7a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800939c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a0:	d003      	beq.n	80093aa <__swsetup_r+0x7a>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f83f 	bl	8009428 <__smakebuf_r>
 80093aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ae:	f013 0201 	ands.w	r2, r3, #1
 80093b2:	d00a      	beq.n	80093ca <__swsetup_r+0x9a>
 80093b4:	2200      	movs	r2, #0
 80093b6:	60a2      	str	r2, [r4, #8]
 80093b8:	6962      	ldr	r2, [r4, #20]
 80093ba:	4252      	negs	r2, r2
 80093bc:	61a2      	str	r2, [r4, #24]
 80093be:	6922      	ldr	r2, [r4, #16]
 80093c0:	b942      	cbnz	r2, 80093d4 <__swsetup_r+0xa4>
 80093c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093c6:	d1c5      	bne.n	8009354 <__swsetup_r+0x24>
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	0799      	lsls	r1, r3, #30
 80093cc:	bf58      	it	pl
 80093ce:	6962      	ldrpl	r2, [r4, #20]
 80093d0:	60a2      	str	r2, [r4, #8]
 80093d2:	e7f4      	b.n	80093be <__swsetup_r+0x8e>
 80093d4:	2000      	movs	r0, #0
 80093d6:	e7f7      	b.n	80093c8 <__swsetup_r+0x98>
 80093d8:	2000010c 	.word	0x2000010c

080093dc <__swhatbuf_r>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	2900      	cmp	r1, #0
 80093e6:	b096      	sub	sp, #88	@ 0x58
 80093e8:	4615      	mov	r5, r2
 80093ea:	461e      	mov	r6, r3
 80093ec:	da0d      	bge.n	800940a <__swhatbuf_r+0x2e>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093f4:	f04f 0100 	mov.w	r1, #0
 80093f8:	bf14      	ite	ne
 80093fa:	2340      	movne	r3, #64	@ 0x40
 80093fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009400:	2000      	movs	r0, #0
 8009402:	6031      	str	r1, [r6, #0]
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	b016      	add	sp, #88	@ 0x58
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	466a      	mov	r2, sp
 800940c:	f000 f858 	bl	80094c0 <_fstat_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	dbec      	blt.n	80093ee <__swhatbuf_r+0x12>
 8009414:	9901      	ldr	r1, [sp, #4]
 8009416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800941a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800941e:	4259      	negs	r1, r3
 8009420:	4159      	adcs	r1, r3
 8009422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009426:	e7eb      	b.n	8009400 <__swhatbuf_r+0x24>

08009428 <__smakebuf_r>:
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800942c:	079d      	lsls	r5, r3, #30
 800942e:	4606      	mov	r6, r0
 8009430:	460c      	mov	r4, r1
 8009432:	d507      	bpl.n	8009444 <__smakebuf_r+0x1c>
 8009434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	2301      	movs	r3, #1
 800943e:	6163      	str	r3, [r4, #20]
 8009440:	b003      	add	sp, #12
 8009442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009444:	ab01      	add	r3, sp, #4
 8009446:	466a      	mov	r2, sp
 8009448:	f7ff ffc8 	bl	80093dc <__swhatbuf_r>
 800944c:	9f00      	ldr	r7, [sp, #0]
 800944e:	4605      	mov	r5, r0
 8009450:	4639      	mov	r1, r7
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff fc24 	bl	8008ca0 <_malloc_r>
 8009458:	b948      	cbnz	r0, 800946e <__smakebuf_r+0x46>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	059a      	lsls	r2, r3, #22
 8009460:	d4ee      	bmi.n	8009440 <__smakebuf_r+0x18>
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	f043 0302 	orr.w	r3, r3, #2
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	e7e2      	b.n	8009434 <__smakebuf_r+0xc>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	6020      	str	r0, [r4, #0]
 8009472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800947e:	b15b      	cbz	r3, 8009498 <__smakebuf_r+0x70>
 8009480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009484:	4630      	mov	r0, r6
 8009486:	f000 f82d 	bl	80094e4 <_isatty_r>
 800948a:	b128      	cbz	r0, 8009498 <__smakebuf_r+0x70>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	431d      	orrs	r5, r3
 800949c:	81a5      	strh	r5, [r4, #12]
 800949e:	e7cf      	b.n	8009440 <__smakebuf_r+0x18>

080094a0 <_close_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d06      	ldr	r5, [pc, #24]	@ (80094bc <_close_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f7 fabf 	bl	8000a2e <_close>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_close_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_close_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20005ee4 	.word	0x20005ee4

080094c0 <_fstat_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	@ (80094e0 <_fstat_r+0x20>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f7f7 faba 	bl	8000a46 <_fstat>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d102      	bne.n	80094dc <_fstat_r+0x1c>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b103      	cbz	r3, 80094dc <_fstat_r+0x1c>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	20005ee4 	.word	0x20005ee4

080094e4 <_isatty_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	@ (8009500 <_isatty_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f7 fab9 	bl	8000a66 <_isatty>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_isatty_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_isatty_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20005ee4 	.word	0x20005ee4

08009504 <_lseek_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	@ (8009524 <_lseek_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f7 fab2 	bl	8000a7c <_lseek>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_lseek_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_lseek_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20005ee4 	.word	0x20005ee4

08009528 <_read_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	@ (8009548 <_read_r+0x20>)
 800952c:	4604      	mov	r4, r0
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	2200      	movs	r2, #0
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	f7f7 fa5c 	bl	80009f4 <_read>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_read_r+0x1e>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_read_r+0x1e>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	20005ee4 	.word	0x20005ee4

0800954c <_sbrk_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_sbrk_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7f7 fa9e 	bl	8000a98 <_sbrk>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_sbrk_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_sbrk_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20005ee4 	.word	0x20005ee4

0800956c <_write_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	@ (800958c <_write_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7f7 f87a 	bl	8000674 <_write>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_write_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_write_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20005ee4 	.word	0x20005ee4

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
