
LCDeRTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002864  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029dc  080029dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029dc  080029dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029dc  080029dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080029e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000010  080029f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  080029f4  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052e9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171a  00000000  00000000  00025322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00026a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  000270f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c47  00000000  00000000  000276e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007692  00000000  00000000  0003e32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fcb6  00000000  00000000  000459c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001880  00000000  00000000  000c56c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002958 	.word	0x08002958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002958 	.word	0x08002958

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af0a      	add	r7, sp, #40	; 0x28
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	4608      	mov	r0, r1
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	4603      	mov	r3, r0
 800016c:	817b      	strh	r3, [r7, #10]
 800016e:	460b      	mov	r3, r1
 8000170:	813b      	strh	r3, [r7, #8]
 8000172:	4613      	mov	r3, r2
 8000174:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000176:	4b1d      	ldr	r3, [pc, #116]	; (80001ec <LiquidCrystal+0x90>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d019      	beq.n	80001b2 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800017e:	8939      	ldrh	r1, [r7, #8]
 8000180:	897a      	ldrh	r2, [r7, #10]
 8000182:	2300      	movs	r3, #0
 8000184:	9308      	str	r3, [sp, #32]
 8000186:	2300      	movs	r3, #0
 8000188:	9307      	str	r3, [sp, #28]
 800018a:	2300      	movs	r3, #0
 800018c:	9306      	str	r3, [sp, #24]
 800018e:	2300      	movs	r3, #0
 8000190:	9305      	str	r3, [sp, #20]
 8000192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000194:	9304      	str	r3, [sp, #16]
 8000196:	8c3b      	ldrh	r3, [r7, #32]
 8000198:	9303      	str	r3, [sp, #12]
 800019a:	8bbb      	ldrh	r3, [r7, #28]
 800019c:	9302      	str	r3, [sp, #8]
 800019e:	8b3b      	ldrh	r3, [r7, #24]
 80001a0:	9301      	str	r3, [sp, #4]
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	460b      	mov	r3, r1
 80001a8:	68f9      	ldr	r1, [r7, #12]
 80001aa:	2001      	movs	r0, #1
 80001ac:	f000 f820 	bl	80001f0 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80001b0:	e018      	b.n	80001e4 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001b2:	8939      	ldrh	r1, [r7, #8]
 80001b4:	897a      	ldrh	r2, [r7, #10]
 80001b6:	2300      	movs	r3, #0
 80001b8:	9308      	str	r3, [sp, #32]
 80001ba:	2300      	movs	r3, #0
 80001bc:	9307      	str	r3, [sp, #28]
 80001be:	2300      	movs	r3, #0
 80001c0:	9306      	str	r3, [sp, #24]
 80001c2:	2300      	movs	r3, #0
 80001c4:	9305      	str	r3, [sp, #20]
 80001c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80001c8:	9304      	str	r3, [sp, #16]
 80001ca:	8c3b      	ldrh	r3, [r7, #32]
 80001cc:	9303      	str	r3, [sp, #12]
 80001ce:	8bbb      	ldrh	r3, [r7, #28]
 80001d0:	9302      	str	r3, [sp, #8]
 80001d2:	8b3b      	ldrh	r3, [r7, #24]
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	88fb      	ldrh	r3, [r7, #6]
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	460b      	mov	r3, r1
 80001dc:	68f9      	ldr	r1, [r7, #12]
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f806 	bl	80001f0 <init>
}
 80001e4:	bf00      	nop
 80001e6:	3710      	adds	r7, #16
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	4611      	mov	r1, r2
 80001fa:	461a      	mov	r2, r3
 80001fc:	4603      	mov	r3, r0
 80001fe:	73fb      	strb	r3, [r7, #15]
 8000200:	460b      	mov	r3, r1
 8000202:	81bb      	strh	r3, [r7, #12]
 8000204:	4613      	mov	r3, r2
 8000206:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <init+0x84>)
 800020a:	89bb      	ldrh	r3, [r7, #12]
 800020c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800020e:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <init+0x88>)
 8000210:	88fb      	ldrh	r3, [r7, #6]
 8000212:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000214:	4a19      	ldr	r2, [pc, #100]	; (800027c <init+0x8c>)
 8000216:	8b3b      	ldrh	r3, [r7, #24]
 8000218:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <init+0x90>)
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <init+0x94>)
 8000222:	8bbb      	ldrh	r3, [r7, #28]
 8000224:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <init+0x94>)
 8000228:	8c3b      	ldrh	r3, [r7, #32]
 800022a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 800022c:	4a15      	ldr	r2, [pc, #84]	; (8000284 <init+0x94>)
 800022e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000230:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <init+0x94>)
 8000234:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000236:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000238:	4a12      	ldr	r2, [pc, #72]	; (8000284 <init+0x94>)
 800023a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800023c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 800023e:	4a11      	ldr	r2, [pc, #68]	; (8000284 <init+0x94>)
 8000240:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000242:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <init+0x94>)
 8000246:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000248:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800024a:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <init+0x94>)
 800024c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800024e:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <init+0x98>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	e002      	b.n	8000264 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <init+0x98>)
 8000260:	2210      	movs	r2, #16
 8000262:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000264:	2102      	movs	r1, #2
 8000266:	2010      	movs	r0, #16
 8000268:	f000 f810 	bl	800028c <begin>
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000002e 	.word	0x2000002e
 8000278:	20000030 	.word	0x20000030
 800027c:	20000032 	.word	0x20000032
 8000280:	20000044 	.word	0x20000044
 8000284:	20000034 	.word	0x20000034
 8000288:	20000048 	.word	0x20000048

0800028c <begin>:

void begin(uint8_t cols, uint8_t lines) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d906      	bls.n	80002b0 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80002a2:	4b77      	ldr	r3, [pc, #476]	; (8000480 <begin+0x1f4>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b74      	ldr	r3, [pc, #464]	; (8000480 <begin+0x1f4>)
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80002b0:	4a74      	ldr	r2, [pc, #464]	; (8000484 <begin+0x1f8>)
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	3340      	adds	r3, #64	; 0x40
 80002bc:	2140      	movs	r1, #64	; 0x40
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f962 	bl	8000588 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80002c4:	4b70      	ldr	r3, [pc, #448]	; (8000488 <begin+0x1fc>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d009      	beq.n	80002e0 <begin+0x54>
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d106      	bne.n	80002e0 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80002d2:	4b6b      	ldr	r3, [pc, #428]	; (8000480 <begin+0x1f4>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b68      	ldr	r3, [pc, #416]	; (8000480 <begin+0x1f4>)
 80002de:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 80002e0:	f000 f8e4 	bl	80004ac <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e4:	2303      	movs	r3, #3
 80002e6:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 80002ec:	4b67      	ldr	r3, [pc, #412]	; (800048c <begin+0x200>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d01b      	beq.n	800032c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80002f4:	4b66      	ldr	r3, [pc, #408]	; (8000490 <begin+0x204>)
 80002f6:	881a      	ldrh	r2, [r3, #0]
 80002f8:	4b66      	ldr	r3, [pc, #408]	; (8000494 <begin+0x208>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4b65      	ldr	r3, [pc, #404]	; (8000498 <begin+0x20c>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4313      	orrs	r3, r2
 8000306:	b29a      	uxth	r2, r3
 8000308:	4b64      	ldr	r3, [pc, #400]	; (800049c <begin+0x210>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	4313      	orrs	r3, r2
 800030e:	b29a      	uxth	r2, r3
 8000310:	4b62      	ldr	r3, [pc, #392]	; (800049c <begin+0x210>)
 8000312:	885b      	ldrh	r3, [r3, #2]
 8000314:	4313      	orrs	r3, r2
 8000316:	b29a      	uxth	r2, r3
 8000318:	4b60      	ldr	r3, [pc, #384]	; (800049c <begin+0x210>)
 800031a:	889b      	ldrh	r3, [r3, #4]
 800031c:	4313      	orrs	r3, r2
 800031e:	b29a      	uxth	r2, r3
 8000320:	4b5e      	ldr	r3, [pc, #376]	; (800049c <begin+0x210>)
 8000322:	88db      	ldrh	r3, [r3, #6]
 8000324:	4313      	orrs	r3, r2
 8000326:	b29b      	uxth	r3, r3
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	e02a      	b.n	8000382 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800032c:	4b58      	ldr	r3, [pc, #352]	; (8000490 <begin+0x204>)
 800032e:	881a      	ldrh	r2, [r3, #0]
 8000330:	4b58      	ldr	r3, [pc, #352]	; (8000494 <begin+0x208>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	4313      	orrs	r3, r2
 8000336:	b29a      	uxth	r2, r3
 8000338:	4b57      	ldr	r3, [pc, #348]	; (8000498 <begin+0x20c>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	4313      	orrs	r3, r2
 800033e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000340:	4b56      	ldr	r3, [pc, #344]	; (800049c <begin+0x210>)
 8000342:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000344:	4313      	orrs	r3, r2
 8000346:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000348:	4b54      	ldr	r3, [pc, #336]	; (800049c <begin+0x210>)
 800034a:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800034c:	4313      	orrs	r3, r2
 800034e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000350:	4b52      	ldr	r3, [pc, #328]	; (800049c <begin+0x210>)
 8000352:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000354:	4313      	orrs	r3, r2
 8000356:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000358:	4b50      	ldr	r3, [pc, #320]	; (800049c <begin+0x210>)
 800035a:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800035c:	4313      	orrs	r3, r2
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b4e      	ldr	r3, [pc, #312]	; (800049c <begin+0x210>)
 8000362:	891b      	ldrh	r3, [r3, #8]
 8000364:	4313      	orrs	r3, r2
 8000366:	b29a      	uxth	r2, r3
 8000368:	4b4c      	ldr	r3, [pc, #304]	; (800049c <begin+0x210>)
 800036a:	895b      	ldrh	r3, [r3, #10]
 800036c:	4313      	orrs	r3, r2
 800036e:	b29a      	uxth	r2, r3
 8000370:	4b4a      	ldr	r3, [pc, #296]	; (800049c <begin+0x210>)
 8000372:	899b      	ldrh	r3, [r3, #12]
 8000374:	4313      	orrs	r3, r2
 8000376:	b29a      	uxth	r2, r3
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <begin+0x210>)
 800037a:	89db      	ldrh	r3, [r3, #14]
 800037c:	4313      	orrs	r3, r2
 800037e:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000380:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 8000382:	4b47      	ldr	r3, [pc, #284]	; (80004a0 <begin+0x214>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f107 0208 	add.w	r2, r7, #8
 800038a:	4611      	mov	r1, r2
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fe3d 	bl	800100c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000392:	2032      	movs	r0, #50	; 0x32
 8000394:	f000 fd32 	bl	8000dfc <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000398:	4b41      	ldr	r3, [pc, #260]	; (80004a0 <begin+0x214>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <begin+0x204>)
 800039e:	8811      	ldrh	r1, [r2, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 ffae 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <begin+0x214>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a3a      	ldr	r2, [pc, #232]	; (8000498 <begin+0x20c>)
 80003ae:	8811      	ldrh	r1, [r2, #0]
 80003b0:	2200      	movs	r2, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ffa6 	bl	8001304 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80003b8:	4b36      	ldr	r3, [pc, #216]	; (8000494 <begin+0x208>)
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	2bff      	cmp	r3, #255	; 0xff
 80003be:	d007      	beq.n	80003d0 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <begin+0x214>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a33      	ldr	r2, [pc, #204]	; (8000494 <begin+0x208>)
 80003c6:	8811      	ldrh	r1, [r2, #0]
 80003c8:	2200      	movs	r2, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 ff9a 	bl	8001304 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80003d0:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <begin+0x1f4>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	f003 0310 	and.w	r3, r3, #16
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d115      	bne.n	8000408 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 80003dc:	2003      	movs	r0, #3
 80003de:	f000 f9f3 	bl	80007c8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80003e2:	2005      	movs	r0, #5
 80003e4:	f000 fd0a 	bl	8000dfc <HAL_Delay>

    // second try
    write4bits(0x03);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f000 f9ed 	bl	80007c8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80003ee:	2005      	movs	r0, #5
 80003f0:	f000 fd04 	bl	8000dfc <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 80003f4:	2003      	movs	r0, #3
 80003f6:	f000 f9e7 	bl	80007c8 <write4bits>
    HAL_Delay(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 fcfe 	bl	8000dfc <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000400:	2002      	movs	r0, #2
 8000402:	f000 f9e1 	bl	80007c8 <write4bits>
 8000406:	e01d      	b.n	8000444 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <begin+0x1f4>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	f043 0320 	orr.w	r3, r3, #32
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f953 	bl	80006be <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fcef 	bl	8000dfc <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <begin+0x1f4>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f948 	bl	80006be <command>
    HAL_Delay(1);
 800042e:	2001      	movs	r0, #1
 8000430:	f000 fce4 	bl	8000dfc <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <begin+0x1f4>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	f043 0320 	orr.w	r3, r3, #32
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f93d 	bl	80006be <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <begin+0x1f4>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	f043 0320 	orr.w	r3, r3, #32
 800044c:	b2db      	uxtb	r3, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f935 	bl	80006be <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <begin+0x218>)
 8000456:	2204      	movs	r2, #4
 8000458:	701a      	strb	r2, [r3, #0]
  display();
 800045a:	f000 f8ef 	bl	800063c <display>

  // clear it off
  clear();
 800045e:	f000 f8b1 	bl	80005c4 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <begin+0x21c>)
 8000464:	2202      	movs	r2, #2
 8000466:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <begin+0x21c>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f923 	bl	80006be <command>

}
 8000478:	bf00      	nop
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000048 	.word	0x20000048
 8000484:	2000004b 	.word	0x2000004b
 8000488:	2000002c 	.word	0x2000002c
 800048c:	20000000 	.word	0x20000000
 8000490:	2000002e 	.word	0x2000002e
 8000494:	20000030 	.word	0x20000030
 8000498:	20000032 	.word	0x20000032
 800049c:	20000034 	.word	0x20000034
 80004a0:	20000044 	.word	0x20000044
 80004a4:	20000049 	.word	0x20000049
 80004a8:	2000004a 	.word	0x2000004a

080004ac <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80004b2:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <enableClock+0xc4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a2f      	ldr	r2, [pc, #188]	; (8000574 <enableClock+0xc8>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d10c      	bne.n	80004d6 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <enableClock+0xcc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2d      	ldr	r2, [pc, #180]	; (8000578 <enableClock+0xcc>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <enableClock+0xcc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697b      	ldr	r3, [r7, #20]
	//	__HAL_RCC_GPIOE_CLK_ENABLE();
	//else if(_port == GPIOF)
	//	__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80004d4:	e046      	b.n	8000564 <enableClock+0xb8>
  else if(_port == GPIOB)
 80004d6:	4b26      	ldr	r3, [pc, #152]	; (8000570 <enableClock+0xc4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a28      	ldr	r2, [pc, #160]	; (800057c <enableClock+0xd0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d10c      	bne.n	80004fa <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <enableClock+0xcc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a24      	ldr	r2, [pc, #144]	; (8000578 <enableClock+0xcc>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <enableClock+0xcc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	693b      	ldr	r3, [r7, #16]
}
 80004f8:	e034      	b.n	8000564 <enableClock+0xb8>
  else if(_port == GPIOB)
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <enableClock+0xc4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a1f      	ldr	r2, [pc, #124]	; (800057c <enableClock+0xd0>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d10c      	bne.n	800051e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <enableClock+0xcc>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <enableClock+0xcc>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <enableClock+0xcc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	e022      	b.n	8000564 <enableClock+0xb8>
	else if(_port == GPIOC)
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <enableClock+0xc4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <enableClock+0xd4>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d10c      	bne.n	8000542 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <enableClock+0xcc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <enableClock+0xcc>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <enableClock+0xcc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
}
 8000540:	e010      	b.n	8000564 <enableClock+0xb8>
	else if(_port == GPIOD)
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <enableClock+0xc4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <enableClock+0xd8>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d10b      	bne.n	8000564 <enableClock+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <enableClock+0xcc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <enableClock+0xcc>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <enableClock+0xcc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	bf00      	nop
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000044 	.word	0x20000044
 8000574:	40010800 	.word	0x40010800
 8000578:	40021000 	.word	0x40021000
 800057c:	40010c00 	.word	0x40010c00
 8000580:	40011000 	.word	0x40011000
 8000584:	40011400 	.word	0x40011400

08000588 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <setRowOffsets+0x38>)
 800059c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <setRowOffsets+0x38>)
 80005a4:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <setRowOffsets+0x38>)
 80005ac:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <setRowOffsets+0x38>)
 80005b4:	70da      	strb	r2, [r3, #3]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	2000004c 	.word	0x2000004c

080005c4 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 f878 	bl	80006be <command>
  HAL_Delay(2);  // this command takes a long time!
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 fc14 	bl	8000dfc <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80005e8:	2304      	movs	r3, #4
 80005ea:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d803      	bhi.n	80005fc <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	3b01      	subs	r3, #1
 80005fa:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <setCursor+0x5c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	79ba      	ldrb	r2, [r7, #6]
 8000602:	429a      	cmp	r2, r3
 8000604:	d303      	bcc.n	800060e <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <setCursor+0x5c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <setCursor+0x60>)
 8000612:	5cd2      	ldrb	r2, [r2, r3]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4413      	add	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000620:	b25b      	sxtb	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f84a 	bl	80006be <command>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000004b 	.word	0x2000004b
 8000638:	2000004c 	.word	0x2000004c

0800063c <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <display+0x28>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <display+0x28>)
 800064c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <display+0x28>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f830 	bl	80006be <command>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000049 	.word	0x20000049

08000668 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <print+0x12>
 8000676:	2300      	movs	r3, #0
 8000678:	e01d      	b.n	80006b6 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fd64 	bl	800014c <strlen>
 8000684:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800068a:	e00c      	b.n	80006a6 <print+0x3e>
    if (write(*buffer++)) n++;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	617a      	str	r2, [r7, #20]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f820 	bl	80006da <write>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <print+0x4a>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	613a      	str	r2, [r7, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1ed      	bne.n	800068c <print+0x24>
 80006b0:	e000      	b.n	80006b4 <print+0x4c>
    else break;
 80006b2:	bf00      	nop
  }
  return n;
 80006b4:	68fb      	ldr	r3, [r7, #12]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f813 	bl	80006f8 <send>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <write>:

inline size_t write(uint8_t value) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f805 	bl	80006f8 <send>
  return 1; // assume sucess
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <send+0x6c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a16      	ldr	r2, [pc, #88]	; (8000768 <send+0x70>)
 800070e:	8811      	ldrh	r1, [r2, #0]
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fdf6 	bl	8001304 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <send+0x74>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2bff      	cmp	r3, #255	; 0xff
 800071e:	d007      	beq.n	8000730 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <send+0x6c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <send+0x74>)
 8000726:	8811      	ldrh	r1, [r2, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fdea 	bl	8001304 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <send+0x78>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	2b00      	cmp	r3, #0
 800073a:	d004      	beq.n	8000746 <send+0x4e>
    write8bits(value); 
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f86c 	bl	800081c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000744:	e009      	b.n	800075a <send+0x62>
    write4bits(value>>4);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f83b 	bl	80007c8 <write4bits>
    write4bits(value);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f837 	bl	80007c8 <write4bits>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000044 	.word	0x20000044
 8000768:	2000002e 	.word	0x2000002e
 800076c:	20000030 	.word	0x20000030
 8000770:	20000048 	.word	0x20000048

08000774 <pulseEnable>:

void pulseEnable(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <pulseEnable+0x4c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <pulseEnable+0x50>)
 800077e:	8811      	ldrh	r1, [r2, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fdbe 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fb37 	bl	8000dfc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <pulseEnable+0x4c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <pulseEnable+0x50>)
 8000794:	8811      	ldrh	r1, [r2, #0]
 8000796:	2201      	movs	r2, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fdb3 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fb2c 	bl	8000dfc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <pulseEnable+0x4c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <pulseEnable+0x50>)
 80007aa:	8811      	ldrh	r1, [r2, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fda8 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 fb21 	bl	8000dfc <HAL_Delay>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000044 	.word	0x20000044
 80007c4:	20000032 	.word	0x20000032

080007c8 <write4bits>:

void write4bits(uint8_t value) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e013      	b.n	8000800 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <write4bits+0x4c>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <write4bits+0x50>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	fa42 f303 	asr.w	r3, r2, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	f000 fd85 	bl	8001304 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b03      	cmp	r3, #3
 8000804:	dde8      	ble.n	80007d8 <write4bits+0x10>
  }

  pulseEnable();
 8000806:	f7ff ffb5 	bl	8000774 <pulseEnable>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000044 	.word	0x20000044
 8000818:	20000034 	.word	0x20000034

0800081c <write8bits>:

void write8bits(uint8_t value) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e013      	b.n	8000854 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <write8bits+0x4c>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <write8bits+0x50>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	fa42 f303 	asr.w	r3, r2, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	f000 fd5b 	bl	8001304 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b07      	cmp	r3, #7
 8000858:	dde8      	ble.n	800082c <write8bits+0x10>
  }
  
  pulseEnable();
 800085a:	f7ff ff8b 	bl	8000774 <pulseEnable>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000044 	.word	0x20000044
 800086c:	20000034 	.word	0x20000034

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fa5f 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8d1 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f96d 	bl	8000b5c <MX_GPIO_Init>
  MX_RTC_Init();
 8000882:	f000 f921 	bl	8000ac8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LiquidCrystal(GPIOA, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7);
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	9303      	str	r3, [sp, #12]
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2320      	movs	r3, #32
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2310      	movs	r3, #16
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2308      	movs	r3, #8
 8000898:	2204      	movs	r2, #4
 800089a:	2102      	movs	r1, #2
 800089c:	4859      	ldr	r0, [pc, #356]	; (8000a04 <main+0x194>)
 800089e:	f7ff fc5d 	bl	800015c <LiquidCrystal>
 char caracteres[3];
  RTC_TimeTypeDef sTime = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2100      	movs	r1, #0
 80008a6:	460a      	mov	r2, r1
 80008a8:	801a      	strh	r2, [r3, #0]
 80008aa:	460a      	mov	r2, r1
 80008ac:	709a      	strb	r2, [r3, #2]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80008ae:	463b      	mov	r3, r7
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	4854      	ldr	r0, [pc, #336]	; (8000a08 <main+0x198>)
 80008b6:	f001 fbf3 	bl	80020a0 <HAL_RTC_GetTime>
  caracteres[0] = (char)((sTime.Hours >> 4) + 48);	// Conversão de número para ASCII é só somar 48
 80008ba:	783b      	ldrb	r3, [r7, #0]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3330      	adds	r3, #48	; 0x30
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	713b      	strb	r3, [r7, #4]
  caracteres[1] = (char)((sTime.Hours & 0x0F) + 48);
 80008c6:	783b      	ldrb	r3, [r7, #0]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	717b      	strb	r3, [r7, #5]
  caracteres[2] = '\0';
 80008d4:	2300      	movs	r3, #0
 80008d6:	71bb      	strb	r3, [r7, #6]
  print(caracteres);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fec4 	bl	8000668 <print>
  print("h");
 80008e0:	484a      	ldr	r0, [pc, #296]	; (8000a0c <main+0x19c>)
 80008e2:	f7ff fec1 	bl	8000668 <print>

  caracteres[0] = (char) ((sTime.Minutes >> 4) + 48);
 80008e6:	787b      	ldrb	r3, [r7, #1]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	3330      	adds	r3, #48	; 0x30
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	713b      	strb	r3, [r7, #4]
  caracteres[1] = (char) ((sTime.Minutes & 0x0F) + 48);
 80008f2:	787b      	ldrb	r3, [r7, #1]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3330      	adds	r3, #48	; 0x30
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	717b      	strb	r3, [r7, #5]
  caracteres[2] = '\0';
 8000900:	2300      	movs	r3, #0
 8000902:	71bb      	strb	r3, [r7, #6]
  print(caracteres);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feae 	bl	8000668 <print>
  print("min");
 800090c:	4840      	ldr	r0, [pc, #256]	; (8000a10 <main+0x1a0>)
 800090e:	f7ff feab 	bl	8000668 <print>

  caracteres[0] = (char) ((sTime.Seconds >> 4) + 48);
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	091b      	lsrs	r3, r3, #4
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3330      	adds	r3, #48	; 0x30
 800091a:	b2db      	uxtb	r3, r3
 800091c:	713b      	strb	r3, [r7, #4]
  caracteres[1] = (char) ((sTime.Seconds & 0x0F) + 48);
 800091e:	78bb      	ldrb	r3, [r7, #2]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3330      	adds	r3, #48	; 0x30
 8000928:	b2db      	uxtb	r3, r3
 800092a:	717b      	strb	r3, [r7, #5]
  caracteres[2] = '\0';
 800092c:	2300      	movs	r3, #0
 800092e:	71bb      	strb	r3, [r7, #6]
  print(caracteres);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe98 	bl	8000668 <print>
  print("s");
 8000938:	4836      	ldr	r0, [pc, #216]	; (8000a14 <main+0x1a4>)
 800093a:	f7ff fe95 	bl	8000668 <print>
  setCursor(0, 1);
 800093e:	2101      	movs	r1, #1
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe49 	bl	80005d8 <setCursor>
  print("Bom Dia Gurizada");
 8000946:	4834      	ldr	r0, [pc, #208]	; (8000a18 <main+0x1a8>)
 8000948:	f7ff fe8e 	bl	8000668 <print>
  HAL_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 fa54 	bl	8000dfc <HAL_Delay>
  setCursor(0, 1);
 8000954:	2101      	movs	r1, #1
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fe3e 	bl	80005d8 <setCursor>
  print("                ");
 800095c:	482f      	ldr	r0, [pc, #188]	; (8000a1c <main+0x1ac>)
 800095e:	f7ff fe83 	bl	8000668 <print>
  HAL_Delay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 fa49 	bl	8000dfc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800096a:	463b      	mov	r3, r7
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	4825      	ldr	r0, [pc, #148]	; (8000a08 <main+0x198>)
 8000972:	f001 fb95 	bl	80020a0 <HAL_RTC_GetTime>
	    caracteres[0] = (char)((sTime.Hours >> 4) + 48);	// Conversão de número para ASCII é só somar 48
 8000976:	783b      	ldrb	r3, [r7, #0]
 8000978:	091b      	lsrs	r3, r3, #4
 800097a:	b2db      	uxtb	r3, r3
 800097c:	3330      	adds	r3, #48	; 0x30
 800097e:	b2db      	uxtb	r3, r3
 8000980:	713b      	strb	r3, [r7, #4]
	    caracteres[1] = (char)((sTime.Hours & 0x0F) + 48);
 8000982:	783b      	ldrb	r3, [r7, #0]
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3330      	adds	r3, #48	; 0x30
 800098c:	b2db      	uxtb	r3, r3
 800098e:	717b      	strb	r3, [r7, #5]
	    caracteres[2] = '\0';
 8000990:	2300      	movs	r3, #0
 8000992:	71bb      	strb	r3, [r7, #6]
	    setCursor(0, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fe1e 	bl	80005d8 <setCursor>
	    print(caracteres);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe62 	bl	8000668 <print>
	    print("h");
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x19c>)
 80009a6:	f7ff fe5f 	bl	8000668 <print>

	    caracteres[0] = (char) ((sTime.Minutes >> 4) + 48);
 80009aa:	787b      	ldrb	r3, [r7, #1]
 80009ac:	091b      	lsrs	r3, r3, #4
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	3330      	adds	r3, #48	; 0x30
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	713b      	strb	r3, [r7, #4]
	    caracteres[1] = (char) ((sTime.Minutes & 0x0F) + 48);
 80009b6:	787b      	ldrb	r3, [r7, #1]
 80009b8:	f003 030f 	and.w	r3, r3, #15
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3330      	adds	r3, #48	; 0x30
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	717b      	strb	r3, [r7, #5]
	    caracteres[2] = '\0';
 80009c4:	2300      	movs	r3, #0
 80009c6:	71bb      	strb	r3, [r7, #6]
	    print(caracteres);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe4c 	bl	8000668 <print>
	    print("min");
 80009d0:	480f      	ldr	r0, [pc, #60]	; (8000a10 <main+0x1a0>)
 80009d2:	f7ff fe49 	bl	8000668 <print>

	    caracteres[0] = (char) ((sTime.Seconds >> 4) + 48);
 80009d6:	78bb      	ldrb	r3, [r7, #2]
 80009d8:	091b      	lsrs	r3, r3, #4
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3330      	adds	r3, #48	; 0x30
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	713b      	strb	r3, [r7, #4]
	    caracteres[1] = (char) ((sTime.Seconds & 0x0F) + 48);
 80009e2:	78bb      	ldrb	r3, [r7, #2]
 80009e4:	f003 030f 	and.w	r3, r3, #15
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	3330      	adds	r3, #48	; 0x30
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	717b      	strb	r3, [r7, #5]
	    caracteres[2] = '\0';
 80009f0:	2300      	movs	r3, #0
 80009f2:	71bb      	strb	r3, [r7, #6]
	    print(caracteres);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe36 	bl	8000668 <print>
	    print("s");
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <main+0x1a4>)
 80009fe:	f7ff fe33 	bl	8000668 <print>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000a02:	e7b2      	b.n	800096a <main+0xfa>
 8000a04:	40010800 	.word	0x40010800
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	08002970 	.word	0x08002970
 8000a10:	08002974 	.word	0x08002974
 8000a14:	08002978 	.word	0x08002978
 8000a18:	0800297c 	.word	0x0800297c
 8000a1c:	08002990 	.word	0x08002990

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 ff8a 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a50:	230a      	movs	r3, #10
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fc6f 	bl	800134c <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a74:	f000 f8b0 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fedc 	bl	8001850 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a9e:	f000 f89b 	bl	8000bd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f852 	bl	8001b58 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aba:	f000 f88d 	bl	8000bd8 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	; 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <MX_RTC_Init+0x90>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000af6:	f001 f9a5 	bl	8001e44 <HAL_RTC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000b00:	f000 f86a 	bl	8000bd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8000b04:	2321      	movs	r3, #33	; 0x21
 8000b06:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x17;
 8000b08:	2317      	movs	r3, #23
 8000b0a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x55;
 8000b0c:	2355      	movs	r3, #85	; 0x55
 8000b0e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2201      	movs	r2, #1
 8000b14:	4619      	mov	r1, r3
 8000b16:	480f      	ldr	r0, [pc, #60]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000b18:	f001 fa2a 	bl	8001f70 <HAL_RTC_SetTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000b22:	f000 f859 	bl	8000bd8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b26:	2301      	movs	r3, #1
 8000b28:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_RTC_Init+0x8c>)
 8000b3e:	f001 fb87 	bl	8002250 <HAL_RTC_SetDate>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000b48:	f000 f846 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000050 	.word	0x20000050
 8000b58:	40002800 	.word	0x40002800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0x74>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <MX_GPIO_Init+0x74>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0x74>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	21fe      	movs	r1, #254	; 0xfe
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b8e:	f000 fbb9 	bl	8001304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000b92:	23fe      	movs	r3, #254	; 0xfe
 8000b94:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000baa:	f000 fa2f 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000bc4:	f000 fa22 	bl	800100c <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HAL_RTC_MspInit+0x3c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d110      	bne.n	8000c7c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c5a:	f000 fb6b 	bl	8001334 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_RTC_MspInit+0x40>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_RTC_MspInit+0x40>)
 8000c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_RTC_MspInit+0x40>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_RTC_MspInit+0x44>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40002800 	.word	0x40002800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	4242043c 	.word	0x4242043c

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f875 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d12:	f7ff ffe4 	bl	8000cde <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f001 fdf3 	bl	8002900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fda9 	bl	8000870 <main>
  bx lr
 8000d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d28:	080029e4 	.word	0x080029e4
  ldr r2, =_sbss
 8000d2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d30:	20000068 	.word	0x20000068

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f92b 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff ff46 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f935 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f90b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000064 	.word	0x20000064

08000de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000064 	.word	0x20000064

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff90 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff49 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff5e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff90 	bl	8000efc <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5f 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffb0 	bl	8000f60 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e161      	b.n	80012e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001020:	2201      	movs	r2, #1
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8150 	bne.w	80012de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a97      	ldr	r2, [pc, #604]	; (80012a0 <HAL_GPIO_Init+0x294>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d05e      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001048:	4a95      	ldr	r2, [pc, #596]	; (80012a0 <HAL_GPIO_Init+0x294>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d875      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800104e:	4a95      	ldr	r2, [pc, #596]	; (80012a4 <HAL_GPIO_Init+0x298>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d058      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001054:	4a93      	ldr	r2, [pc, #588]	; (80012a4 <HAL_GPIO_Init+0x298>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d86f      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800105a:	4a93      	ldr	r2, [pc, #588]	; (80012a8 <HAL_GPIO_Init+0x29c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d052      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001060:	4a91      	ldr	r2, [pc, #580]	; (80012a8 <HAL_GPIO_Init+0x29c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d869      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001066:	4a91      	ldr	r2, [pc, #580]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d04c      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 800106c:	4a8f      	ldr	r2, [pc, #572]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d863      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001072:	4a8f      	ldr	r2, [pc, #572]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d046      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001078:	4a8d      	ldr	r2, [pc, #564]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d85d      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d82a      	bhi.n	80010d8 <HAL_GPIO_Init+0xcc>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d859      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_GPIO_Init+0x80>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	08001107 	.word	0x08001107
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010f3 	.word	0x080010f3
 8001098:	08001135 	.word	0x08001135
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800113b 	.word	0x0800113b
 80010a4:	0800113b 	.word	0x0800113b
 80010a8:	0800113b 	.word	0x0800113b
 80010ac:	0800113b 	.word	0x0800113b
 80010b0:	0800113b 	.word	0x0800113b
 80010b4:	0800113b 	.word	0x0800113b
 80010b8:	0800113b 	.word	0x0800113b
 80010bc:	0800113b 	.word	0x0800113b
 80010c0:	0800113b 	.word	0x0800113b
 80010c4:	0800113b 	.word	0x0800113b
 80010c8:	0800113b 	.word	0x0800113b
 80010cc:	0800113b 	.word	0x0800113b
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010fd 	.word	0x080010fd
 80010d8:	4a76      	ldr	r2, [pc, #472]	; (80012b4 <HAL_GPIO_Init+0x2a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010de:	e02c      	b.n	800113a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e029      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e024      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	3308      	adds	r3, #8
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e01f      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	330c      	adds	r3, #12
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e01a      	b.n	800113c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110e:	2304      	movs	r3, #4
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e013      	b.n	800113c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]
          break;
 8001126:	e009      	b.n	800113c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	615a      	str	r2, [r3, #20]
          break;
 8001132:	e003      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x130>
          break;
 800113a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d801      	bhi.n	8001146 <HAL_GPIO_Init+0x13a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	e001      	b.n	800114a <HAL_GPIO_Init+0x13e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d802      	bhi.n	8001158 <HAL_GPIO_Init+0x14c>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x152>
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3b08      	subs	r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	210f      	movs	r1, #15
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	6a39      	ldr	r1, [r7, #32]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a9 	beq.w	80012de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a49      	ldr	r2, [pc, #292]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_GPIO_Init+0x2b4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1e0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x2bc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1d8>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011ec:	2300      	movs	r3, #0
 80011ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fe:	492f      	ldr	r1, [pc, #188]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	492b      	ldr	r1, [pc, #172]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	43db      	mvns	r3, r3
 800122e:	4927      	ldr	r1, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001230:	4013      	ands	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4921      	ldr	r1, [pc, #132]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	491d      	ldr	r1, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	4917      	ldr	r1, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	4913      	ldr	r1, [pc, #76]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001280:	4013      	ands	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01f      	beq.n	80012d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	490d      	ldr	r1, [pc, #52]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
 800129c:	e01f      	b.n	80012de <HAL_GPIO_Init+0x2d2>
 800129e:	bf00      	nop
 80012a0:	10320000 	.word	0x10320000
 80012a4:	10310000 	.word	0x10310000
 80012a8:	10220000 	.word	0x10220000
 80012ac:	10210000 	.word	0x10210000
 80012b0:	10120000 	.word	0x10120000
 80012b4:	10110000 	.word	0x10110000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40010c00 	.word	0x40010c00
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_GPIO_Init+0x2f4>)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4909      	ldr	r1, [pc, #36]	; (8001300 <HAL_GPIO_Init+0x2f4>)
 80012da:	4013      	ands	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f ae96 	bne.w	8001020 <HAL_GPIO_Init+0x14>
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	372c      	adds	r7, #44	; 0x2c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_PWR_EnableBkUpAccess+0x14>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	420e0020 	.word	0x420e0020

0800134c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e272      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8087 	beq.w	800147a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800136c:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00c      	beq.n	8001392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001378:	4b8f      	ldr	r3, [pc, #572]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d112      	bne.n	80013aa <HAL_RCC_OscConfig+0x5e>
 8001384:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d10b      	bne.n	80013aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d06c      	beq.n	8001478 <HAL_RCC_OscConfig+0x12c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d168      	bne.n	8001478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e24c      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x76>
 80013b4:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a7f      	ldr	r2, [pc, #508]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e02e      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e01d      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0xbc>
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a71      	ldr	r2, [pc, #452]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6e      	ldr	r2, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800140e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a67      	ldr	r2, [pc, #412]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d013      	beq.n	8001450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fcde 	bl	8000de8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcda 	bl	8000de8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e200      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0xe4>
 800144e:	e014      	b.n	800147a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fcca 	bl	8000de8 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fcc6 	bl	8000de8 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1ec      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x10c>
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d063      	beq.n	800154e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d11c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x18c>
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d116      	bne.n	80014d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x176>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e1c0      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4939      	ldr	r1, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	e03a      	b.n	800154e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_RCC_OscConfig+0x270>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc7f 	bl	8000de8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc7b 	bl	8000de8 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1a1      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x270>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc5e 	bl	8000de8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fc5a 	bl	8000de8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e180      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03a      	beq.n	80015d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_RCC_OscConfig+0x274>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fc3e 	bl	8000de8 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fc3a 	bl	8000de8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e160      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fac4 	bl	8001b1c <RCC_Delay>
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x274>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fc24 	bl	8000de8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a2:	e00f      	b.n	80015c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc20 	bl	8000de8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d908      	bls.n	80015c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e146      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	42420000 	.word	0x42420000
 80015c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	4b92      	ldr	r3, [pc, #584]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e9      	bne.n	80015a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a6 	beq.w	800172a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a87      	ldr	r2, [pc, #540]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b85      	ldr	r3, [pc, #532]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x4c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x4c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7e      	ldr	r2, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x4c8>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbe1 	bl	8000de8 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fbdd 	bl	8000de8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e103      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b75      	ldr	r3, [pc, #468]	; (8001814 <HAL_RCC_OscConfig+0x4c8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x312>
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e02d      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x334>
 8001666:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a69      	ldr	r2, [pc, #420]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a66      	ldr	r2, [pc, #408]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	e01c      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d10c      	bne.n	80016a2 <HAL_RCC_OscConfig+0x356>
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a5d      	ldr	r2, [pc, #372]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e00b      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 80016a2:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a57      	ldr	r2, [pc, #348]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d015      	beq.n	80016ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb91 	bl	8000de8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fb8d 	bl	8000de8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0b1      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ee      	beq.n	80016ca <HAL_RCC_OscConfig+0x37e>
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb7b 	bl	8000de8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fb77 	bl	8000de8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e09b      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d105      	bne.n	800172a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a3b      	ldr	r2, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8087 	beq.w	8001842 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d061      	beq.n	8001804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d146      	bne.n	80017d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <HAL_RCC_OscConfig+0x4cc>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb4b 	bl	8000de8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb47 	bl	8000de8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e06d      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4921      	ldr	r1, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a19      	ldr	r1, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	430b      	orrs	r3, r1
 80017a2:	491b      	ldr	r1, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb1b 	bl	8000de8 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb17 	bl	8000de8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e03d      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x46a>
 80017d4:	e035      	b.n	8001842 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_RCC_OscConfig+0x4cc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb04 	bl	8000de8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb00 	bl	8000de8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e026      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x498>
 8001802:	e01e      	b.n	8001842 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e019      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
 8001818:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x500>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	429a      	cmp	r2, r3
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d040      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e073      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa52 	bl	8000de8 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa4e 	bl	8000de8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d210      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1cc>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1d0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9b0 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	080029c4 	.word	0x080029c4
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a2c:	1d3c      	adds	r4, r7, #4
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a34:	f240 2301 	movw	r3, #513	; 0x201
 8001a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x46>
 8001a62:	e02b      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	e02b      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3328      	adds	r3, #40	; 0x28
 8001a74:	443b      	add	r3, r7
 8001a76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d012      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c5b      	lsrs	r3, r3, #17
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	3328      	adds	r3, #40	; 0x28
 8001a92:	443b      	add	r3, r7
 8001a94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a9e:	fb03 f202 	mul.w	r2, r3, r2
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	e004      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	623b      	str	r3, [r7, #32]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001abe:	623b      	str	r3, [r7, #32]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc90      	pop	{r4, r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	080029a4 	.word	0x080029a4
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	007a1200 	.word	0x007a1200
 8001adc:	003d0900 	.word	0x003d0900

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af8:	f7ff fff2 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	080029d4 	.word	0x080029d4

08001b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <RCC_Delay+0x34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <RCC_Delay+0x38>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b38:	bf00      	nop
  }
  while (Delay --);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	60fa      	str	r2, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <RCC_Delay+0x1c>
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000004 	.word	0x20000004
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d07d      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b78:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	61d3      	str	r3, [r2, #28]
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d118      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f916 	bl	8000de8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7ff f912 	bl	8000de8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e06d      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d02e      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d027      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d014      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f8e1 	bl	8000de8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f8dd 	bl	8000de8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e036      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ee      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4917      	ldr	r1, [pc, #92]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420440 	.word	0x42420440

08001cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08d      	sub	sp, #52	; 0x34
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001cce:	f107 040c 	add.w	r4, r7, #12
 8001cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cd8:	f240 2301 	movw	r3, #513	; 0x201
 8001cdc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d00a      	beq.n	8001d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	f200 808e 	bhi.w	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d049      	beq.n	8001d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d079      	beq.n	8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d0c:	e086      	b.n	8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d14:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d07f      	beq.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	3330      	adds	r3, #48	; 0x30
 8001d2a:	443b      	add	r3, r7
 8001d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d30:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	0c5b      	lsrs	r3, r3, #17
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	3330      	adds	r3, #48	; 0x30
 8001d48:	443b      	add	r3, r7
 8001d4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6a:	e004      	b.n	8001d76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d102      	bne.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d88:	e04a      	b.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d98:	e042      	b.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001daa:	d108      	bne.n	8001dbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbc:	e01f      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc8:	d109      	bne.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001dd6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ddc:	e00f      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001df6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dfc:	e012      	b.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001dfe:	e011      	b.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e00:	f7ff fe78 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	0b9b      	lsrs	r3, r3, #14
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	3301      	adds	r3, #1
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e1a:	e004      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001e24:	bf00      	nop
    }
  }
  return (frequency);
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3734      	adds	r7, #52	; 0x34
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	080029b4 	.word	0x080029b4
 8001e34:	40021000 	.word	0x40021000
 8001e38:	007a1200 	.word	0x007a1200
 8001e3c:	003d0900 	.word	0x003d0900
 8001e40:	aaaaaaab 	.word	0xaaaaaaab

08001e44 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e084      	b.n	8001f64 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7c5b      	ldrb	r3, [r3, #17]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe feec 	bl	8000c48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 faa0 	bl	80023bc <HAL_RTC_WaitForSynchro>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e06b      	b.n	8001f64 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb59 	bl	8002544 <RTC_EnterInitMode>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e060      	b.n	8001f64 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0207 	bic.w	r2, r2, #7
 8001eb0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RTC_Init+0x128>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_RTC_Init+0x128>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RTC_Init+0x128>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4926      	ldr	r1, [pc, #152]	; (8001f6c <HAL_RTC_Init+0x128>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d003      	beq.n	8001eea <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e00e      	b.n	8001f08 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff feea 	bl	8001cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ef0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e030      	b.n	8001f64 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 010f 	bic.w	r1, r3, #15
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c1a      	lsrs	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	b291      	uxth	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb2d 	bl	8002594 <RTC_ExitInitMode>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2204      	movs	r2, #4
 8001f44:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00c      	b.n	8001f64 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40006c00 	.word	0x40006c00

08001f70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RTC_SetTime+0x20>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e080      	b.n	8002096 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	7c1b      	ldrb	r3, [r3, #16]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RTC_SetTime+0x30>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e07a      	b.n	8002096 <HAL_RTC_SetTime+0x126>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d113      	bne.n	8001fda <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001fbc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fd4:	4413      	add	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e01e      	b.n	8002018 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fb1d 	bl	800261e <RTC_Bcd2ToByte>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001fec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fb12 	bl	800261e <RTC_Bcd2ToByte>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4613      	mov	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002006:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fb06 	bl	800261e <RTC_Bcd2ToByte>
 8002012:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002014:	4423      	add	r3, r4
 8002016:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002018:	6979      	ldr	r1, [r7, #20]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa2b 	bl	8002476 <RTC_WriteTimeCounter>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2204      	movs	r2, #4
 800202a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e02f      	b.n	8002096 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0205 	bic.w	r2, r2, #5
 8002044:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa3c 	bl	80024c4 <RTC_ReadAlarmCounter>
 800204c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d018      	beq.n	8002088 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	429a      	cmp	r2, r3
 800205c:	d214      	bcs.n	8002088 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002064:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002068:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fa42 	bl	80024f6 <RTC_WriteAlarmCounter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2204      	movs	r2, #4
 800207c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e006      	b.n	8002096 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
	...

080020a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_RTC_GetTime+0x28>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b5      	b.n	8002238 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0ac      	b.n	8002238 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f999 	bl	8002416 <RTC_ReadTimeCounter>
 80020e4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4a55      	ldr	r2, [pc, #340]	; (8002240 <HAL_RTC_GetTime+0x1a0>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0adb      	lsrs	r3, r3, #11
 80020f0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_RTC_GetTime+0x1a0>)
 80020f6:	fba3 1302 	umull	r1, r3, r3, r2
 80020fa:	0adb      	lsrs	r3, r3, #11
 80020fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_RTC_GetTime+0x1a4>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <HAL_RTC_GetTime+0x1a0>)
 8002118:	fba2 1203 	umull	r1, r2, r2, r3
 800211c:	0ad2      	lsrs	r2, r2, #11
 800211e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002122:	fb01 f202 	mul.w	r2, r1, r2
 8002126:	1a9a      	subs	r2, r3, r2
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RTC_GetTime+0x1a4>)
 800212a:	fba3 1302 	umull	r1, r3, r3, r2
 800212e:	0959      	lsrs	r1, r3, #5
 8002130:	460b      	mov	r3, r1
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a5b      	subs	r3, r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	1ad1      	subs	r1, r2, r3
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b17      	cmp	r3, #23
 8002144:	d955      	bls.n	80021f2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4a3f      	ldr	r2, [pc, #252]	; (8002248 <HAL_RTC_GetTime+0x1a8>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002152:	6939      	ldr	r1, [r7, #16]
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RTC_GetTime+0x1a8>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	091a      	lsrs	r2, r3, #4
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1aca      	subs	r2, r1, r3
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f9a9 	bl	80024c4 <RTC_ReadAlarmCounter>
 8002172:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d008      	beq.n	800218e <HAL_RTC_GetTime+0xee>
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d904      	bls.n	800218e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	e002      	b.n	8002194 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4a2d      	ldr	r2, [pc, #180]	; (800224c <HAL_RTC_GetTime+0x1ac>)
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f966 	bl	8002476 <RTC_WriteTimeCounter>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e041      	b.n	8002238 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d00c      	beq.n	80021d6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021c4:	69f9      	ldr	r1, [r7, #28]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f995 	bl	80024f6 <RTC_WriteAlarmCounter>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e030      	b.n	8002238 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021d6:	69f9      	ldr	r1, [r7, #28]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f98c 	bl	80024f6 <RTC_WriteAlarmCounter>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e027      	b.n	8002238 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa34 	bl	8002658 <RTC_DateUpdate>
 80021f0:	e003      	b.n	80021fa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01a      	beq.n	8002236 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f9ed 	bl	80025e4 <RTC_ByteToBcd2>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f9e4 	bl	80025e4 <RTC_ByteToBcd2>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f9db 	bl	80025e4 <RTC_ByteToBcd2>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	91a2b3c5 	.word	0x91a2b3c5
 8002244:	88888889 	.word	0x88888889
 8002248:	aaaaaaab 	.word	0xaaaaaaab
 800224c:	00015180 	.word	0x00015180

08002250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_RTC_SetDate+0x24>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e097      	b.n	80023a8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	7c1b      	ldrb	r3, [r3, #16]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_RTC_SetDate+0x34>
 8002280:	2302      	movs	r3, #2
 8002282:	e091      	b.n	80023a8 <HAL_RTC_SetDate+0x158>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2202      	movs	r2, #2
 800228e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	78da      	ldrb	r2, [r3, #3]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	785a      	ldrb	r2, [r3, #1]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	789a      	ldrb	r2, [r3, #2]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	739a      	strb	r2, [r3, #14]
 80022ae:	e01a      	b.n	80022e6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	78db      	ldrb	r3, [r3, #3]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f9b2 	bl	800261e <RTC_Bcd2ToByte>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f9a9 	bl	800261e <RTC_Bcd2ToByte>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	789b      	ldrb	r3, [r3, #2]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f9a0 	bl	800261e <RTC_Bcd2ToByte>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	7bdb      	ldrb	r3, [r3, #15]
 80022ea:	4618      	mov	r0, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	7b59      	ldrb	r1, [r3, #13]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	7b9b      	ldrb	r3, [r3, #14]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f000 fa8b 	bl	8002810 <RTC_WeekDayNum>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	7b1a      	ldrb	r2, [r3, #12]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f883 	bl	8002416 <RTC_ReadTimeCounter>
 8002310:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_RTC_SetDate+0x160>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b18      	cmp	r3, #24
 8002322:	d93a      	bls.n	800239a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <HAL_RTC_SetDate+0x164>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_RTC_SetDate+0x168>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800233a:	69f9      	ldr	r1, [r7, #28]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f89a 	bl	8002476 <RTC_WriteTimeCounter>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2204      	movs	r2, #4
 800234c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e027      	b.n	80023a8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8b3 	bl	80024c4 <RTC_ReadAlarmCounter>
 800235e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d018      	beq.n	800239a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	429a      	cmp	r2, r3
 800236e:	d214      	bcs.n	800239a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002376:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800237a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8b9 	bl	80024f6 <RTC_WriteAlarmCounter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2204      	movs	r2, #4
 800238e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e006      	b.n	80023a8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	91a2b3c5 	.word	0x91a2b3c5
 80023b4:	aaaaaaab 	.word	0xaaaaaaab
 80023b8:	00015180 	.word	0x00015180

080023bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e01d      	b.n	800240e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80023e2:	f7fe fd01 	bl	8000de8 <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80023e8:	e009      	b.n	80023fe <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023ea:	f7fe fcfd 	bl	8000de8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f8:	d901      	bls.n	80023fe <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e007      	b.n	800240e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ee      	beq.n	80023ea <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	827b      	strh	r3, [r7, #18]
 8002422:	2300      	movs	r3, #0
 8002424:	823b      	strh	r3, [r7, #16]
 8002426:	2300      	movs	r3, #0
 8002428:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002446:	8a7a      	ldrh	r2, [r7, #18]
 8002448:	8a3b      	ldrh	r3, [r7, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d008      	beq.n	8002460 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800244e:	8a3b      	ldrh	r3, [r7, #16]
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	b29b      	uxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e004      	b.n	800246a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002460:	8a7b      	ldrh	r3, [r7, #18]
 8002462:	041a      	lsls	r2, r3, #16
 8002464:	89fb      	ldrh	r3, [r7, #14]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800246a:	697b      	ldr	r3, [r7, #20]
}
 800246c:	4618      	mov	r0, r3
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f85d 	bl	8002544 <RTC_EnterInitMode>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e011      	b.n	80024ba <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	0c12      	lsrs	r2, r2, #16
 800249e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b292      	uxth	r2, r2
 80024a8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f872 	bl	8002594 <RTC_ExitInitMode>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	81fb      	strh	r3, [r7, #14]
 80024d0:	2300      	movs	r3, #0
 80024d2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	041a      	lsls	r2, r3, #16
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f81d 	bl	8002544 <RTC_EnterInitMode>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e011      	b.n	800253a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	0c12      	lsrs	r2, r2, #16
 800251e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	b292      	uxth	r2, r2
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f832 	bl	8002594 <RTC_ExitInitMode>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002550:	f7fe fc4a 	bl	8000de8 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002556:	e009      	b.n	800256c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002558:	f7fe fc46 	bl	8000de8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002566:	d901      	bls.n	800256c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e00f      	b.n	800258c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ee      	beq.n	8002558 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0210 	orr.w	r2, r2, #16
 8002588:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80025b0:	f7fe fc1a 	bl	8000de8 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025b6:	e009      	b.n	80025cc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025b8:	f7fe fc16 	bl	8000de8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c6:	d901      	bls.n	80025cc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e007      	b.n	80025dc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ee      	beq.n	80025b8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80025f2:	e005      	b.n	8002600 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	3b0a      	subs	r3, #10
 80025fe:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d8f6      	bhi.n	80025f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	b2da      	uxtb	r2, r3
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	4313      	orrs	r3, r2
 8002612:	b2db      	uxtb	r3, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4413      	add	r3, r2
 800264c:	b2db      	uxtb	r3, r3
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7bdb      	ldrb	r3, [r3, #15]
 8002676:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7b5b      	ldrb	r3, [r3, #13]
 800267c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7b9b      	ldrb	r3, [r3, #14]
 8002682:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	e06f      	b.n	800276a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d011      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d00e      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d00b      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b07      	cmp	r3, #7
 80026a0:	d008      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d005      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d002      	beq.n	80026b4 <RTC_DateUpdate+0x5c>
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b0c      	cmp	r3, #12
 80026b2:	d117      	bne.n	80026e4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b1e      	cmp	r3, #30
 80026b8:	d803      	bhi.n	80026c2 <RTC_DateUpdate+0x6a>
      {
        day++;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3301      	adds	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80026c0:	e050      	b.n	8002764 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d005      	beq.n	80026d4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	3301      	adds	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80026ce:	2301      	movs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80026d2:	e047      	b.n	8002764 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80026d8:	2301      	movs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
          year++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80026e2:	e03f      	b.n	8002764 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d008      	beq.n	80026fc <RTC_DateUpdate+0xa4>
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d005      	beq.n	80026fc <RTC_DateUpdate+0xa4>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	d002      	beq.n	80026fc <RTC_DateUpdate+0xa4>
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b0b      	cmp	r3, #11
 80026fa:	d10c      	bne.n	8002716 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b1d      	cmp	r3, #29
 8002700:	d803      	bhi.n	800270a <RTC_DateUpdate+0xb2>
      {
        day++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002708:	e02c      	b.n	8002764 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	3301      	adds	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002710:	2301      	movs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002714:	e026      	b.n	8002764 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b1b      	cmp	r3, #27
 8002720:	d803      	bhi.n	800272a <RTC_DateUpdate+0xd2>
      {
        day++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3301      	adds	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e01c      	b.n	8002764 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b1c      	cmp	r3, #28
 800272e:	d111      	bne.n	8002754 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f839 	bl	80027ac <RTC_IsLeapYear>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e00d      	b.n	8002764 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3301      	adds	r3, #1
 800274c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800274e:	2301      	movs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e007      	b.n	8002764 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b1d      	cmp	r3, #29
 8002758:	d104      	bne.n	8002764 <RTC_DateUpdate+0x10c>
      {
        month++;
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	3301      	adds	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002760:	2301      	movs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3301      	adds	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d38b      	bcc.n	800268a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f000 f83b 	bl	8002810 <RTC_WeekDayNum>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	731a      	strb	r2, [r3, #12]
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e01d      	b.n	8002802 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4a10      	ldr	r2, [pc, #64]	; (800280c <RTC_IsLeapYear+0x60>)
 80027ca:	fba2 1203 	umull	r1, r2, r2, r3
 80027ce:	0952      	lsrs	r2, r2, #5
 80027d0:	2164      	movs	r1, #100	; 0x64
 80027d2:	fb01 f202 	mul.w	r2, r1, r2
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00f      	b.n	8002802 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <RTC_IsLeapYear+0x60>)
 80027e6:	fba2 1203 	umull	r1, r2, r2, r3
 80027ea:	09d2      	lsrs	r2, r2, #7
 80027ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80027f0:	fb01 f202 	mul.w	r2, r1, r2
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002800:	2300      	movs	r3, #0
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
 800281c:	4613      	mov	r3, r2
 800281e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800282e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d82d      	bhi.n	8002892 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <RTC_WeekDayNum+0xe4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	085a      	lsrs	r2, r3, #1
 800284a:	78bb      	ldrb	r3, [r7, #2]
 800284c:	441a      	add	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	441a      	add	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	4926      	ldr	r1, [pc, #152]	; (80028f8 <RTC_WeekDayNum+0xe8>)
 8002860:	fba1 1303 	umull	r1, r3, r1, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3b01      	subs	r3, #1
 800286c:	4922      	ldr	r1, [pc, #136]	; (80028f8 <RTC_WeekDayNum+0xe8>)
 800286e:	fba1 1303 	umull	r1, r3, r1, r3
 8002872:	09db      	lsrs	r3, r3, #7
 8002874:	4413      	add	r3, r2
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <RTC_WeekDayNum+0xec>)
 800287a:	fba3 1302 	umull	r1, r3, r3, r2
 800287e:	1ad1      	subs	r1, r2, r3
 8002880:	0849      	lsrs	r1, r1, #1
 8002882:	440b      	add	r3, r1
 8002884:	0899      	lsrs	r1, r3, #2
 8002886:	460b      	mov	r3, r1
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e029      	b.n	80028e6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <RTC_WeekDayNum+0xe4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	085a      	lsrs	r2, r3, #1
 80028a6:	78bb      	ldrb	r3, [r7, #2]
 80028a8:	441a      	add	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	441a      	add	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	441a      	add	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4910      	ldr	r1, [pc, #64]	; (80028f8 <RTC_WeekDayNum+0xe8>)
 80028b8:	fba1 1303 	umull	r1, r3, r1, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	490d      	ldr	r1, [pc, #52]	; (80028f8 <RTC_WeekDayNum+0xe8>)
 80028c4:	fba1 1303 	umull	r1, r3, r1, r3
 80028c8:	09db      	lsrs	r3, r3, #7
 80028ca:	4413      	add	r3, r2
 80028cc:	1c9a      	adds	r2, r3, #2
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <RTC_WeekDayNum+0xec>)
 80028d0:	fba3 1302 	umull	r1, r3, r3, r2
 80028d4:	1ad1      	subs	r1, r2, r3
 80028d6:	0849      	lsrs	r1, r1, #1
 80028d8:	440b      	add	r3, r1
 80028da:	0899      	lsrs	r1, r3, #2
 80028dc:	460b      	mov	r3, r1
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a5b      	subs	r3, r3, r1
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	38e38e39 	.word	0x38e38e39
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	24924925 	.word	0x24924925

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	2600      	movs	r6, #0
 8002904:	4d0c      	ldr	r5, [pc, #48]	; (8002938 <__libc_init_array+0x38>)
 8002906:	4c0d      	ldr	r4, [pc, #52]	; (800293c <__libc_init_array+0x3c>)
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	f000 f822 	bl	8002958 <_init>
 8002914:	2600      	movs	r6, #0
 8002916:	4d0a      	ldr	r5, [pc, #40]	; (8002940 <__libc_init_array+0x40>)
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <__libc_init_array+0x44>)
 800291a:	1b64      	subs	r4, r4, r5
 800291c:	10a4      	asrs	r4, r4, #2
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	f855 3b04 	ldr.w	r3, [r5], #4
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	080029dc 	.word	0x080029dc
 800293c:	080029dc 	.word	0x080029dc
 8002940:	080029dc 	.word	0x080029dc
 8002944:	080029e0 	.word	0x080029e0

08002948 <memset>:
 8002948:	4603      	mov	r3, r0
 800294a:	4402      	add	r2, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
