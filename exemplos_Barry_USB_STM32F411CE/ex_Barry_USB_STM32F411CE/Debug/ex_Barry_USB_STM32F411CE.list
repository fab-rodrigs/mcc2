
ex_Barry_USB_STM32F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009634  08009634  0000a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009708  08009708  0000b15c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009710  08009710  0000b15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009710  08009710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009714  08009714  0000a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08009718  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d98  2000015c  08009874  0000b15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ef4  08009874  0000bef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f15  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa5  00000000  00000000  000220a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00026048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa6  00000000  00000000  000274f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a76b  00000000  00000000  0002849e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fc3  00000000  00000000  00042c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ca2  00000000  00000000  0005cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f686e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  000f68b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000fc47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800961c 	.word	0x0800961c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800961c 	.word	0x0800961c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <atraso_ms>:
					"r_us:	   subs r0, r0, #1		\n\t"
					"bne  r_us						\n\t");		//2 ciclos gastos quando tomado, 1 contrário
}
//-----------------------------------------------------------------------------------------
 void atraso_ms(uint32_t valor)									//argumento passado pelo registrador r0
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	asm volatile ("movw r1, #:lower16:const_ms		\n\t"
 80005b4:	f643 6180 	movw	r1, #16000	@ 0x3e80
 80005b8:	f2c0 0100 	movt	r1, #0
 80005bc:	fb00 f001 	mul.w	r0, r0, r1

080005c0 <r_ms>:
 80005c0:	3801      	subs	r0, #1
 80005c2:	d1fd      	bne.n	80005c0 <r_ms>
				  "mul  r0, r0, r1					\n\t"		//r0 = valor*(fcpu/3000), cálculo do número de repetições do laço
	
				  "r_ms:	   subs r0, r0, #1		\n\t"
				  "bne  r_ms						\n\t");
	
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000178 	.word	0x20000178
 8000600:	20000218 	.word	0x20000218

08000604 <vTask1>:
xTaskHandle		vTask1_id;
xTaskHandle		vTask2_id;

//--------------------------------------------------------------------------------
static void vTask1(void *pvParameters)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	const char *pcTaskMsg[] = {"Task 1 is running.\n"};
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <vTask1+0x20>)
 800060e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		printf(*pcTaskMsg);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4618      	mov	r0, r3
 8000614:	f008 f938 	bl	8008888 <iprintf>

		atraso_ms(200);
 8000618:	20c8      	movs	r0, #200	@ 0xc8
 800061a:	f7ff ffc7 	bl	80005ac <atraso_ms>
		printf(*pcTaskMsg);
 800061e:	bf00      	nop
 8000620:	e7f6      	b.n	8000610 <vTask1+0xc>
 8000622:	bf00      	nop
 8000624:	08009634 	.word	0x08009634

08000628 <vTask2>:
	}
	vTaskDelete(vTask1_id);   /* Nunca deve chegar aqui! Crash na pilha!? */
}
//--------------------------------------------------------------------------------
static void vTask2(void *pvParameters)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	const char *pcTaskMsg[] = {"Task 2 is running.\n"};
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <vTask2+0x20>)
 8000632:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		printf(*pcTaskMsg);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4618      	mov	r0, r3
 8000638:	f008 f926 	bl	8008888 <iprintf>

		atraso_ms(200);
 800063c:	20c8      	movs	r0, #200	@ 0xc8
 800063e:	f7ff ffb5 	bl	80005ac <atraso_ms>
		printf(*pcTaskMsg);
 8000642:	bf00      	nop
 8000644:	e7f6      	b.n	8000634 <vTask2+0xc>
 8000646:	bf00      	nop
 8000648:	08009648 	.word	0x08009648

0800064c <main>:
	}
	vTaskDelete(vTask2_id);   /* Nunca deve chegar aqui! Crash na pilha!? */
}
//--------------------------------------------------------------------------------
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
  HAL_Init();
 8000652:	f000 fab1 	bl	8000bb8 <HAL_Init>
  SystemClock_Config();
 8000656:	f000 f841 	bl	80006dc <SystemClock_Config>

  MX_GPIO_Init();
 800065a:	f000 f8a7 	bl	80007ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800065e:	f007 fb41 	bl	8007ce4 <MX_USB_DEVICE_Init>

  //RTOS
  xTaskCreate(vTask1, "Task 1", 256, NULL, 1, &vTask1_id);
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <main+0x4c>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000670:	490a      	ldr	r1, [pc, #40]	@ (800069c <main+0x50>)
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <main+0x54>)
 8000674:	f006 fad4 	bl	8006c20 <xTaskCreate>
  xTaskCreate(vTask2, "Task 2", 256, NULL, 1, &vTask2_id);
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <main+0x58>)
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2301      	movs	r3, #1
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000686:	4908      	ldr	r1, [pc, #32]	@ (80006a8 <main+0x5c>)
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <main+0x60>)
 800068a:	f006 fac9 	bl	8006c20 <xTaskCreate>

  vTaskStartScheduler();	// apos este comando o RTOS passa a executar as tarefas
 800068e:	f006 fc17 	bl	8006ec0 <vTaskStartScheduler>

  while(1);
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0x46>
 8000696:	bf00      	nop
 8000698:	20000418 	.word	0x20000418
 800069c:	0800965c 	.word	0x0800965c
 80006a0:	08000605 	.word	0x08000605
 80006a4:	2000041c 	.word	0x2000041c
 80006a8:	08009664 	.word	0x08009664
 80006ac:	08000629 	.word	0x08000629

080006b0 <_write>:

}
//--------------------------------------------------------------------------------
// Redirect printf() to USB Virtual COM Port
int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
    while(CDC_Transmit_FS((uint8_t*) ptr, len)!=0);
 80006bc:	bf00      	nop
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	68b8      	ldr	r0, [r7, #8]
 80006c6:	f007 fbcb 	bl	8007e60 <CDC_Transmit_FS>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f6      	bne.n	80006be <_write+0xe>
    return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 f921 	bl	8008932 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a26      	ldr	r2, [pc, #152]	@ (80007a4 <SystemClock_Config+0xc8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800074c:	2319      	movs	r3, #25
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	@ 0xc0
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 ff61 	bl	8002628 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f882 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2103      	movs	r1, #3
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f9c3 	bl	8002b18 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 f86c 	bl	8000874 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	@ 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x9c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <MX_GPIO_Init+0xa0>)
 800081e:	f000 fc97 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_GPIO_Init+0xa0>)
 800083c:	f000 fb04 	bl	8000e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 f9cb 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40000800 	.word	0x40000800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <HAL_MspInit+0x54>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <HAL_MspInit+0x54>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 fa95 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <HAL_InitTick+0xe4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <HAL_InitTick+0xe4>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <HAL_InitTick+0xe4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f002 face 	bl	8002eb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091e:	f002 fab3 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8000922:	6378      	str	r0, [r7, #52]	@ 0x34
 8000924:	e004      	b.n	8000930 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000926:	f002 faaf 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 800092a:	4603      	mov	r3, r0
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <HAL_InitTick+0xe8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	0c9b      	lsrs	r3, r3, #18
 800093a:	3b01      	subs	r3, #1
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <HAL_InitTick+0xec>)
 8000940:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <HAL_InitTick+0xf0>)
 8000942:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_InitTick+0xec>)
 8000946:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800094a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800094c:	4a1d      	ldr	r2, [pc, #116]	@ (80009c4 <HAL_InitTick+0xec>)
 800094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000950:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_InitTick+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_InitTick+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_InitTick+0xec>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000964:	4817      	ldr	r0, [pc, #92]	@ (80009c4 <HAL_InitTick+0xec>)
 8000966:	f002 fad5 	bl	8002f14 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11b      	bne.n	80009b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <HAL_InitTick+0xec>)
 800097a:	f002 fb25 	bl	8002fc8 <HAL_TIM_Base_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800098c:	201e      	movs	r0, #30
 800098e:	f000 fa4d 	bl	8000e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d808      	bhi.n	80009aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	201e      	movs	r0, #30
 800099e:	f000 fa29 	bl	8000df4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <HAL_InitTick+0xf4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	e002      	b.n	80009b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	@ 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20000420 	.word	0x20000420
 80009c8:	40000800 	.word	0x40000800
 80009cc:	20000004 	.word	0x20000004

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <TIM4_IRQHandler+0x10>)
 8000a0e:	f002 fb3d 	bl	800308c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000420 	.word	0x20000420

08000a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <OTG_FS_IRQHandler+0x10>)
 8000a22:	f000 fcf2 	bl	800140a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200056a4 	.word	0x200056a4

08000a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
  }

  return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a92:	605a      	str	r2, [r3, #4]
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f007 ffc2 	bl	8008a8c <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20020000 	.word	0x20020000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000468 	.word	0x20000468
 8000b3c:	20005ef8 	.word	0x20005ef8

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f007 ff81 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fd59 	bl	800064c <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000ba8:	08009718 	.word	0x08009718
  ldr r2, =_sbss
 8000bac:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000bb0:	20005ef4 	.word	0x20005ef4

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f8fc 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff fe76 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe48 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	2000046c 	.word	0x2000046c

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000046c 	.word	0x2000046c

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff ffee 	bl	8000c24 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffde 	bl	8000c24 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	@ (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e159      	b.n	8001118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8148 	bne.w	8001112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a2 	beq.w	8001112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a56      	ldr	r2, [pc, #344]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a52      	ldr	r2, [pc, #328]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x202>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	@ (800113c <HAL_GPIO_Init+0x2f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x1fe>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a47      	ldr	r2, [pc, #284]	@ (8001140 <HAL_GPIO_Init+0x2f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x1fa>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a46      	ldr	r2, [pc, #280]	@ (8001144 <HAL_GPIO_Init+0x2fc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x1f6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	@ (8001148 <HAL_GPIO_Init+0x300>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x1f2>
 8001036:	2304      	movs	r3, #4
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103a:	2307      	movs	r3, #7
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x204>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a2f      	ldr	r2, [pc, #188]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a24      	ldr	r2, [pc, #144]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f aea2 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af02      	add	r7, sp, #8
 8001188:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e101      	b.n	8001398 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f006 ff9e 	bl	80080f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011c2:	d102      	bne.n	80011ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fa25 	bl	800361e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7c1a      	ldrb	r2, [r3, #16]
 80011dc:	f88d 2000 	strb.w	r2, [sp]
 80011e0:	3304      	adds	r3, #4
 80011e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e4:	f002 f904 	bl	80033f0 <USB_CoreInit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2202      	movs	r2, #2
 80011f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0ce      	b.n	8001398 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fa1d 	bl	8003640 <USB_SetCurrentMode>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0bf      	b.n	8001398 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e04a      	b.n	80012b4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3315      	adds	r3, #21
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3314      	adds	r3, #20
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	b298      	uxth	r0, r3
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	332e      	adds	r3, #46	@ 0x2e
 800125a:	4602      	mov	r2, r0
 800125c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3318      	adds	r3, #24
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	331c      	adds	r3, #28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	3320      	adds	r3, #32
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3301      	adds	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3af      	bcc.n	800121e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e044      	b.n	800134e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3b5      	bcc.n	80012c4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7c1a      	ldrb	r2, [r3, #16]
 8001360:	f88d 2000 	strb.w	r2, [sp]
 8001364:	3304      	adds	r3, #4
 8001366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001368:	f002 f9b6 	bl	80036d8 <USB_DevInit>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2202      	movs	r2, #2
 8001376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00c      	b.n	8001398 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fa00 	bl	8004796 <USB_DevDisconnect>

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_Start+0x1c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e022      	b.n	8001402 <HAL_PCD_Start+0x62>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f907 	bl	80035fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f9ae 	bl	8004754 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b08d      	sub	sp, #52	@ 0x34
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fa6c 	bl	80048fe <USB_GetMode>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 848c 	bne.w	8001d46 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 f9d0 	bl	80047d8 <USB_ReadInterrupts>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8482 	beq.w	8001d44 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f9bd 	bl	80047d8 <USB_ReadInterrupts>
 800145e:	4603      	mov	r3, r0
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b02      	cmp	r3, #2
 8001466:	d107      	bne.n	8001478 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f002 0202 	and.w	r2, r2, #2
 8001476:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f9ab 	bl	80047d8 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b10      	cmp	r3, #16
 800148a:	d161      	bne.n	8001550 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0210 	bic.w	r2, r2, #16
 800149a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 020f 	and.w	r2, r3, #15
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80014c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014c6:	d124      	bne.n	8001512 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d035      	beq.n	8001540 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	6a38      	ldr	r0, [r7, #32]
 80014e8:	f002 ffe2 	bl	80044b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f8:	441a      	add	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150a:	441a      	add	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	e016      	b.n	8001540 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001518:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800151c:	d110      	bne.n	8001540 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	6a38      	ldr	r0, [r7, #32]
 800152a:	f002 ffc1 	bl	80044b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153a:	441a      	add	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0210 	orr.w	r2, r2, #16
 800154e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 f93f 	bl	80047d8 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001560:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001564:	f040 80a7 	bne.w	80016b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f944 	bl	80047fe <USB_ReadDevAllOutEpInterrupt>
 8001576:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001578:	e099      	b.n	80016ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 808e 	beq.w	80016a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f003 f968 	bl	8004866 <USB_ReadDevOutEPInterrupt>
 8001596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	015a      	lsls	r2, r3, #5
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ae:	461a      	mov	r2, r3
 80015b0:	2301      	movs	r3, #1
 80015b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fea4 	bl	8002304 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015d2:	461a      	mov	r2, r3
 80015d4:	2308      	movs	r3, #8
 80015d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ff7a 	bl	80024d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015f6:	461a      	mov	r2, r3
 80015f8:	2310      	movs	r3, #16
 80015fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d030      	beq.n	8001668 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	2b80      	cmp	r3, #128	@ 0x80
 8001610:	d109      	bne.n	8001626 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001620:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001624:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	78db      	ldrb	r3, [r3, #3]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2200      	movs	r2, #0
 8001648:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f006 fe49 	bl	80082e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	015a      	lsls	r2, r3, #5
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001662:	461a      	mov	r2, r3
 8001664:	2302      	movs	r3, #2
 8001666:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	015a      	lsls	r2, r3, #5
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800167e:	461a      	mov	r2, r3
 8001680:	2320      	movs	r3, #32
 8001682:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800169a:	461a      	mov	r2, r3
 800169c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f47f af62 	bne.w	800157a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f88c 	bl	80047d8 <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016ca:	f040 80db 	bne.w	8001884 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f8ad 	bl	8004832 <USB_ReadDevAllInEpInterrupt>
 80016d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016de:	e0cd      	b.n	800187c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80c2 	beq.w	8001870 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 f8d3 	bl	80048a2 <USB_ReadDevInEPInterrupt>
 80016fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d057      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	2201      	movs	r2, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800171c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	69f9      	ldr	r1, [r7, #28]
 8001724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001728:	4013      	ands	r3, r2
 800172a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	799b      	ldrb	r3, [r3, #6]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d132      	bne.n	80017ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3320      	adds	r3, #32
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4403      	add	r3, r0
 8001766:	331c      	adds	r3, #28
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4419      	add	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3320      	adds	r3, #32
 800177c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <HAL_PCD_IRQHandler+0x3a2>
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3324      	adds	r3, #36	@ 0x24
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017a4:	461a      	mov	r2, r3
 80017a6:	2101      	movs	r1, #1
 80017a8:	f003 f8da 	bl	8004960 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f006 fd1d 	bl	80081f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ce:	461a      	mov	r2, r3
 80017d0:	2308      	movs	r3, #8
 80017d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ea:	461a      	mov	r2, r3
 80017ec:	2310      	movs	r3, #16
 80017ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001806:	461a      	mov	r2, r3
 8001808:	2340      	movs	r3, #64	@ 0x40
 800180a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001818:	6a38      	ldr	r0, [r7, #32]
 800181a:	f002 f8c1 	bl	80039a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800181e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	3310      	adds	r3, #16
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	3304      	adds	r3, #4
 8001830:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	78db      	ldrb	r3, [r3, #3]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2200      	movs	r2, #0
 800183e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f006 fd60 	bl	800830c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001858:	461a      	mov	r2, r3
 800185a:	2302      	movs	r3, #2
 800185c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fcbd 	bl	80021ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	3301      	adds	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	2b00      	cmp	r3, #0
 8001880:	f47f af2e 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 ffa5 	bl	80047d8 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001898:	d122      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fea4 	bl	8002610 <HAL_PCDEx_LPM_Callback>
 80018c8:	e002      	b.n	80018d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fcfe 	bl	80082cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 ff77 	bl	80047d8 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f4:	d112      	bne.n	800191c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f006 fcba 	bl	8008280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800191a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f002 ff59 	bl	80047d8 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800192c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001930:	f040 80b7 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2110      	movs	r1, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f826 	bl	80039a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001958:	e046      	b.n	80019e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001966:	461a      	mov	r2, r3
 8001968:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800196c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800196e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800197e:	0151      	lsls	r1, r2, #5
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	440a      	add	r2, r1
 8001984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001988:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800198c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019d2:	0151      	lsls	r1, r2, #5
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	440a      	add	r2, r1
 80019d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e4:	3301      	adds	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	461a      	mov	r2, r3
 80019ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d3b2      	bcc.n	800195a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a02:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7bdb      	ldrb	r3, [r3, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d016      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a20:	f043 030b 	orr.w	r3, r3, #11
 8001a24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a36:	f043 030b 	orr.w	r3, r3, #11
 8001a3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3c:	e015      	b.n	8001a6a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a50:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a64:	f043 030b 	orr.w	r3, r3, #11
 8001a68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a78:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f002 ff67 	bl	8004960 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe96 	bl	80047d8 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ab6:	d123      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 ff2c 	bl	800491a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 ffe3 	bl	8003a92 <USB_GetDevSpeed>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	f001 f9ca 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8001adc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f001 fce7 	bl	80034b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f006 fba9 	bl	8008242 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe67 	bl	80047d8 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d10a      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f006 fb86 	bl	8008226 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 0208 	and.w	r2, r2, #8
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fe52 	bl	80047d8 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3a:	2b80      	cmp	r3, #128	@ 0x80
 8001b3c:	d123      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4e:	e014      	b.n	8001b7a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fb0a 	bl	8002188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3301      	adds	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d3e4      	bcc.n	8001b50 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fe24 	bl	80047d8 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b9a:	d13c      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba0:	e02b      	b.n	8001bfa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d115      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da12      	bge.n	8001bf4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3317      	adds	r3, #23
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 faca 	bl	8002188 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	791b      	ldrb	r3, [r3, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d3cd      	bcc.n	8001ba2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fddc 	bl	80047d8 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c2a:	d156      	bne.n	8001cda <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e045      	b.n	8001cbe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12e      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	da2b      	bge.n	8001cb8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	0c1a      	lsrs	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c6a:	4053      	eors	r3, r2
 8001c6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d121      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb4:	6053      	str	r3, [r2, #4]
            break;
 8001cb6:	e008      	b.n	8001cca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	3301      	adds	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d3b3      	bcc.n	8001c32 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 fd7a 	bl	80047d8 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d10a      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f006 fb1d 	bl	8008330 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 fd64 	bl	80047d8 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d115      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f006 fb0d 	bl	800834c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e000      	b.n	8001d46 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d44:	bf00      	nop
    }
  }
}
 8001d46:	3734      	adds	r7, #52	@ 0x34
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}

08001d4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_PCD_SetAddress+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e012      	b.n	8001d8c <HAL_PCD_SetAddress+0x40>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 fcc3 	bl	8004708 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	70fb      	strb	r3, [r7, #3]
 8001da6:	460b      	mov	r3, r1
 8001da8:	803b      	strh	r3, [r7, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da0f      	bge.n	8001dda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 020f 	and.w	r2, r3, #15
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3310      	adds	r3, #16
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	705a      	strb	r2, [r3, #1]
 8001dd8:	e00f      	b.n	8001dfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	3304      	adds	r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e06:	883b      	ldrh	r3, [r7, #0]
 8001e08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	78ba      	ldrb	r2, [r7, #2]
 8001e14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e28:	78bb      	ldrb	r3, [r7, #2]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d102      	bne.n	8001e34 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_EP_Open+0xae>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e00e      	b.n	8001e60 <HAL_PCD_EP_Open+0xcc>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fe43 	bl	8003adc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da0f      	bge.n	8001e9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3310      	adds	r3, #16
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00f      	b.n	8001ebc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_EP_Close+0x6e>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e00e      	b.n	8001ef4 <HAL_PCD_EP_Close+0x8c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 fe81 	bl	8003bec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	799b      	ldrb	r3, [r3, #6]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	799b      	ldrb	r3, [r3, #6]
 8001f60:	461a      	mov	r2, r3
 8001f62:	6979      	ldr	r1, [r7, #20]
 8001f64:	f001 ff1e 	bl	8003da4 <USB_EPStartXfer>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f94:	681b      	ldr	r3, [r3, #0]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3310      	adds	r3, #16
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	799b      	ldrb	r3, [r3, #6]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	799b      	ldrb	r3, [r3, #6]
 8002004:	461a      	mov	r2, r3
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	f001 fecc 	bl	8003da4 <USB_EPStartXfer>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	7912      	ldrb	r2, [r2, #4]
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e04f      	b.n	80020d4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0f      	bge.n	800205c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3310      	adds	r3, #16
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
 800205a:	e00d      	b.n	8002078 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_PCD_EP_SetStall+0x82>
 8002094:	2302      	movs	r3, #2
 8002096:	e01d      	b.n	80020d4 <HAL_PCD_EP_SetStall+0xbe>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fa5a 	bl	8004560 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7999      	ldrb	r1, [r3, #6]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020c4:	461a      	mov	r2, r3
 80020c6:	f002 fc4b 	bl	8004960 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7912      	ldrb	r2, [r2, #4]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e042      	b.n	8002180 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0f      	bge.n	8002122 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3310      	adds	r3, #16
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	3304      	adds	r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	705a      	strb	r2, [r3, #1]
 8002120:	e00f      	b.n	8002142 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_PCD_EP_ClrStall+0x86>
 800215e:	2302      	movs	r3, #2
 8002160:	e00e      	b.n	8002180 <HAL_PCD_EP_ClrStall+0xa4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fa63 	bl	800463c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da0c      	bge.n	80021b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3310      	adds	r3, #16
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e00c      	b.n	80021d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 020f 	and.w	r2, r3, #15
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 f882 	bl	80042e0 <USB_EPStopXfer>
 80021dc:	4603      	mov	r3, r0
 80021de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b08a      	sub	sp, #40	@ 0x28
 80021ee:	af02      	add	r7, sp, #8
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	3310      	adds	r3, #16
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	3304      	adds	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d901      	bls.n	8002222 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	d902      	bls.n	800223e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3303      	adds	r3, #3
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002246:	e02a      	b.n	800229e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	429a      	cmp	r2, r3
 800225c:	d902      	bls.n	8002264 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3303      	adds	r3, #3
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4603      	mov	r3, r0
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f002 f8d7 	bl	8004434 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	441a      	add	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	441a      	add	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d809      	bhi.n	80022c8 <PCD_WriteEmptyTxFifo+0xde>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022bc:	429a      	cmp	r2, r3
 80022be:	d203      	bcs.n	80022c8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1bf      	bne.n	8002248 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d811      	bhi.n	80022f8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	2201      	movs	r2, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022f4:	4013      	ands	r3, r2
 80022f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	333c      	adds	r3, #60	@ 0x3c
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	799b      	ldrb	r3, [r3, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d17b      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4a61      	ldr	r2, [pc, #388]	@ (80024cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	f240 80b9 	bls.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80b3 	beq.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800236c:	6093      	str	r3, [r2, #8]
 800236e:	e0a7      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002386:	461a      	mov	r2, r3
 8002388:	2320      	movs	r3, #32
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e098      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 8093 	bne.w	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d90f      	bls.n	80023c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e07e      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	440b      	add	r3, r1
 80023e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	1ad2      	subs	r2, r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800240c:	461a      	mov	r2, r3
 800240e:	2101      	movs	r1, #1
 8002410:	f002 faa6 	bl	8004960 <USB_EP0_OutStart>
 8002414:	e006      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	441a      	add	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f005 fec6 	bl	80081bc <HAL_PCD_DataOutStageCallback>
 8002430:	e046      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d124      	bne.n	8002484 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	e032      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2320      	movs	r3, #32
 8002474:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f005 fe9d 	bl	80081bc <HAL_PCD_DataOutStageCallback>
 8002482:	e01d      	b.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d114      	bne.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024ac:	461a      	mov	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f002 fa56 	bl	8004960 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 fe7e 	bl	80081bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	4f54300a 	.word	0x4f54300a
 80024d0:	4f54310a 	.word	0x4f54310a

080024d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	333c      	adds	r3, #60	@ 0x3c
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a15      	ldr	r2, [pc, #84]	@ (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d90e      	bls.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 fe35 	bl	8008198 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d90c      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f002 fa08 	bl	8004960 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	4f54300a 	.word	0x4f54300a

08002560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800257e:	883b      	ldrh	r3, [r7, #0]
 8002580:	0419      	lsls	r1, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	430a      	orrs	r2, r1
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28
 800258c:	e028      	b.n	80025e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e00d      	b.n	80025be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3340      	adds	r3, #64	@ 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3ec      	bcc.n	80025a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c8:	883b      	ldrh	r3, [r7, #0]
 80025ca:	0418      	lsls	r0, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	4302      	orrs	r2, r0
 80025d8:	3340      	adds	r3, #64	@ 0x40
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e267      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d075      	beq.n	8002732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002646:	4b88      	ldr	r3, [pc, #544]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b85      	ldr	r3, [pc, #532]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800265a:	2b08      	cmp	r3, #8
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b82      	ldr	r3, [pc, #520]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b7e      	ldr	r3, [pc, #504]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d157      	bne.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e242      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x74>
 800268e:	4b76      	ldr	r3, [pc, #472]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 80026c0:	4b69      	ldr	r3, [pc, #420]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a68      	ldr	r2, [pc, #416]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe faa0 	bl	8000c24 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fa9c 	bl	8000c24 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e207      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xc0>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fa8c 	bl	8000c24 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fa88 	bl	8000c24 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1f3      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b51      	ldr	r3, [pc, #324]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0xe8>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800273e:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b44      	ldr	r3, [pc, #272]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c7      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4937      	ldr	r1, [pc, #220]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b34      	ldr	r3, [pc, #208]	@ (800286c <HAL_RCC_OscConfig+0x244>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fa41 	bl	8000c24 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fa3d 	bl	8000c24 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a8      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4925      	ldr	r1, [pc, #148]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <HAL_RCC_OscConfig+0x244>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fa20 	bl	8000c24 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fa1c 	bl	8000c24 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e187      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d036      	beq.n	8002880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_RCC_OscConfig+0x248>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fa00 	bl	8000c24 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe f9fc 	bl	8000c24 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e167      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCC_OscConfig+0x240>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x200>
 8002846:	e01b      	b.n	8002880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_OscConfig+0x248>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe f9e9 	bl	8000c24 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	e00e      	b.n	8002874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe f9e5 	bl	8000c24 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d907      	bls.n	8002874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e150      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	42470000 	.word	0x42470000
 8002870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ea      	bne.n	8002856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b81      	ldr	r3, [pc, #516]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b77      	ldr	r3, [pc, #476]	@ (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ca:	4b74      	ldr	r3, [pc, #464]	@ (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a73      	ldr	r2, [pc, #460]	@ (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f9a5 	bl	8000c24 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe f9a1 	bl	8000c24 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e10c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a9c <HAL_RCC_OscConfig+0x474>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x2ea>
 8002904:	4b64      	ldr	r3, [pc, #400]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a63      	ldr	r2, [pc, #396]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x30c>
 800291a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	@ 0x70
 8002926:	4b5c      	ldr	r3, [pc, #368]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x324>
 8002934:	4b58      	ldr	r3, [pc, #352]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002938:	4a57      	ldr	r2, [pc, #348]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002940:	4b55      	ldr	r3, [pc, #340]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a54      	ldr	r2, [pc, #336]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe f966 	bl	8000c24 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe f962 	bl	8000c24 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0cb      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ee      	beq.n	800295c <HAL_RCC_OscConfig+0x334>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe f950 	bl	8000c24 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe f94c 	bl	8000c24 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0b5      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ee      	bne.n	8002988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b39      	ldr	r3, [pc, #228]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	4a38      	ldr	r2, [pc, #224]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a1 	beq.w	8002b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c6:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d05c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d141      	bne.n	8002a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <HAL_RCC_OscConfig+0x478>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f920 	bl	8000c24 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f91c 	bl	8000c24 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e087      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	491b      	ldr	r1, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe f8f5 	bl	8000c24 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7fe f8f1 	bl	8000c24 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e05c      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x416>
 8002a5c:	e054      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe f8de 	bl	8000c24 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe f8da 	bl	8000c24 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e045      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
 8002a8a:	e03d      	b.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e038      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d028      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d121      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cc      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d90c      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a58      	ldr	r2, [pc, #352]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a52      	ldr	r2, [pc, #328]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d044      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e067      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4934      	ldr	r1, [pc, #208]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c08:	f7fe f80c 	bl	8000c24 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe f808 	bl	8000c24 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b25      	ldr	r3, [pc, #148]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d20c      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fe0a 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	080096bc 	.word	0x080096bc
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b090      	sub	sp, #64	@ 0x40
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfc:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d00d      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	f200 80a1 	bhi.w	8002e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x34>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d16:	e09b      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d1c:	e09b      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1e:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d22:	e098      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4b4f      	ldr	r3, [pc, #316]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d028      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	2200      	movs	r2, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d50:	fb03 f201 	mul.w	r2, r3, r1
 8002d54:	2300      	movs	r3, #0
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a43      	ldr	r2, [pc, #268]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d64:	460a      	mov	r2, r1
 8002d66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6a:	4413      	add	r3, r2
 8002d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d70:	2200      	movs	r2, #0
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	61fa      	str	r2, [r7, #28]
 8002d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d7e:	f7fd fa7f 	bl	8000280 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4613      	mov	r3, r2
 8002d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8a:	e053      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8c:	4b35      	ldr	r3, [pc, #212]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	2200      	movs	r2, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	617a      	str	r2, [r7, #20]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d9e:	f04f 0b00 	mov.w	fp, #0
 8002da2:	4652      	mov	r2, sl
 8002da4:	465b      	mov	r3, fp
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	ebb2 080a 	subs.w	r8, r2, sl
 8002dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dda:	eb63 0509 	sbc.w	r5, r3, r9
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	00eb      	lsls	r3, r5, #3
 8002de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dec:	00e2      	lsls	r2, r4, #3
 8002dee:	4614      	mov	r4, r2
 8002df0:	461d      	mov	r5, r3
 8002df2:	eb14 030a 	adds.w	r3, r4, sl
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	eb45 030b 	adc.w	r3, r5, fp
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	028b      	lsls	r3, r1, #10
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e14:	4621      	mov	r1, r4
 8002e16:	028a      	lsls	r2, r1, #10
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	60fa      	str	r2, [r7, #12]
 8002e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e28:	f7fd fa2a 	bl	8000280 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3740      	adds	r7, #64	@ 0x40
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	017d7840 	.word	0x017d7840

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	080096cc 	.word	0x080096cc

08002eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <HAL_RCC_GetClockConfig+0x60>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0207 	and.w	r2, r3, #7
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e041      	b.n	8002faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f839 	bl	8002fb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 f9b2 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e044      	b.n	800306a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8003078 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x6c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300a:	d013      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x6c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1a      	ldr	r2, [pc, #104]	@ (800307c <HAL_TIM_Base_Start_IT+0xb4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x6c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a19      	ldr	r2, [pc, #100]	@ (8003080 <HAL_TIM_Base_Start_IT+0xb8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x6c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a17      	ldr	r2, [pc, #92]	@ (8003084 <HAL_TIM_Base_Start_IT+0xbc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x6c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a16      	ldr	r2, [pc, #88]	@ (8003088 <HAL_TIM_Base_Start_IT+0xc0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d111      	bne.n	8003058 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d010      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	e007      	b.n	8003068 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40014000 	.word	0x40014000

0800308c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0202 	mvn.w	r2, #2
 80030c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8d2 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8c4 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8d5 	bl	8003294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0204 	mvn.w	r2, #4
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8ac 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f89e 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8af 	bl	8003294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0208 	mvn.w	r2, #8
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2204      	movs	r2, #4
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f886 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f878 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f889 	bl	8003294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0210 	mvn.w	r2, #16
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2208      	movs	r2, #8
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f860 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f852 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f863 	bl	8003294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fb2c 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8e0 	bl	80033dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f834 	bl	80032a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0220 	mvn.w	r2, #32
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8b2 	bl	80033c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a37      	ldr	r2, [pc, #220]	@ (80033ac <TIM_Base_SetConfig+0xf0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d00b      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a34      	ldr	r2, [pc, #208]	@ (80033b0 <TIM_Base_SetConfig+0xf4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a33      	ldr	r2, [pc, #204]	@ (80033b4 <TIM_Base_SetConfig+0xf8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a32      	ldr	r2, [pc, #200]	@ (80033b8 <TIM_Base_SetConfig+0xfc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <TIM_Base_SetConfig+0xf0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01b      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003314:	d017      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <TIM_Base_SetConfig+0xf4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <TIM_Base_SetConfig+0xf8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <TIM_Base_SetConfig+0xfc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a22      	ldr	r2, [pc, #136]	@ (80033bc <TIM_Base_SetConfig+0x100>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <TIM_Base_SetConfig+0x104>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <TIM_Base_SetConfig+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <TIM_Base_SetConfig+0xf0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d103      	bne.n	8003386 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	601a      	str	r2, [r3, #0]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033f0:	b084      	sub	sp, #16
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	f107 001c 	add.w	r0, r7, #28
 80033fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003402:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003406:	2b01      	cmp	r3, #1
 8003408:	d123      	bne.n	8003452 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800341e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f001 fae8 	bl	8004a1c <USB_CoreReset>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e01b      	b.n	800348a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f001 fadc 	bl	8004a1c <USB_CoreReset>
 8003464:	4603      	mov	r3, r0
 8003466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003468:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	@ 0x38
 800347c:	e005      	b.n	800348a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003482:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800348a:	7fbb      	ldrb	r3, [r7, #30]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10b      	bne.n	80034a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f043 0206 	orr.w	r2, r3, #6
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034b4:	b004      	add	sp, #16
 80034b6:	4770      	bx	lr

080034b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	4613      	mov	r3, r2
 80034c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d165      	bne.n	8003598 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a41      	ldr	r2, [pc, #260]	@ (80035d4 <USB_SetTurnaroundTime+0x11c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d906      	bls.n	80034e2 <USB_SetTurnaroundTime+0x2a>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <USB_SetTurnaroundTime+0x120>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d202      	bcs.n	80034e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034dc:	230f      	movs	r3, #15
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e062      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a3c      	ldr	r2, [pc, #240]	@ (80035d8 <USB_SetTurnaroundTime+0x120>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d306      	bcc.n	80034f8 <USB_SetTurnaroundTime+0x40>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a3b      	ldr	r2, [pc, #236]	@ (80035dc <USB_SetTurnaroundTime+0x124>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d202      	bcs.n	80034f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034f2:	230e      	movs	r3, #14
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e057      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <USB_SetTurnaroundTime+0x124>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d306      	bcc.n	800350e <USB_SetTurnaroundTime+0x56>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a37      	ldr	r2, [pc, #220]	@ (80035e0 <USB_SetTurnaroundTime+0x128>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d202      	bcs.n	800350e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003508:	230d      	movs	r3, #13
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e04c      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a33      	ldr	r2, [pc, #204]	@ (80035e0 <USB_SetTurnaroundTime+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d306      	bcc.n	8003524 <USB_SetTurnaroundTime+0x6c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a32      	ldr	r2, [pc, #200]	@ (80035e4 <USB_SetTurnaroundTime+0x12c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800351e:	230c      	movs	r3, #12
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e041      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <USB_SetTurnaroundTime+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d906      	bls.n	800353a <USB_SetTurnaroundTime+0x82>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a2e      	ldr	r2, [pc, #184]	@ (80035e8 <USB_SetTurnaroundTime+0x130>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d802      	bhi.n	800353a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003534:	230b      	movs	r3, #11
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e036      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a2a      	ldr	r2, [pc, #168]	@ (80035e8 <USB_SetTurnaroundTime+0x130>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d906      	bls.n	8003550 <USB_SetTurnaroundTime+0x98>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4a29      	ldr	r2, [pc, #164]	@ (80035ec <USB_SetTurnaroundTime+0x134>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800354a:	230a      	movs	r3, #10
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e02b      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <USB_SetTurnaroundTime+0x134>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d906      	bls.n	8003566 <USB_SetTurnaroundTime+0xae>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <USB_SetTurnaroundTime+0x138>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d202      	bcs.n	8003566 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003560:	2309      	movs	r3, #9
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e020      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <USB_SetTurnaroundTime+0x138>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d306      	bcc.n	800357c <USB_SetTurnaroundTime+0xc4>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <USB_SetTurnaroundTime+0x13c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d802      	bhi.n	800357c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003576:	2308      	movs	r3, #8
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e015      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <USB_SetTurnaroundTime+0x13c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d906      	bls.n	8003592 <USB_SetTurnaroundTime+0xda>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <USB_SetTurnaroundTime+0x140>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d202      	bcs.n	8003592 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800358c:	2307      	movs	r3, #7
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e00a      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003592:	2306      	movs	r3, #6
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e007      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800359e:	2309      	movs	r3, #9
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e001      	b.n	80035a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035a4:	2309      	movs	r3, #9
 80035a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	00d8acbf 	.word	0x00d8acbf
 80035d8:	00e4e1c0 	.word	0x00e4e1c0
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	01067380 	.word	0x01067380
 80035e4:	011a499f 	.word	0x011a499f
 80035e8:	01312cff 	.word	0x01312cff
 80035ec:	014ca43f 	.word	0x014ca43f
 80035f0:	016e3600 	.word	0x016e3600
 80035f4:	01a6ab1f 	.word	0x01a6ab1f
 80035f8:	01e84800 	.word	0x01e84800

080035fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d115      	bne.n	800368e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800366e:	200a      	movs	r0, #10
 8003670:	f7fd fae4 	bl	8000c3c <HAL_Delay>
      ms += 10U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	330a      	adds	r3, #10
 8003678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f001 f93f 	bl	80048fe <USB_GetMode>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d01e      	beq.n	80036c4 <USB_SetCurrentMode+0x84>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2bc7      	cmp	r3, #199	@ 0xc7
 800368a:	d9f0      	bls.n	800366e <USB_SetCurrentMode+0x2e>
 800368c:	e01a      	b.n	80036c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d115      	bne.n	80036c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036a0:	200a      	movs	r0, #10
 80036a2:	f7fd facb 	bl	8000c3c <HAL_Delay>
      ms += 10U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	330a      	adds	r3, #10
 80036aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f001 f926 	bl	80048fe <USB_GetMode>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <USB_SetCurrentMode+0x84>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80036bc:	d9f0      	bls.n	80036a0 <USB_SetCurrentMode+0x60>
 80036be:	e001      	b.n	80036c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e005      	b.n	80036d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80036c8:	d101      	bne.n	80036ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036d8:	b084      	sub	sp, #16
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80036e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e009      	b.n	800370c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	3340      	adds	r3, #64	@ 0x40
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3301      	adds	r3, #1
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0e      	cmp	r3, #14
 8003710:	d9f2      	bls.n	80036f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003712:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11c      	bne.n	8003754 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38
 8003752:	e00b      	b.n	800376c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003778:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10d      	bne.n	800379c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003788:	2100      	movs	r1, #0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f968 	bl	8003a60 <USB_SetDevSpeed>
 8003790:	e008      	b.n	80037a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003792:	2101      	movs	r1, #1
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f963 	bl	8003a60 <USB_SetDevSpeed>
 800379a:	e003      	b.n	80037a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800379c:	2103      	movs	r1, #3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f95e 	bl	8003a60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037a4:	2110      	movs	r1, #16
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8fa 	bl	80039a0 <USB_FlushTxFifo>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f924 	bl	8003a04 <USB_FlushRxFifo>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e043      	b.n	8003878 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003806:	d118      	bne.n	800383a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381a:	461a      	mov	r2, r3
 800381c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e013      	b.n	800384c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003830:	461a      	mov	r2, r3
 8003832:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e008      	b.n	800384c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003858:	461a      	mov	r2, r3
 800385a:	2300      	movs	r3, #0
 800385c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003870:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800387c:	461a      	mov	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4293      	cmp	r3, r2
 8003882:	d3b5      	bcc.n	80037f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	e043      	b.n	8003912 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800389c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038a0:	d118      	bne.n	80038d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e013      	b.n	80038e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e008      	b.n	80038e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e0:	461a      	mov	r2, r3
 80038e2:	2300      	movs	r3, #0
 80038e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2300      	movs	r3, #0
 80038f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800390a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	3301      	adds	r3, #1
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003916:	461a      	mov	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4293      	cmp	r3, r2
 800391c:	d3b5      	bcc.n	800388a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800392c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003930:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800393e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003940:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	4b10      	ldr	r3, [pc, #64]	@ (800399c <USB_DevInit+0x2c4>)
 800395a:	4313      	orrs	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003960:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f043 0208 	orr.w	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003974:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003998:	b004      	add	sp, #16
 800399a:	4770      	bx	lr
 800399c:	803c3800 	.word	0x803c3800

080039a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039ba:	d901      	bls.n	80039c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e01b      	b.n	80039f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	daf2      	bge.n	80039ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	019b      	lsls	r3, r3, #6
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039e4:	d901      	bls.n	80039ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e006      	b.n	80039f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d0f0      	beq.n	80039d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a1c:	d901      	bls.n	8003a22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e018      	b.n	8003a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	daf2      	bge.n	8003a10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2210      	movs	r2, #16
 8003a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a40:	d901      	bls.n	8003a46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e006      	b.n	8003a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d0f0      	beq.n	8003a34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b087      	sub	sp, #28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0306 	and.w	r3, r3, #6
 8003aaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
 8003ab6:	e00a      	b.n	8003ace <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d002      	beq.n	8003ac4 <USB_GetDevSpeed+0x32>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d102      	bne.n	8003aca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	75fb      	strb	r3, [r7, #23]
 8003ac8:	e001      	b.n	8003ace <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003aca:	230f      	movs	r3, #15
 8003acc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d13a      	bne.n	8003b6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d155      	bne.n	8003bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	791b      	ldrb	r3, [r3, #4]
 8003b4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	059b      	lsls	r3, r3, #22
 8003b52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b54:	4313      	orrs	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e036      	b.n	8003bdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	2101      	movs	r1, #1
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11a      	bne.n	8003bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	791b      	ldrb	r3, [r3, #4]
 8003bc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d161      	bne.n	8003ccc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1e:	d11f      	bne.n	8003c60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c80:	4013      	ands	r3, r2
 8003c82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0159      	lsls	r1, r3, #5
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4b35      	ldr	r3, [pc, #212]	@ (8003d9c <USB_DeactivateEndpoint+0x1b0>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
 8003cca:	e060      	b.n	8003d8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce2:	d11f      	bne.n	8003d24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d44:	4013      	ands	r3, r2
 8003d46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	43db      	mvns	r3, r3
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0159      	lsls	r1, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	440b      	add	r3, r1
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	4619      	mov	r1, r3
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <USB_DeactivateEndpoint+0x1b4>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	ec337800 	.word	0xec337800
 8003da0:	eff37800 	.word	0xeff37800

08003da4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	@ 0x28
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 817f 	bne.w	80040c4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d132      	bne.n	8003e34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003de8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e2c:	0cdb      	lsrs	r3, r3, #19
 8003e2e:	04db      	lsls	r3, r3, #19
 8003e30:	6113      	str	r3, [r2, #16]
 8003e32:	e097      	b.n	8003f64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	0151      	lsls	r1, r2, #5
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	440a      	add	r2, r1
 8003e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e4e:	0cdb      	lsrs	r3, r3, #19
 8003e50:	04db      	lsls	r3, r3, #19
 8003e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e76:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11a      	bne.n	8003eb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d903      	bls.n	8003e92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003eb0:	6113      	str	r3, [r2, #16]
 8003eb2:	e044      	b.n	8003f3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	8afb      	ldrh	r3, [r7, #22]
 8003eda:	04d9      	lsls	r1, r3, #19
 8003edc:	4ba4      	ldr	r3, [pc, #656]	@ (8004170 <USB_EPStartXfer+0x3cc>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	69b9      	ldr	r1, [r7, #24]
 8003ee2:	0148      	lsls	r0, r1, #5
 8003ee4:	69f9      	ldr	r1, [r7, #28]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003eec:	4313      	orrs	r3, r2
 8003eee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d122      	bne.n	8003f3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003f16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	075b      	lsls	r3, r3, #29
 8003f2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003f2e:	69b9      	ldr	r1, [r7, #24]
 8003f30:	0148      	lsls	r0, r1, #5
 8003f32:	69f9      	ldr	r1, [r7, #28]
 8003f34:	4401      	add	r1, r0
 8003f36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	0148      	lsls	r0, r1, #5
 8003f58:	69f9      	ldr	r1, [r7, #28]
 8003f5a:	4401      	add	r1, r0
 8003f5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003f60:	4313      	orrs	r3, r2
 8003f62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d14b      	bne.n	8004002 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	791b      	ldrb	r3, [r3, #4]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d128      	bne.n	8003fe0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d110      	bne.n	8003fc0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00f      	b.n	8003fe0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ffa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e166      	b.n	80042d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800401c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004020:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	791b      	ldrb	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d015      	beq.n	8004056 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 814e 	beq.w	80042d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004050:	4313      	orrs	r3, r2
 8004052:	634b      	str	r3, [r1, #52]	@ 0x34
 8004054:	e13c      	b.n	80042d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d110      	bne.n	8004088 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004080:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00f      	b.n	80040a8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	b298      	uxth	r0, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4603      	mov	r3, r0
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f9b9 	bl	8004434 <USB_WritePacket>
 80040c2:	e105      	b.n	80042d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040de:	0cdb      	lsrs	r3, r3, #19
 80040e0:	04db      	lsls	r3, r3, #19
 80040e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004102:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004106:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d132      	bne.n	8004174 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	69b9      	ldr	r1, [r7, #24]
 800413e:	0148      	lsls	r0, r1, #5
 8004140:	69f9      	ldr	r1, [r7, #28]
 8004142:	4401      	add	r1, r0
 8004144:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004148:	4313      	orrs	r3, r2
 800414a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004166:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800416a:	6113      	str	r3, [r2, #16]
 800416c:	e062      	b.n	8004234 <USB_EPStartXfer+0x490>
 800416e:	bf00      	nop
 8004170:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d123      	bne.n	80041c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	69b9      	ldr	r1, [r7, #24]
 8004194:	0148      	lsls	r0, r1, #5
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	4401      	add	r1, r0
 800419a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800419e:	4313      	orrs	r3, r2
 80041a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041c0:	6113      	str	r3, [r2, #16]
 80041c2:	e037      	b.n	8004234 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4413      	add	r3, r2
 80041ce:	1e5a      	subs	r2, r3, #1
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	8afa      	ldrh	r2, [r7, #22]
 80041e0:	fb03 f202 	mul.w	r2, r3, r2
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	8afb      	ldrh	r3, [r7, #22]
 80041f8:	04d9      	lsls	r1, r3, #19
 80041fa:	4b38      	ldr	r3, [pc, #224]	@ (80042dc <USB_EPStartXfer+0x538>)
 80041fc:	400b      	ands	r3, r1
 80041fe:	69b9      	ldr	r1, [r7, #24]
 8004200:	0148      	lsls	r0, r1, #5
 8004202:	69f9      	ldr	r1, [r7, #28]
 8004204:	4401      	add	r1, r0
 8004206:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800420a:	4313      	orrs	r3, r2
 800420c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	0148      	lsls	r0, r1, #5
 8004228:	69f9      	ldr	r1, [r7, #28]
 800422a:	4401      	add	r1, r0
 800422c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004230:	4313      	orrs	r3, r2
 8004232:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10d      	bne.n	8004256 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004252:	460a      	mov	r2, r1
 8004254:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	791b      	ldrb	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d128      	bne.n	80042b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d110      	bne.n	8004290 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004288:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e00f      	b.n	80042b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	1ff80000 	.word	0x1ff80000

080042e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d14a      	bne.n	8004394 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004316:	f040 8086 	bne.w	8004426 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004338:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800433c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800435c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004360:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800436e:	4293      	cmp	r3, r2
 8004370:	d902      	bls.n	8004378 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
          break;
 8004376:	e056      	b.n	8004426 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800438c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004390:	d0e7      	beq.n	8004362 <USB_EPStopXfer+0x82>
 8004392:	e048      	b.n	8004426 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ac:	d13b      	bne.n	8004426 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004402:	4293      	cmp	r3, r2
 8004404:	d902      	bls.n	800440c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
          break;
 800440a:	e00c      	b.n	8004426 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004424:	d0e7      	beq.n	80043f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	460b      	mov	r3, r1
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	4613      	mov	r3, r2
 8004448:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d123      	bne.n	80044a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800445a:	88bb      	ldrh	r3, [r7, #4]
 800445c:	3303      	adds	r3, #3
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e018      	b.n	800449a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	031a      	lsls	r2, r3, #12
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	461a      	mov	r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	3301      	adds	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3e2      	bcc.n	8004468 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3724      	adds	r7, #36	@ 0x24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b08b      	sub	sp, #44	@ 0x2c
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	e014      	b.n	8004506 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	3301      	adds	r3, #1
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	429a      	cmp	r2, r3
 800450c:	d3e6      	bcc.n	80044dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800450e:	8bfb      	ldrh	r3, [r7, #30]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01e      	beq.n	8004552 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800451e:	461a      	mov	r2, r3
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	701a      	strb	r2, [r3, #0]
      i++;
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	3301      	adds	r3, #1
 800453e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	3301      	adds	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	3b01      	subs	r3, #1
 800454a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800454c:	8bfb      	ldrh	r3, [r7, #30]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ea      	bne.n	8004528 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004554:	4618      	mov	r0, r3
 8004556:	372c      	adds	r7, #44	@ 0x2c
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d12c      	bne.n	80045d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	db12      	blt.n	80045b4 <USB_EPSetStall+0x54>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e02b      	b.n	800462e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	db12      	blt.n	800460e <USB_EPSetStall+0xae>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00f      	beq.n	800460e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004608:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800460c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004628:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800462c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d128      	bne.n	80046aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	791b      	ldrb	r3, [r3, #4]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d003      	beq.n	8004688 <USB_EPClearStall+0x4c>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	791b      	ldrb	r3, [r3, #4]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d138      	bne.n	80046fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e027      	b.n	80046fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d003      	beq.n	80046da <USB_EPClearStall+0x9e>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	791b      	ldrb	r3, [r3, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d10f      	bne.n	80046fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004726:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800472a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004782:	f023 0302 	bic.w	r3, r3, #2
 8004786:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047b0:	f023 0303 	bic.w	r3, r3, #3
 80047b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	0c1b      	lsrs	r3, r3, #16
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	b29b      	uxth	r3, r3
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004894:	68bb      	ldr	r3, [r7, #8]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	01db      	lsls	r3, r3, #7
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048f0:	68bb      	ldr	r3, [r7, #8]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0301 	and.w	r3, r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004934:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800494c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	460b      	mov	r3, r1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	333c      	adds	r3, #60	@ 0x3c
 8004976:	3304      	adds	r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <USB_EP0_OutStart+0xb8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d90a      	bls.n	800499a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004994:	d101      	bne.n	800499a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e037      	b.n	8004a0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049c8:	f043 0318 	orr.w	r3, r3, #24
 80049cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80049e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10f      	bne.n	8004a08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	4f54300a 	.word	0x4f54300a

08004a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a34:	d901      	bls.n	8004a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e022      	b.n	8004a80 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	daf2      	bge.n	8004a28 <USB_CoreReset+0xc>

  count = 10U;
 8004a42:	230a      	movs	r3, #10
 8004a44:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a46:	e002      	b.n	8004a4e <USB_CoreReset+0x32>
  {
    count--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f9      	bne.n	8004a48 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a6c:	d901      	bls.n	8004a72 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e006      	b.n	8004a80 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d0f0      	beq.n	8004a60 <USB_CoreReset+0x44>

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004a9c:	f003 fdee 	bl	800867c <USBD_static_malloc>
 8004aa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	32b0      	adds	r2, #176	@ 0xb0
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e0d4      	b.n	8004c66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004abc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f003 ff35 	bl	8008932 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	32b0      	adds	r2, #176	@ 0xb0
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	32b0      	adds	r2, #176	@ 0xb0
 8004ae2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7c1b      	ldrb	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d138      	bne.n	8004b66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004af4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c70 <USBD_CDC_Init+0x1e4>)
 8004af6:	7819      	ldrb	r1, [r3, #0]
 8004af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004afc:	2202      	movs	r2, #2
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f003 fc99 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b04:	4b5a      	ldr	r3, [pc, #360]	@ (8004c70 <USBD_CDC_Init+0x1e4>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3323      	adds	r3, #35	@ 0x23
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b1e:	4b55      	ldr	r3, [pc, #340]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004b20:	7819      	ldrb	r1, [r3, #0]
 8004b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b26:	2202      	movs	r2, #2
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f003 fc84 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b2e:	4b51      	ldr	r3, [pc, #324]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f003 020f 	and.w	r2, r3, #15
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c78 <USBD_CDC_Init+0x1ec>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 020f 	and.w	r2, r3, #15
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	331c      	adds	r3, #28
 8004b60:	2210      	movs	r2, #16
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e035      	b.n	8004bd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b66:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <USBD_CDC_Init+0x1e4>)
 8004b68:	7819      	ldrb	r1, [r3, #0]
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 fc61 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b74:	4b3e      	ldr	r3, [pc, #248]	@ (8004c70 <USBD_CDC_Init+0x1e4>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f003 020f 	and.w	r2, r3, #15
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3323      	adds	r3, #35	@ 0x23
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004b90:	7819      	ldrb	r1, [r3, #0]
 8004b92:	2340      	movs	r3, #64	@ 0x40
 8004b94:	2202      	movs	r2, #2
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f003 fc4d 	bl	8008436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b9c:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <USBD_CDC_Init+0x1ec>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 020f 	and.w	r2, r3, #15
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	331c      	adds	r3, #28
 8004bce:	2210      	movs	r2, #16
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bd2:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <USBD_CDC_Init+0x1ec>)
 8004bd4:	7819      	ldrb	r1, [r3, #0]
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	2203      	movs	r2, #3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f003 fc2b 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <USBD_CDC_Init+0x1ec>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 020f 	and.w	r2, r3, #15
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3323      	adds	r3, #35	@ 0x23
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	33b0      	adds	r3, #176	@ 0xb0
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c30:	2302      	movs	r3, #2
 8004c32:	e018      	b.n	8004c66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1b      	ldrb	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004c3e:	7819      	ldrb	r1, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f003 fce2 	bl	8008614 <USBD_LL_PrepareReceive>
 8004c50:	e008      	b.n	8004c64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <USBD_CDC_Init+0x1e8>)
 8004c54:	7819      	ldrb	r1, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c5c:	2340      	movs	r3, #64	@ 0x40
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f003 fcd8 	bl	8008614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000093 	.word	0x20000093
 8004c74:	20000094 	.word	0x20000094
 8004c78:	20000095 	.word	0x20000095

08004c7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c88:	4b3a      	ldr	r3, [pc, #232]	@ (8004d74 <USBD_CDC_DeInit+0xf8>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f003 fbf7 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c94:	4b37      	ldr	r3, [pc, #220]	@ (8004d74 <USBD_CDC_DeInit+0xf8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3323      	adds	r3, #35	@ 0x23
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004cae:	4b32      	ldr	r3, [pc, #200]	@ (8004d78 <USBD_CDC_DeInit+0xfc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f003 fbe4 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004cba:	4b2f      	ldr	r3, [pc, #188]	@ (8004d78 <USBD_CDC_DeInit+0xfc>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004cd6:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <USBD_CDC_DeInit+0x100>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f003 fbd0 	bl	8008482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ce2:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <USBD_CDC_DeInit+0x100>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f003 020f 	and.w	r2, r3, #15
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3323      	adds	r3, #35	@ 0x23
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d7c <USBD_CDC_DeInit+0x100>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331c      	adds	r3, #28
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	32b0      	adds	r2, #176	@ 0xb0
 8004d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01f      	beq.n	8004d68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	33b0      	adds	r3, #176	@ 0xb0
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	32b0      	adds	r2, #176	@ 0xb0
 8004d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 fca4 	bl	8008698 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	32b0      	adds	r2, #176	@ 0xb0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000093 	.word	0x20000093
 8004d78:	20000094 	.word	0x20000094
 8004d7c:	20000095 	.word	0x20000095

08004d80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	32b0      	adds	r2, #176	@ 0xb0
 8004d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0bf      	b.n	8004f30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d050      	beq.n	8004e5e <USBD_CDC_Setup+0xde>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	f040 80af 	bne.w	8004f20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	88db      	ldrh	r3, [r3, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d03a      	beq.n	8004e40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da1b      	bge.n	8004e0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	33b0      	adds	r3, #176	@ 0xb0
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004dea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	88d2      	ldrh	r2, [r2, #6]
 8004df0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	88db      	ldrh	r3, [r3, #6]
 8004df6:	2b07      	cmp	r3, #7
 8004df8:	bf28      	it	cs
 8004dfa:	2307      	movcs	r3, #7
 8004dfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	89fa      	ldrh	r2, [r7, #14]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 fda9 	bl	800695c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e0a:	e090      	b.n	8004f2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	785a      	ldrb	r2, [r3, #1]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	88db      	ldrh	r3, [r3, #6]
 8004e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e1c:	d803      	bhi.n	8004e26 <USBD_CDC_Setup+0xa6>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	88db      	ldrh	r3, [r3, #6]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	e000      	b.n	8004e28 <USBD_CDC_Setup+0xa8>
 8004e26:	2240      	movs	r2, #64	@ 0x40
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004e36:	461a      	mov	r2, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 fdbe 	bl	80069ba <USBD_CtlPrepareRx>
      break;
 8004e3e:	e076      	b.n	8004f2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	33b0      	adds	r3, #176	@ 0xb0
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	7850      	ldrb	r0, [r2, #1]
 8004e56:	2200      	movs	r2, #0
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	4798      	blx	r3
      break;
 8004e5c:	e067      	b.n	8004f2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b0b      	cmp	r3, #11
 8004e64:	d851      	bhi.n	8004f0a <USBD_CDC_Setup+0x18a>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <USBD_CDC_Setup+0xec>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004f19 	.word	0x08004f19
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f0b 	.word	0x08004f0b
 8004e7c:	08004f0b 	.word	0x08004f0b
 8004e80:	08004f0b 	.word	0x08004f0b
 8004e84:	08004f0b 	.word	0x08004f0b
 8004e88:	08004f0b 	.word	0x08004f0b
 8004e8c:	08004f0b 	.word	0x08004f0b
 8004e90:	08004f0b 	.word	0x08004f0b
 8004e94:	08004ec7 	.word	0x08004ec7
 8004e98:	08004ef1 	.word	0x08004ef1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d107      	bne.n	8004eb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ea8:	f107 030a 	add.w	r3, r7, #10
 8004eac:	2202      	movs	r2, #2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fd53 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004eb6:	e032      	b.n	8004f1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fcd1 	bl	8006862 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8004ec4:	e02b      	b.n	8004f1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d107      	bne.n	8004ee2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ed2:	f107 030d 	add.w	r3, r7, #13
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 fd3e 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ee0:	e01d      	b.n	8004f1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 fcbc 	bl	8006862 <USBD_CtlError>
            ret = USBD_FAIL;
 8004eea:	2303      	movs	r3, #3
 8004eec:	75fb      	strb	r3, [r7, #23]
          break;
 8004eee:	e016      	b.n	8004f1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d00f      	beq.n	8004f1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f001 fcaf 	bl	8006862 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f04:	2303      	movs	r3, #3
 8004f06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f08:	e008      	b.n	8004f1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 fca8 	bl	8006862 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f12:	2303      	movs	r3, #3
 8004f14:	75fb      	strb	r3, [r7, #23]
          break;
 8004f16:	e002      	b.n	8004f1e <USBD_CDC_Setup+0x19e>
          break;
 8004f18:	bf00      	nop
 8004f1a:	e008      	b.n	8004f2e <USBD_CDC_Setup+0x1ae>
          break;
 8004f1c:	bf00      	nop
      }
      break;
 8004f1e:	e006      	b.n	8004f2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fc9d 	bl	8006862 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004f4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	32b0      	adds	r2, #176	@ 0xb0
 8004f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e065      	b.n	800502e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	32b0      	adds	r2, #176	@ 0xb0
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3314      	adds	r3, #20
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d02f      	beq.n	8004fec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	f003 020f 	and.w	r2, r3, #15
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 010f 	and.w	r1, r3, #15
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	460b      	mov	r3, r1
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4403      	add	r3, r0
 8004fb4:	331c      	adds	r3, #28
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d112      	bne.n	8004fec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3314      	adds	r3, #20
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fde:	78f9      	ldrb	r1, [r7, #3]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f003 faf4 	bl	80085d2 <USBD_LL_Transmit>
 8004fea:	e01f      	b.n	800502c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	33b0      	adds	r3, #176	@ 0xb0
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	33b0      	adds	r3, #176	@ 0xb0
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	32b0      	adds	r2, #176	@ 0xb0
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	32b0      	adds	r2, #176	@ 0xb0
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005064:	2303      	movs	r3, #3
 8005066:	e01a      	b.n	800509e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f003 faf2 	bl	8008656 <USBD_LL_GetRxDataSize>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	33b0      	adds	r3, #176	@ 0xb0
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005098:	4611      	mov	r1, r2
 800509a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	32b0      	adds	r2, #176	@ 0xb0
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e024      	b.n	8005112 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	33b0      	adds	r3, #176	@ 0xb0
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d019      	beq.n	8005110 <USBD_CDC_EP0_RxReady+0x6a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80050e2:	2bff      	cmp	r3, #255	@ 0xff
 80050e4:	d014      	beq.n	8005110 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	33b0      	adds	r3, #176	@ 0xb0
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80050fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005106:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	22ff      	movs	r2, #255	@ 0xff
 800510c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005124:	2182      	movs	r1, #130	@ 0x82
 8005126:	4818      	ldr	r0, [pc, #96]	@ (8005188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005128:	f000 fd62 	bl	8005bf0 <USBD_GetEpDesc>
 800512c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800512e:	2101      	movs	r1, #1
 8005130:	4815      	ldr	r0, [pc, #84]	@ (8005188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005132:	f000 fd5d 	bl	8005bf0 <USBD_GetEpDesc>
 8005136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005138:	2181      	movs	r1, #129	@ 0x81
 800513a:	4813      	ldr	r0, [pc, #76]	@ (8005188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800513c:	f000 fd58 	bl	8005bf0 <USBD_GetEpDesc>
 8005140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2210      	movs	r2, #16
 800514c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2200      	movs	r2, #0
 8005158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800515c:	711a      	strb	r2, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005170:	711a      	strb	r2, [r3, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2243      	movs	r2, #67	@ 0x43
 800517a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800517c:	4b02      	ldr	r3, [pc, #8]	@ (8005188 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000050 	.word	0x20000050

0800518c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005194:	2182      	movs	r1, #130	@ 0x82
 8005196:	4818      	ldr	r0, [pc, #96]	@ (80051f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005198:	f000 fd2a 	bl	8005bf0 <USBD_GetEpDesc>
 800519c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800519e:	2101      	movs	r1, #1
 80051a0:	4815      	ldr	r0, [pc, #84]	@ (80051f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051a2:	f000 fd25 	bl	8005bf0 <USBD_GetEpDesc>
 80051a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051a8:	2181      	movs	r1, #129	@ 0x81
 80051aa:	4813      	ldr	r0, [pc, #76]	@ (80051f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051ac:	f000 fd20 	bl	8005bf0 <USBD_GetEpDesc>
 80051b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2210      	movs	r2, #16
 80051bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2200      	movs	r2, #0
 80051c8:	711a      	strb	r2, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f042 0202 	orr.w	r2, r2, #2
 80051d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	711a      	strb	r2, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f042 0202 	orr.w	r2, r2, #2
 80051e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2243      	movs	r2, #67	@ 0x43
 80051ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051ec:	4b02      	ldr	r3, [pc, #8]	@ (80051f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000050 	.word	0x20000050

080051fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005204:	2182      	movs	r1, #130	@ 0x82
 8005206:	4818      	ldr	r0, [pc, #96]	@ (8005268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005208:	f000 fcf2 	bl	8005bf0 <USBD_GetEpDesc>
 800520c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800520e:	2101      	movs	r1, #1
 8005210:	4815      	ldr	r0, [pc, #84]	@ (8005268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005212:	f000 fced 	bl	8005bf0 <USBD_GetEpDesc>
 8005216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005218:	2181      	movs	r1, #129	@ 0x81
 800521a:	4813      	ldr	r0, [pc, #76]	@ (8005268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800521c:	f000 fce8 	bl	8005bf0 <USBD_GetEpDesc>
 8005220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2210      	movs	r2, #16
 800522c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2200      	movs	r2, #0
 8005238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800523c:	711a      	strb	r2, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d006      	beq.n	8005256 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005250:	711a      	strb	r2, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2243      	movs	r2, #67	@ 0x43
 800525a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800525c:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000050 	.word	0x20000050

0800526c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	220a      	movs	r2, #10
 8005278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800527a:	4b03      	ldr	r3, [pc, #12]	@ (8005288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	2000000c 	.word	0x2000000c

0800528c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800529c:	2303      	movs	r3, #3
 800529e:	e009      	b.n	80052b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	33b0      	adds	r3, #176	@ 0xb0
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	32b0      	adds	r2, #176	@ 0xb0
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e008      	b.n	80052f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	32b0      	adds	r2, #176	@ 0xb0
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005324:	2303      	movs	r3, #3
 8005326:	e004      	b.n	8005332 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	32b0      	adds	r2, #176	@ 0xb0
 8005352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005356:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005362:	2303      	movs	r3, #3
 8005364:	e025      	b.n	80053b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11f      	bne.n	80053b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2201      	movs	r2, #1
 8005374:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005378:	4b10      	ldr	r3, [pc, #64]	@ (80053bc <USBD_CDC_TransmitPacket+0x7c>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4403      	add	r3, r0
 8005392:	3314      	adds	r3, #20
 8005394:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <USBD_CDC_TransmitPacket+0x7c>)
 8005398:	7819      	ldrb	r1, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f003 f913 	bl	80085d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000093 	.word	0x20000093

080053c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	32b0      	adds	r2, #176	@ 0xb0
 80053d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	32b0      	adds	r2, #176	@ 0xb0
 80053e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e018      	b.n	8005420 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7c1b      	ldrb	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <USBD_CDC_ReceivePacket+0x68>)
 80053f8:	7819      	ldrb	r1, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f003 f905 	bl	8008614 <USBD_LL_PrepareReceive>
 800540a:	e008      	b.n	800541e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <USBD_CDC_ReceivePacket+0x68>)
 800540e:	7819      	ldrb	r1, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005416:	2340      	movs	r3, #64	@ 0x40
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f003 f8fb 	bl	8008614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000094 	.word	0x20000094

0800542c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005440:	2303      	movs	r3, #3
 8005442:	e01f      	b.n	8005484 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	79fa      	ldrb	r2, [r7, #7]
 8005476:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f002 ff75 	bl	8008368 <USBD_LL_Init>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e025      	b.n	80054f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	32ae      	adds	r2, #174	@ 0xae
 80054b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00f      	beq.n	80054e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	32ae      	adds	r2, #174	@ 0xae
 80054ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	f107 020e 	add.w	r2, r7, #14
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
 80054d8:	4602      	mov	r2, r0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f002 ff7d 	bl	8008400 <USBD_LL_Start>
 8005506:	4603      	mov	r3, r0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005518:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	4611      	mov	r1, r2
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 f922 	bl	80067ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80055b8:	461a      	mov	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d01a      	beq.n	8005604 <USBD_LL_SetupStage+0x72>
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d822      	bhi.n	8005618 <USBD_LL_SetupStage+0x86>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <USBD_LL_SetupStage+0x4a>
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d00a      	beq.n	80055f0 <USBD_LL_SetupStage+0x5e>
 80055da:	e01d      	b.n	8005618 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb77 	bl	8005cd8 <USBD_StdDevReq>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]
      break;
 80055ee:	e020      	b.n	8005632 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fbdf 	bl	8005dbc <USBD_StdItfReq>
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
      break;
 8005602:	e016      	b.n	8005632 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fc41 	bl	8005e94 <USBD_StdEPReq>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
      break;
 8005616:	e00c      	b.n	8005632 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800561e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f002 ff4a 	bl	80084c0 <USBD_LL_StallEP>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	bf00      	nop
  }

  return ret;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	460b      	mov	r3, r1
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d177      	bne.n	8005744 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800565a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005662:	2b03      	cmp	r3, #3
 8005664:	f040 80a1 	bne.w	80057aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	8992      	ldrh	r2, [r2, #12]
 8005670:	4293      	cmp	r3, r2
 8005672:	d91c      	bls.n	80056ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	8992      	ldrh	r2, [r2, #12]
 800567c:	1a9a      	subs	r2, r3, r2
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	8992      	ldrh	r2, [r2, #12]
 800568a:	441a      	add	r2, r3
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6919      	ldr	r1, [r3, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	899b      	ldrh	r3, [r3, #12]
 8005698:	461a      	mov	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4293      	cmp	r3, r2
 80056a0:	bf38      	it	cc
 80056a2:	4613      	movcc	r3, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 f9a8 	bl	80069fc <USBD_CtlContinueRx>
 80056ac:	e07d      	b.n	80057aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d014      	beq.n	80056e6 <USBD_LL_DataOutStage+0xaa>
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d81d      	bhi.n	80056fc <USBD_LL_DataOutStage+0xc0>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <USBD_LL_DataOutStage+0x8e>
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d003      	beq.n	80056d0 <USBD_LL_DataOutStage+0x94>
 80056c8:	e018      	b.n	80056fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75bb      	strb	r3, [r7, #22]
            break;
 80056ce:	e018      	b.n	8005702 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	4619      	mov	r1, r3
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa6e 	bl	8005bbc <USBD_CoreFindIF>
 80056e0:	4603      	mov	r3, r0
 80056e2:	75bb      	strb	r3, [r7, #22]
            break;
 80056e4:	e00d      	b.n	8005702 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fa70 	bl	8005bd6 <USBD_CoreFindEP>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75bb      	strb	r3, [r7, #22]
            break;
 80056fa:	e002      	b.n	8005702 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	75bb      	strb	r3, [r7, #22]
            break;
 8005700:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005702:	7dbb      	ldrb	r3, [r7, #22]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d119      	bne.n	800573c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b03      	cmp	r3, #3
 8005712:	d113      	bne.n	800573c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005714:	7dba      	ldrb	r2, [r7, #22]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	32ae      	adds	r2, #174	@ 0xae
 800571a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005724:	7dba      	ldrb	r2, [r7, #22]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800572c:	7dba      	ldrb	r2, [r7, #22]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	32ae      	adds	r2, #174	@ 0xae
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 f96e 	bl	8006a1e <USBD_CtlSendStatus>
 8005742:	e032      	b.n	80057aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4619      	mov	r1, r3
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa41 	bl	8005bd6 <USBD_CoreFindEP>
 8005754:	4603      	mov	r3, r0
 8005756:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005758:	7dbb      	ldrb	r3, [r7, #22]
 800575a:	2bff      	cmp	r3, #255	@ 0xff
 800575c:	d025      	beq.n	80057aa <USBD_LL_DataOutStage+0x16e>
 800575e:	7dbb      	ldrb	r3, [r7, #22]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d122      	bne.n	80057aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b03      	cmp	r3, #3
 800576e:	d117      	bne.n	80057a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005770:	7dba      	ldrb	r2, [r7, #22]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	32ae      	adds	r2, #174	@ 0xae
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005780:	7dba      	ldrb	r2, [r7, #22]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005788:	7dba      	ldrb	r2, [r7, #22]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	32ae      	adds	r2, #174	@ 0xae
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	7afa      	ldrb	r2, [r7, #11]
 8005796:	4611      	mov	r1, r2
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	4798      	blx	r3
 800579c:	4603      	mov	r3, r0
 800579e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	e000      	b.n	80057ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	460b      	mov	r3, r1
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d178      	bne.n	80058ba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3314      	adds	r3, #20
 80057cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d163      	bne.n	80058a0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	8992      	ldrh	r2, [r2, #12]
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d91c      	bls.n	800581e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	8992      	ldrh	r2, [r2, #12]
 80057ec:	1a9a      	subs	r2, r3, r2
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	8992      	ldrh	r2, [r2, #12]
 80057fa:	441a      	add	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6919      	ldr	r1, [r3, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	461a      	mov	r2, r3
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f001 f8c4 	bl	8006998 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005810:	2300      	movs	r3, #0
 8005812:	2200      	movs	r2, #0
 8005814:	2100      	movs	r1, #0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f002 fefc 	bl	8008614 <USBD_LL_PrepareReceive>
 800581c:	e040      	b.n	80058a0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	899b      	ldrh	r3, [r3, #12]
 8005822:	461a      	mov	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d11c      	bne.n	8005866 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005834:	4293      	cmp	r3, r2
 8005836:	d316      	bcc.n	8005866 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005842:	429a      	cmp	r2, r3
 8005844:	d20f      	bcs.n	8005866 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f001 f8a4 	bl	8006998 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005858:	2300      	movs	r3, #0
 800585a:	2200      	movs	r2, #0
 800585c:	2100      	movs	r1, #0
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f002 fed8 	bl	8008614 <USBD_LL_PrepareReceive>
 8005864:	e01c      	b.n	80058a0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d10f      	bne.n	8005892 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005892:	2180      	movs	r1, #128	@ 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f002 fe13 	bl	80084c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f001 f8d2 	bl	8006a44 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03a      	beq.n	8005920 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fe30 	bl	8005510 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80058b8:	e032      	b.n	8005920 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f986 	bl	8005bd6 <USBD_CoreFindEP>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2bff      	cmp	r3, #255	@ 0xff
 80058d2:	d025      	beq.n	8005920 <USBD_LL_DataInStage+0x16c>
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d122      	bne.n	8005920 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d11c      	bne.n	8005920 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058e6:	7dfa      	ldrb	r2, [r7, #23]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	32ae      	adds	r2, #174	@ 0xae
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d014      	beq.n	8005920 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80058f6:	7dfa      	ldrb	r2, [r7, #23]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058fe:	7dfa      	ldrb	r2, [r7, #23]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	32ae      	adds	r2, #174	@ 0xae
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	7afa      	ldrb	r2, [r7, #11]
 800590c:	4611      	mov	r1, r2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005916:	7dbb      	ldrb	r3, [r7, #22]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800591c:	7dbb      	ldrb	r3, [r7, #22]
 800591e:	e000      	b.n	8005922 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6852      	ldr	r2, [r2, #4]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	4611      	mov	r1, r2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005990:	2340      	movs	r3, #64	@ 0x40
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f002 fd4d 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	@ 0x40
 80059a8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059ac:	2340      	movs	r3, #64	@ 0x40
 80059ae:	2200      	movs	r2, #0
 80059b0:	2180      	movs	r1, #128	@ 0x80
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 fd3f 	bl	8008436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2240      	movs	r2, #64	@ 0x40
 80059c4:	841a      	strh	r2, [r3, #32]

  return ret;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d006      	beq.n	8005a12 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2204      	movs	r2, #4
 8005a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d106      	bne.n	8005a4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d110      	bne.n	8005a8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32ae      	adds	r2, #174	@ 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e01c      	b.n	8005af4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d115      	bne.n	8005af2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32ae      	adds	r2, #174	@ 0xae
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32ae      	adds	r2, #174	@ 0xae
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	32ae      	adds	r2, #174	@ 0xae
 8005b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e01c      	b.n	8005b58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d115      	bne.n	8005b56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	32ae      	adds	r2, #174	@ 0xae
 8005b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	32ae      	adds	r2, #174	@ 0xae
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	4611      	mov	r1, r2
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6852      	ldr	r2, [r2, #4]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d91f      	bls.n	8005c56 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c1c:	e013      	b.n	8005c46 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c1e:	f107 030a 	add.w	r3, r7, #10
 8005c22:	4619      	mov	r1, r3
 8005c24:	6978      	ldr	r0, [r7, #20]
 8005c26:	f000 f81b 	bl	8005c60 <USBD_GetNextDesc>
 8005c2a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d108      	bne.n	8005c46 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d008      	beq.n	8005c54 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	897b      	ldrh	r3, [r7, #10]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d8e5      	bhi.n	8005c1e <USBD_GetEpDesc+0x2e>
 8005c52:	e000      	b.n	8005c56 <USBD_GetEpDesc+0x66>
          break;
 8005c54:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c56:	693b      	ldr	r3, [r7, #16]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	4413      	add	r3, r2
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3301      	adds	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	b21a      	sxth	r2, r3
 8005cbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005cee:	2b40      	cmp	r3, #64	@ 0x40
 8005cf0:	d005      	beq.n	8005cfe <USBD_StdDevReq+0x26>
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d857      	bhi.n	8005da6 <USBD_StdDevReq+0xce>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <USBD_StdDevReq+0x42>
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d153      	bne.n	8005da6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	32ae      	adds	r2, #174	@ 0xae
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	e04a      	b.n	8005db0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d83b      	bhi.n	8005d9a <USBD_StdDevReq+0xc2>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <USBD_StdDevReq+0x50>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d9b 	.word	0x08005d9b
 8005d34:	08005d87 	.word	0x08005d87
 8005d38:	08005d9b 	.word	0x08005d9b
 8005d3c:	08005d5b 	.word	0x08005d5b
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d9b 	.word	0x08005d9b
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d65 	.word	0x08005d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa3e 	bl	80061d4 <USBD_GetDescriptor>
          break;
 8005d58:	e024      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fba3 	bl	80064a8 <USBD_SetAddress>
          break;
 8005d62:	e01f      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fbe2 	bl	8006530 <USBD_SetConfig>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d70:	e018      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fc85 	bl	8006684 <USBD_GetConfig>
          break;
 8005d7a:	e013      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fcb6 	bl	80066f0 <USBD_GetStatus>
          break;
 8005d84:	e00e      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fce5 	bl	8006758 <USBD_SetFeature>
          break;
 8005d8e:	e009      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fd09 	bl	80067aa <USBD_ClrFeature>
          break;
 8005d98:	e004      	b.n	8005da4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fd60 	bl	8006862 <USBD_CtlError>
          break;
 8005da2:	bf00      	nop
      }
      break;
 8005da4:	e004      	b.n	8005db0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fd5a 	bl	8006862 <USBD_CtlError>
      break;
 8005dae:	bf00      	nop
  }

  return ret;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop

08005dbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d005      	beq.n	8005de2 <USBD_StdItfReq+0x26>
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d852      	bhi.n	8005e80 <USBD_StdItfReq+0xc4>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <USBD_StdItfReq+0x26>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d14e      	bne.n	8005e80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d840      	bhi.n	8005e72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	889b      	ldrh	r3, [r3, #4]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d836      	bhi.n	8005e68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	889b      	ldrh	r3, [r3, #4]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff feda 	bl	8005bbc <USBD_CoreFindIF>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2bff      	cmp	r3, #255	@ 0xff
 8005e10:	d01d      	beq.n	8005e4e <USBD_StdItfReq+0x92>
 8005e12:	7bbb      	ldrb	r3, [r7, #14]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d11a      	bne.n	8005e4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e18:	7bba      	ldrb	r2, [r7, #14]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32ae      	adds	r2, #174	@ 0xae
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00f      	beq.n	8005e48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e28:	7bba      	ldrb	r2, [r7, #14]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e30:	7bba      	ldrb	r2, [r7, #14]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	32ae      	adds	r2, #174	@ 0xae
 8005e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e46:	e004      	b.n	8005e52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e4c:	e001      	b.n	8005e52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88db      	ldrh	r3, [r3, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d110      	bne.n	8005e7c <USBD_StdItfReq+0xc0>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fddc 	bl	8006a1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e66:	e009      	b.n	8005e7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fcf9 	bl	8006862 <USBD_CtlError>
          break;
 8005e70:	e004      	b.n	8005e7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fcf4 	bl	8006862 <USBD_CtlError>
          break;
 8005e7a:	e000      	b.n	8005e7e <USBD_StdItfReq+0xc2>
          break;
 8005e7c:	bf00      	nop
      }
      break;
 8005e7e:	e004      	b.n	8005e8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fced 	bl	8006862 <USBD_CtlError>
      break;
 8005e88:	bf00      	nop
  }

  return ret;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	889b      	ldrh	r3, [r3, #4]
 8005ea6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eb0:	2b40      	cmp	r3, #64	@ 0x40
 8005eb2:	d007      	beq.n	8005ec4 <USBD_StdEPReq+0x30>
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	f200 8181 	bhi.w	80061bc <USBD_StdEPReq+0x328>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02a      	beq.n	8005f14 <USBD_StdEPReq+0x80>
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	f040 817c 	bne.w	80061bc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fe84 	bl	8005bd6 <USBD_CoreFindEP>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ed2:	7b7b      	ldrb	r3, [r7, #13]
 8005ed4:	2bff      	cmp	r3, #255	@ 0xff
 8005ed6:	f000 8176 	beq.w	80061c6 <USBD_StdEPReq+0x332>
 8005eda:	7b7b      	ldrb	r3, [r7, #13]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8172 	bne.w	80061c6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005ee2:	7b7a      	ldrb	r2, [r7, #13]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005eea:	7b7a      	ldrb	r2, [r7, #13]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	32ae      	adds	r2, #174	@ 0xae
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8165 	beq.w	80061c6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005efc:	7b7a      	ldrb	r2, [r7, #13]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	32ae      	adds	r2, #174	@ 0xae
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f12:	e158      	b.n	80061c6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d008      	beq.n	8005f2e <USBD_StdEPReq+0x9a>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	f300 8147 	bgt.w	80061b0 <USBD_StdEPReq+0x31c>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 809b 	beq.w	800605e <USBD_StdEPReq+0x1ca>
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d03c      	beq.n	8005fa6 <USBD_StdEPReq+0x112>
 8005f2c:	e140      	b.n	80061b0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d002      	beq.n	8005f40 <USBD_StdEPReq+0xac>
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d016      	beq.n	8005f6c <USBD_StdEPReq+0xd8>
 8005f3e:	e02c      	b.n	8005f9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <USBD_StdEPReq+0xce>
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	2b80      	cmp	r3, #128	@ 0x80
 8005f4a:	d00a      	beq.n	8005f62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fab5 	bl	80084c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f002 fab1 	bl	80084c0 <USBD_LL_StallEP>
 8005f5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f60:	e020      	b.n	8005fa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fc7c 	bl	8006862 <USBD_CtlError>
              break;
 8005f6a:	e01b      	b.n	8005fa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10e      	bne.n	8005f92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <USBD_StdEPReq+0xfe>
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b80      	cmp	r3, #128	@ 0x80
 8005f7e:	d008      	beq.n	8005f92 <USBD_StdEPReq+0xfe>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	88db      	ldrh	r3, [r3, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 fa97 	bl	80084c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fd43 	bl	8006a1e <USBD_CtlSendStatus>

              break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fc60 	bl	8006862 <USBD_CtlError>
              break;
 8005fa2:	bf00      	nop
          }
          break;
 8005fa4:	e109      	b.n	80061ba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d002      	beq.n	8005fb8 <USBD_StdEPReq+0x124>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d016      	beq.n	8005fe4 <USBD_StdEPReq+0x150>
 8005fb6:	e04b      	b.n	8006050 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <USBD_StdEPReq+0x146>
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b80      	cmp	r3, #128	@ 0x80
 8005fc2:	d00a      	beq.n	8005fda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 fa79 	bl	80084c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 fa75 	bl	80084c0 <USBD_LL_StallEP>
 8005fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd8:	e040      	b.n	800605c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc40 	bl	8006862 <USBD_CtlError>
              break;
 8005fe2:	e03b      	b.n	800605c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d136      	bne.n	800605a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fa7f 	bl	80084fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fd0c 	bl	8006a1e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fde3 	bl	8005bd6 <USBD_CoreFindEP>
 8006010:	4603      	mov	r3, r0
 8006012:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006014:	7b7b      	ldrb	r3, [r7, #13]
 8006016:	2bff      	cmp	r3, #255	@ 0xff
 8006018:	d01f      	beq.n	800605a <USBD_StdEPReq+0x1c6>
 800601a:	7b7b      	ldrb	r3, [r7, #13]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d11c      	bne.n	800605a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006020:	7b7a      	ldrb	r2, [r7, #13]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006028:	7b7a      	ldrb	r2, [r7, #13]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	32ae      	adds	r2, #174	@ 0xae
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006038:	7b7a      	ldrb	r2, [r7, #13]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32ae      	adds	r2, #174	@ 0xae
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800604e:	e004      	b.n	800605a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fc05 	bl	8006862 <USBD_CtlError>
              break;
 8006058:	e000      	b.n	800605c <USBD_StdEPReq+0x1c8>
              break;
 800605a:	bf00      	nop
          }
          break;
 800605c:	e0ad      	b.n	80061ba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d002      	beq.n	8006070 <USBD_StdEPReq+0x1dc>
 800606a:	2b03      	cmp	r3, #3
 800606c:	d033      	beq.n	80060d6 <USBD_StdEPReq+0x242>
 800606e:	e099      	b.n	80061a4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <USBD_StdEPReq+0x1f2>
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b80      	cmp	r3, #128	@ 0x80
 800607a:	d004      	beq.n	8006086 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fbef 	bl	8006862 <USBD_CtlError>
                break;
 8006084:	e093      	b.n	80061ae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da0b      	bge.n	80060a6 <USBD_StdEPReq+0x212>
 800608e:	7bbb      	ldrb	r3, [r7, #14]
 8006090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	3310      	adds	r3, #16
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	3304      	adds	r3, #4
 80060a4:	e00b      	b.n	80060be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	4413      	add	r3, r2
 80060bc:	3304      	adds	r3, #4
 80060be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	330e      	adds	r3, #14
 80060ca:	2202      	movs	r2, #2
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fc44 	bl	800695c <USBD_CtlSendData>
              break;
 80060d4:	e06b      	b.n	80061ae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da11      	bge.n	8006102 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	f003 020f 	and.w	r2, r3, #15
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	3323      	adds	r3, #35	@ 0x23
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d117      	bne.n	8006128 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fbb1 	bl	8006862 <USBD_CtlError>
                  break;
 8006100:	e055      	b.n	80061ae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fb9e 	bl	8006862 <USBD_CtlError>
                  break;
 8006126:	e042      	b.n	80061ae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800612c:	2b00      	cmp	r3, #0
 800612e:	da0b      	bge.n	8006148 <USBD_StdEPReq+0x2b4>
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	3310      	adds	r3, #16
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4413      	add	r3, r2
 8006144:	3304      	adds	r3, #4
 8006146:	e00b      	b.n	8006160 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <USBD_StdEPReq+0x2da>
 8006168:	7bbb      	ldrb	r3, [r7, #14]
 800616a:	2b80      	cmp	r3, #128	@ 0x80
 800616c:	d103      	bne.n	8006176 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	739a      	strb	r2, [r3, #14]
 8006174:	e00e      	b.n	8006194 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f002 f9de 	bl	800853c <USBD_LL_IsStallEP>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2201      	movs	r2, #1
 800618a:	739a      	strb	r2, [r3, #14]
 800618c:	e002      	b.n	8006194 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	330e      	adds	r3, #14
 8006198:	2202      	movs	r2, #2
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fbdd 	bl	800695c <USBD_CtlSendData>
              break;
 80061a2:	e004      	b.n	80061ae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb5b 	bl	8006862 <USBD_CtlError>
              break;
 80061ac:	bf00      	nop
          }
          break;
 80061ae:	e004      	b.n	80061ba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb55 	bl	8006862 <USBD_CtlError>
          break;
 80061b8:	bf00      	nop
      }
      break;
 80061ba:	e005      	b.n	80061c8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb4f 	bl	8006862 <USBD_CtlError>
      break;
 80061c4:	e000      	b.n	80061c8 <USBD_StdEPReq+0x334>
      break;
 80061c6:	bf00      	nop
  }

  return ret;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	0a1b      	lsrs	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	f200 8128 	bhi.w	800644a <USBD_GetDescriptor+0x276>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <USBD_GetDescriptor+0x2c>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	0800621d 	.word	0x0800621d
 8006204:	08006235 	.word	0x08006235
 8006208:	08006275 	.word	0x08006275
 800620c:	0800644b 	.word	0x0800644b
 8006210:	0800644b 	.word	0x0800644b
 8006214:	080063eb 	.word	0x080063eb
 8006218:	08006417 	.word	0x08006417
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7c12      	ldrb	r2, [r2, #16]
 8006228:	f107 0108 	add.w	r1, r7, #8
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
 8006230:	60f8      	str	r0, [r7, #12]
      break;
 8006232:	e112      	b.n	800645a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7c1b      	ldrb	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	f107 0208 	add.w	r2, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	2202      	movs	r2, #2
 8006254:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006256:	e100      	b.n	800645a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	f107 0208 	add.w	r2, r7, #8
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
 8006268:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	2202      	movs	r2, #2
 8006270:	701a      	strb	r2, [r3, #0]
      break;
 8006272:	e0f2      	b.n	800645a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	885b      	ldrh	r3, [r3, #2]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b05      	cmp	r3, #5
 800627c:	f200 80ac 	bhi.w	80063d8 <USBD_GetDescriptor+0x204>
 8006280:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <USBD_GetDescriptor+0xb4>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062d5 	.word	0x080062d5
 8006290:	08006309 	.word	0x08006309
 8006294:	0800633d 	.word	0x0800633d
 8006298:	08006371 	.word	0x08006371
 800629c:	080063a5 	.word	0x080063a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	7c12      	ldrb	r2, [r2, #16]
 80062b8:	f107 0108 	add.w	r1, r7, #8
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c2:	e091      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 facb 	bl	8006862 <USBD_CtlError>
            err++;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
 80062ce:	3301      	adds	r3, #1
 80062d0:	72fb      	strb	r3, [r7, #11]
          break;
 80062d2:	e089      	b.n	80063e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062f6:	e077      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fab1 	bl	8006862 <USBD_CtlError>
            err++;
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	3301      	adds	r3, #1
 8006304:	72fb      	strb	r3, [r7, #11]
          break;
 8006306:	e06f      	b.n	80063e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7c12      	ldrb	r2, [r2, #16]
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632a:	e05d      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa97 	bl	8006862 <USBD_CtlError>
            err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
          break;
 800633a:	e055      	b.n	80063e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	7c12      	ldrb	r2, [r2, #16]
 8006354:	f107 0108 	add.w	r1, r7, #8
 8006358:	4610      	mov	r0, r2
 800635a:	4798      	blx	r3
 800635c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800635e:	e043      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa7d 	bl	8006862 <USBD_CtlError>
            err++;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	3301      	adds	r3, #1
 800636c:	72fb      	strb	r3, [r7, #11]
          break;
 800636e:	e03b      	b.n	80063e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	7c12      	ldrb	r2, [r2, #16]
 8006388:	f107 0108 	add.w	r1, r7, #8
 800638c:	4610      	mov	r0, r2
 800638e:	4798      	blx	r3
 8006390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006392:	e029      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa63 	bl	8006862 <USBD_CtlError>
            err++;
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	3301      	adds	r3, #1
 80063a0:	72fb      	strb	r3, [r7, #11]
          break;
 80063a2:	e021      	b.n	80063e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063c6:	e00f      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa49 	bl	8006862 <USBD_CtlError>
            err++;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	3301      	adds	r3, #1
 80063d4:	72fb      	strb	r3, [r7, #11]
          break;
 80063d6:	e007      	b.n	80063e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa41 	bl	8006862 <USBD_CtlError>
          err++;
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	3301      	adds	r3, #1
 80063e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063e6:	bf00      	nop
      }
      break;
 80063e8:	e037      	b.n	800645a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7c1b      	ldrb	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fa:	f107 0208 	add.w	r2, r7, #8
 80063fe:	4610      	mov	r0, r2
 8006400:	4798      	blx	r3
 8006402:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006404:	e029      	b.n	800645a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa2a 	bl	8006862 <USBD_CtlError>
        err++;
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	3301      	adds	r3, #1
 8006412:	72fb      	strb	r3, [r7, #11]
      break;
 8006414:	e021      	b.n	800645a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7c1b      	ldrb	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10d      	bne.n	800643a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006426:	f107 0208 	add.w	r2, r7, #8
 800642a:	4610      	mov	r0, r2
 800642c:	4798      	blx	r3
 800642e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	2207      	movs	r2, #7
 8006436:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006438:	e00f      	b.n	800645a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa10 	bl	8006862 <USBD_CtlError>
        err++;
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	3301      	adds	r3, #1
 8006446:	72fb      	strb	r3, [r7, #11]
      break;
 8006448:	e007      	b.n	800645a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa08 	bl	8006862 <USBD_CtlError>
      err++;
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	3301      	adds	r3, #1
 8006456:	72fb      	strb	r3, [r7, #11]
      break;
 8006458:	bf00      	nop
  }

  if (err != 0U)
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11e      	bne.n	800649e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	88db      	ldrh	r3, [r3, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d016      	beq.n	8006496 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00e      	beq.n	800648c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88da      	ldrh	r2, [r3, #6]
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	4293      	cmp	r3, r2
 8006476:	bf28      	it	cs
 8006478:	4613      	movcs	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800647e:	893b      	ldrh	r3, [r7, #8]
 8006480:	461a      	mov	r2, r3
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fa69 	bl	800695c <USBD_CtlSendData>
 800648a:	e009      	b.n	80064a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9e7 	bl	8006862 <USBD_CtlError>
 8006494:	e004      	b.n	80064a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fac1 	bl	8006a1e <USBD_CtlSendStatus>
 800649c:	e000      	b.n	80064a0 <USBD_GetDescriptor+0x2cc>
    return;
 800649e:	bf00      	nop
  }
}
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	889b      	ldrh	r3, [r3, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d131      	bne.n	800651e <USBD_SetAddress+0x76>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	88db      	ldrh	r3, [r3, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12d      	bne.n	800651e <USBD_SetAddress+0x76>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064c8:	d829      	bhi.n	800651e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	885b      	ldrh	r3, [r3, #2]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d104      	bne.n	80064ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9bc 	bl	8006862 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ea:	e01d      	b.n	8006528 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7bfa      	ldrb	r2, [r7, #15]
 80064f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f002 f84b 	bl	8008594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa8d 	bl	8006a1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006512:	e009      	b.n	8006528 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651c:	e004      	b.n	8006528 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f99e 	bl	8006862 <USBD_CtlError>
  }
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b4e      	ldr	r3, [pc, #312]	@ (8006680 <USBD_SetConfig+0x150>)
 8006546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006548:	4b4d      	ldr	r3, [pc, #308]	@ (8006680 <USBD_SetConfig+0x150>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d905      	bls.n	800655c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f985 	bl	8006862 <USBD_CtlError>
    return USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e08c      	b.n	8006676 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d002      	beq.n	800656e <USBD_SetConfig+0x3e>
 8006568:	2b03      	cmp	r3, #3
 800656a:	d029      	beq.n	80065c0 <USBD_SetConfig+0x90>
 800656c:	e075      	b.n	800665a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800656e:	4b44      	ldr	r3, [pc, #272]	@ (8006680 <USBD_SetConfig+0x150>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d020      	beq.n	80065b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006576:	4b42      	ldr	r3, [pc, #264]	@ (8006680 <USBD_SetConfig+0x150>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006580:	4b3f      	ldr	r3, [pc, #252]	@ (8006680 <USBD_SetConfig+0x150>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fe ffcd 	bl	8005526 <USBD_SetClassConfig>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f962 	bl	8006862 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065a6:	e065      	b.n	8006674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa38 	bl	8006a1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2203      	movs	r2, #3
 80065b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065b6:	e05d      	b.n	8006674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa30 	bl	8006a1e <USBD_CtlSendStatus>
      break;
 80065be:	e059      	b.n	8006674 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006680 <USBD_SetConfig+0x150>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d112      	bne.n	80065ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80065d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006680 <USBD_SetConfig+0x150>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065da:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <USBD_SetConfig+0x150>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fe ffbc 	bl	800555e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa19 	bl	8006a1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065ec:	e042      	b.n	8006674 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065ee:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <USBD_SetConfig+0x150>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d02a      	beq.n	8006652 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fe ffaa 	bl	800555e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800660a:	4b1d      	ldr	r3, [pc, #116]	@ (8006680 <USBD_SetConfig+0x150>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006614:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <USBD_SetConfig+0x150>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fe ff83 	bl	8005526 <USBD_SetClassConfig>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00f      	beq.n	800664a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f918 	bl	8006862 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fe ff8f 	bl	800555e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006648:	e014      	b.n	8006674 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9e7 	bl	8006a1e <USBD_CtlSendStatus>
      break;
 8006650:	e010      	b.n	8006674 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9e3 	bl	8006a1e <USBD_CtlSendStatus>
      break;
 8006658:	e00c      	b.n	8006674 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f900 	bl	8006862 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006662:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <USBD_SetConfig+0x150>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fe ff78 	bl	800555e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800666e:	2303      	movs	r3, #3
 8006670:	73fb      	strb	r3, [r7, #15]
      break;
 8006672:	bf00      	nop
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000470 	.word	0x20000470

08006684 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	88db      	ldrh	r3, [r3, #6]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d004      	beq.n	80066a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8e2 	bl	8006862 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800669e:	e023      	b.n	80066e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	dc02      	bgt.n	80066b2 <USBD_GetConfig+0x2e>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dc03      	bgt.n	80066b8 <USBD_GetConfig+0x34>
 80066b0:	e015      	b.n	80066de <USBD_GetConfig+0x5a>
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d00b      	beq.n	80066ce <USBD_GetConfig+0x4a>
 80066b6:	e012      	b.n	80066de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3308      	adds	r3, #8
 80066c2:	2201      	movs	r2, #1
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f948 	bl	800695c <USBD_CtlSendData>
        break;
 80066cc:	e00c      	b.n	80066e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3304      	adds	r3, #4
 80066d2:	2201      	movs	r2, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f940 	bl	800695c <USBD_CtlSendData>
        break;
 80066dc:	e004      	b.n	80066e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f8be 	bl	8006862 <USBD_CtlError>
        break;
 80066e6:	bf00      	nop
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006700:	b2db      	uxtb	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	2b02      	cmp	r3, #2
 8006706:	d81e      	bhi.n	8006746 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	88db      	ldrh	r3, [r3, #6]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d004      	beq.n	800671a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f8a5 	bl	8006862 <USBD_CtlError>
        break;
 8006718:	e01a      	b.n	8006750 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 0202 	orr.w	r2, r3, #2
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	330c      	adds	r3, #12
 800673a:	2202      	movs	r2, #2
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f90c 	bl	800695c <USBD_CtlSendData>
      break;
 8006744:	e004      	b.n	8006750 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f88a 	bl	8006862 <USBD_CtlError>
      break;
 800674e:	bf00      	nop
  }
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	885b      	ldrh	r3, [r3, #2]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f953 	bl	8006a1e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006778:	e013      	b.n	80067a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d10b      	bne.n	800679a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	889b      	ldrh	r3, [r3, #4]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b29b      	uxth	r3, r3
 800678a:	b2da      	uxtb	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f943 	bl	8006a1e <USBD_CtlSendStatus>
}
 8006798:	e003      	b.n	80067a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f860 	bl	8006862 <USBD_CtlError>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d80b      	bhi.n	80067da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	885b      	ldrh	r3, [r3, #2]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10c      	bne.n	80067e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f923 	bl	8006a1e <USBD_CtlSendStatus>
      }
      break;
 80067d8:	e004      	b.n	80067e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f840 	bl	8006862 <USBD_CtlError>
      break;
 80067e2:	e000      	b.n	80067e6 <USBD_ClrFeature+0x3c>
      break;
 80067e4:	bf00      	nop
  }
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3301      	adds	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff fa3d 	bl	8005c98 <SWAPBYTE>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff fa30 	bl	8005c98 <SWAPBYTE>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fa23 	bl	8005c98 <SWAPBYTE>
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	80da      	strh	r2, [r3, #6]
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800686c:	2180      	movs	r1, #128	@ 0x80
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fe26 	bl	80084c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006874:	2100      	movs	r1, #0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fe22 	bl	80084c0 <USBD_LL_StallEP>
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d042      	beq.n	8006920 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800689e:	6938      	ldr	r0, [r7, #16]
 80068a0:	f000 f842 	bl	8006928 <USBD_GetLen>
 80068a4:	4603      	mov	r3, r0
 80068a6:	3301      	adds	r3, #1
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ae:	d808      	bhi.n	80068c2 <USBD_GetString+0x3e>
 80068b0:	6938      	ldr	r0, [r7, #16]
 80068b2:	f000 f839 	bl	8006928 <USBD_GetLen>
 80068b6:	4603      	mov	r3, r0
 80068b8:	3301      	adds	r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	e001      	b.n	80068c6 <USBD_GetString+0x42>
 80068c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4413      	add	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	3301      	adds	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	2203      	movs	r2, #3
 80068e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	3301      	adds	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068ec:	e013      	b.n	8006916 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	3301      	adds	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	3301      	adds	r3, #1
 8006914:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e7      	bne.n	80068ee <USBD_GetString+0x6a>
 800691e:	e000      	b.n	8006922 <USBD_GetString+0x9e>
    return;
 8006920:	bf00      	nop
  }
}
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006938:	e005      	b.n	8006946 <USBD_GetLen+0x1e>
  {
    len++;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	3301      	adds	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f5      	bne.n	800693a <USBD_GetLen+0x12>
  }

  return len;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2202      	movs	r2, #2
 800696c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f001 fe22 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	2100      	movs	r1, #0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 fe11 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2203      	movs	r2, #3
 80069ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	2100      	movs	r1, #0
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 fe11 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f001 fe00 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fdcc 	bl	80085d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2205      	movs	r2, #5
 8006a50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a54:	2300      	movs	r3, #0
 8006a56:	2200      	movs	r2, #0
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 fdda 	bl	8008614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f103 0208 	add.w	r2, r3, #8
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f103 0208 	add.w	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f103 0208 	add.w	r2, r3, #8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	601a      	str	r2, [r3, #0]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6892      	ldr	r2, [r2, #8]
 8006b22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6852      	ldr	r2, [r2, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d103      	bne.n	8006b40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	@ 0x38
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006baa:	23a0      	movs	r3, #160	@ 0xa0
 8006bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2ba0      	cmp	r3, #160	@ 0xa0
 8006bb2:	d00b      	beq.n	8006bcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	61bb      	str	r3, [r7, #24]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01e      	beq.n	8006c12 <xTaskCreateStatic+0xb2>
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01b      	beq.n	8006c12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bec:	2300      	movs	r3, #0
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	f107 0314 	add.w	r3, r7, #20
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f851 	bl	8006cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c0c:	f000 f8ee 	bl	8006dec <prvAddNewTaskToReadyList>
 8006c10:	e001      	b.n	8006c16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c16:	697b      	ldr	r3, [r7, #20]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	@ 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08c      	sub	sp, #48	@ 0x30
 8006c24:	af04      	add	r7, sp, #16
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fe67 	bl	8007908 <pvPortMalloc>
 8006c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c42:	20a0      	movs	r0, #160	@ 0xa0
 8006c44:	f000 fe60 	bl	8007908 <pvPortMalloc>
 8006c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c56:	e005      	b.n	8006c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f000 ff23 	bl	8007aa4 <vPortFree>
 8006c5e:	e001      	b.n	8006c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	9302      	str	r3, [sp, #8]
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f80f 	bl	8006cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c8e:	69f8      	ldr	r0, [r7, #28]
 8006c90:	f000 f8ac 	bl	8006dec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	e002      	b.n	8006ca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f023 0307 	bic.w	r3, r3, #7
 8006cd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	617b      	str	r3, [r7, #20]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01f      	beq.n	8006d3c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	e012      	b.n	8006d28 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	7819      	ldrb	r1, [r3, #0]
 8006d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	3334      	adds	r3, #52	@ 0x34
 8006d12:	460a      	mov	r2, r1
 8006d14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3301      	adds	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	d9e9      	bls.n	8006d02 <prvInitialiseNewTask+0x56>
 8006d2e:	e000      	b.n	8006d32 <prvInitialiseNewTask+0x86>
			{
				break;
 8006d30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d3a:	e003      	b.n	8006d44 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d901      	bls.n	8006d4e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d4a:	2306      	movs	r3, #6
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fea0 	bl	8006aaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fe9b 	bl	8006aaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	f1c3 0207 	rsb	r2, r3, #7
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	334c      	adds	r3, #76	@ 0x4c
 8006d9e:	224c      	movs	r2, #76	@ 0x4c
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fdc5 	bl	8008932 <memset>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	4a0d      	ldr	r2, [pc, #52]	@ (8006de0 <prvInitialiseNewTask+0x134>)
 8006dac:	651a      	str	r2, [r3, #80]	@ 0x50
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	4a0c      	ldr	r2, [pc, #48]	@ (8006de4 <prvInitialiseNewTask+0x138>)
 8006db2:	655a      	str	r2, [r3, #84]	@ 0x54
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	4a0c      	ldr	r2, [pc, #48]	@ (8006de8 <prvInitialiseNewTask+0x13c>)
 8006db8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68f9      	ldr	r1, [r7, #12]
 8006dbe:	69b8      	ldr	r0, [r7, #24]
 8006dc0:	f000 fb8e 	bl	80074e0 <pxPortInitialiseStack>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dd6:	bf00      	nop
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20005da8 	.word	0x20005da8
 8006de4:	20005e10 	.word	0x20005e10
 8006de8:	20005e78 	.word	0x20005e78

08006dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006df4:	f000 fca8 	bl	8007748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006df8:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea4 <prvAddNewTaskToReadyList+0xb8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	4a29      	ldr	r2, [pc, #164]	@ (8006ea4 <prvAddNewTaskToReadyList+0xb8>)
 8006e00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e02:	4b29      	ldr	r3, [pc, #164]	@ (8006ea8 <prvAddNewTaskToReadyList+0xbc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e0a:	4a27      	ldr	r2, [pc, #156]	@ (8006ea8 <prvAddNewTaskToReadyList+0xbc>)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e10:	4b24      	ldr	r3, [pc, #144]	@ (8006ea4 <prvAddNewTaskToReadyList+0xb8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d110      	bne.n	8006e3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e18:	f000 fa9e 	bl	8007358 <prvInitialiseTaskLists>
 8006e1c:	e00d      	b.n	8006e3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e1e:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <prvAddNewTaskToReadyList+0xc0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e26:	4b20      	ldr	r3, [pc, #128]	@ (8006ea8 <prvAddNewTaskToReadyList+0xbc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d802      	bhi.n	8006e3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e34:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <prvAddNewTaskToReadyList+0xbc>)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb0 <prvAddNewTaskToReadyList+0xc4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <prvAddNewTaskToReadyList+0xc4>)
 8006e42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	2201      	movs	r2, #1
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <prvAddNewTaskToReadyList+0xc8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <prvAddNewTaskToReadyList+0xc8>)
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <prvAddNewTaskToReadyList+0xcc>)
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7ff fe29 	bl	8006ac4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e72:	f000 fc9b 	bl	80077ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <prvAddNewTaskToReadyList+0xc0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00e      	beq.n	8006e9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <prvAddNewTaskToReadyList+0xbc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d207      	bcs.n	8006e9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <prvAddNewTaskToReadyList+0xd0>)
 8006e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000574 	.word	0x20000574
 8006ea8:	20000474 	.word	0x20000474
 8006eac:	20000580 	.word	0x20000580
 8006eb0:	20000590 	.word	0x20000590
 8006eb4:	2000057c 	.word	0x2000057c
 8006eb8:	20000478 	.word	0x20000478
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	@ 0x28
 8006ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ece:	463a      	mov	r2, r7
 8006ed0:	1d39      	adds	r1, r7, #4
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7f9 fb7a 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	460a      	mov	r2, r1
 8006eee:	4921      	ldr	r1, [pc, #132]	@ (8006f74 <vTaskStartScheduler+0xb4>)
 8006ef0:	4821      	ldr	r0, [pc, #132]	@ (8006f78 <vTaskStartScheduler+0xb8>)
 8006ef2:	f7ff fe35 	bl	8006b60 <xTaskCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a20      	ldr	r2, [pc, #128]	@ (8006f7c <vTaskStartScheduler+0xbc>)
 8006efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006efc:	4b1f      	ldr	r3, [pc, #124]	@ (8006f7c <vTaskStartScheduler+0xbc>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e001      	b.n	8006f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d11b      	bne.n	8006f4c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	613b      	str	r3, [r7, #16]
}
 8006f26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f28:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <vTaskStartScheduler+0xc0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	334c      	adds	r3, #76	@ 0x4c
 8006f2e:	4a15      	ldr	r2, [pc, #84]	@ (8006f84 <vTaskStartScheduler+0xc4>)
 8006f30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f32:	4b15      	ldr	r3, [pc, #84]	@ (8006f88 <vTaskStartScheduler+0xc8>)
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <vTaskStartScheduler+0xcc>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f40:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <vTaskStartScheduler+0xd0>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f46:	f000 fb5b 	bl	8007600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f4a:	e00f      	b.n	8006f6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10b      	bne.n	8006f6c <vTaskStartScheduler+0xac>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <vTaskStartScheduler+0xa8>
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	0800966c 	.word	0x0800966c
 8006f78:	08007329 	.word	0x08007329
 8006f7c:	20000598 	.word	0x20000598
 8006f80:	20000474 	.word	0x20000474
 8006f84:	2000010c 	.word	0x2000010c
 8006f88:	20000594 	.word	0x20000594
 8006f8c:	20000580 	.word	0x20000580
 8006f90:	20000578 	.word	0x20000578

08006f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f98:	4b04      	ldr	r3, [pc, #16]	@ (8006fac <vTaskSuspendAll+0x18>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a03      	ldr	r2, [pc, #12]	@ (8006fac <vTaskSuspendAll+0x18>)
 8006fa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fa2:	bf00      	nop
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000059c 	.word	0x2000059c

08006fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fbe:	4b42      	ldr	r3, [pc, #264]	@ (80070c8 <xTaskResumeAll+0x118>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <xTaskResumeAll+0x2e>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	603b      	str	r3, [r7, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fde:	f000 fbb3 	bl	8007748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fe2:	4b39      	ldr	r3, [pc, #228]	@ (80070c8 <xTaskResumeAll+0x118>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4a37      	ldr	r2, [pc, #220]	@ (80070c8 <xTaskResumeAll+0x118>)
 8006fea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fec:	4b36      	ldr	r3, [pc, #216]	@ (80070c8 <xTaskResumeAll+0x118>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d161      	bne.n	80070b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff4:	4b35      	ldr	r3, [pc, #212]	@ (80070cc <xTaskResumeAll+0x11c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05d      	beq.n	80070b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ffc:	e02e      	b.n	800705c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffe:	4b34      	ldr	r3, [pc, #208]	@ (80070d0 <xTaskResumeAll+0x120>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3318      	adds	r3, #24
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fd7e 	bl	8006b0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fd79 	bl	8006b0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	2201      	movs	r2, #1
 8007020:	409a      	lsls	r2, r3
 8007022:	4b2c      	ldr	r3, [pc, #176]	@ (80070d4 <xTaskResumeAll+0x124>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4313      	orrs	r3, r2
 8007028:	4a2a      	ldr	r2, [pc, #168]	@ (80070d4 <xTaskResumeAll+0x124>)
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4a27      	ldr	r2, [pc, #156]	@ (80070d8 <xTaskResumeAll+0x128>)
 800703a:	441a      	add	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7ff fd3e 	bl	8006ac4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704c:	4b23      	ldr	r3, [pc, #140]	@ (80070dc <xTaskResumeAll+0x12c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007056:	4b22      	ldr	r3, [pc, #136]	@ (80070e0 <xTaskResumeAll+0x130>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705c:	4b1c      	ldr	r3, [pc, #112]	@ (80070d0 <xTaskResumeAll+0x120>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1cc      	bne.n	8006ffe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800706a:	f000 fa19 	bl	80074a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706e:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <xTaskResumeAll+0x134>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800707a:	f000 f837 	bl	80070ec <xTaskIncrementTick>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007084:	4b16      	ldr	r3, [pc, #88]	@ (80070e0 <xTaskResumeAll+0x130>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3b01      	subs	r3, #1
 800708e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f1      	bne.n	800707a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <xTaskResumeAll+0x134>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709c:	4b10      	ldr	r3, [pc, #64]	@ (80070e0 <xTaskResumeAll+0x130>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a8:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <xTaskResumeAll+0x138>)
 80070aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b8:	f000 fb78 	bl	80077ac <vPortExitCritical>

	return xAlreadyYielded;
 80070bc:	68bb      	ldr	r3, [r7, #8]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	2000059c 	.word	0x2000059c
 80070cc:	20000574 	.word	0x20000574
 80070d0:	20000534 	.word	0x20000534
 80070d4:	2000057c 	.word	0x2000057c
 80070d8:	20000478 	.word	0x20000478
 80070dc:	20000474 	.word	0x20000474
 80070e0:	20000588 	.word	0x20000588
 80070e4:	20000584 	.word	0x20000584
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007234 <xTaskIncrementTick+0x148>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 808f 	bne.w	800721e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007100:	4b4d      	ldr	r3, [pc, #308]	@ (8007238 <xTaskIncrementTick+0x14c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007108:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <xTaskIncrementTick+0x14c>)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d121      	bne.n	8007158 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007114:	4b49      	ldr	r3, [pc, #292]	@ (800723c <xTaskIncrementTick+0x150>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <xTaskIncrementTick+0x4a>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	603b      	str	r3, [r7, #0]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xTaskIncrementTick+0x46>
 8007136:	4b41      	ldr	r3, [pc, #260]	@ (800723c <xTaskIncrementTick+0x150>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	4b40      	ldr	r3, [pc, #256]	@ (8007240 <xTaskIncrementTick+0x154>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3e      	ldr	r2, [pc, #248]	@ (800723c <xTaskIncrementTick+0x150>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	4a3e      	ldr	r2, [pc, #248]	@ (8007240 <xTaskIncrementTick+0x154>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	4b3e      	ldr	r3, [pc, #248]	@ (8007244 <xTaskIncrementTick+0x158>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	4a3c      	ldr	r2, [pc, #240]	@ (8007244 <xTaskIncrementTick+0x158>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	f000 f9a4 	bl	80074a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007158:	4b3b      	ldr	r3, [pc, #236]	@ (8007248 <xTaskIncrementTick+0x15c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d348      	bcc.n	80071f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007162:	4b36      	ldr	r3, [pc, #216]	@ (800723c <xTaskIncrementTick+0x150>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716c:	4b36      	ldr	r3, [pc, #216]	@ (8007248 <xTaskIncrementTick+0x15c>)
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	601a      	str	r2, [r3, #0]
					break;
 8007174:	e03e      	b.n	80071f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b31      	ldr	r3, [pc, #196]	@ (800723c <xTaskIncrementTick+0x150>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d203      	bcs.n	8007196 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800718e:	4a2e      	ldr	r2, [pc, #184]	@ (8007248 <xTaskIncrementTick+0x15c>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007194:	e02e      	b.n	80071f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3304      	adds	r3, #4
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fcb6 	bl	8006b0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	3318      	adds	r3, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fcad 	bl	8006b0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	2201      	movs	r2, #1
 80071b8:	409a      	lsls	r2, r3
 80071ba:	4b24      	ldr	r3, [pc, #144]	@ (800724c <xTaskIncrementTick+0x160>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4313      	orrs	r3, r2
 80071c0:	4a22      	ldr	r2, [pc, #136]	@ (800724c <xTaskIncrementTick+0x160>)
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071d2:	441a      	add	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7ff fc72 	bl	8006ac4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <xTaskIncrementTick+0x168>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3b9      	bcc.n	8007162 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f2:	e7b6      	b.n	8007162 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <xTaskIncrementTick+0x168>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fa:	4915      	ldr	r1, [pc, #84]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d901      	bls.n	8007210 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007210:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <xTaskIncrementTick+0x16c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e004      	b.n	8007228 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800721e:	4b0f      	ldr	r3, [pc, #60]	@ (800725c <xTaskIncrementTick+0x170>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a0d      	ldr	r2, [pc, #52]	@ (800725c <xTaskIncrementTick+0x170>)
 8007226:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007228:	697b      	ldr	r3, [r7, #20]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	2000059c 	.word	0x2000059c
 8007238:	20000578 	.word	0x20000578
 800723c:	2000052c 	.word	0x2000052c
 8007240:	20000530 	.word	0x20000530
 8007244:	2000058c 	.word	0x2000058c
 8007248:	20000594 	.word	0x20000594
 800724c:	2000057c 	.word	0x2000057c
 8007250:	20000478 	.word	0x20000478
 8007254:	20000474 	.word	0x20000474
 8007258:	20000588 	.word	0x20000588
 800725c:	20000584 	.word	0x20000584

08007260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007266:	4b2a      	ldr	r3, [pc, #168]	@ (8007310 <vTaskSwitchContext+0xb0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800726e:	4b29      	ldr	r3, [pc, #164]	@ (8007314 <vTaskSwitchContext+0xb4>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007274:	e045      	b.n	8007302 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007276:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <vTaskSwitchContext+0xb4>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727c:	4b26      	ldr	r3, [pc, #152]	@ (8007318 <vTaskSwitchContext+0xb8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	f1c3 031f 	rsb	r3, r3, #31
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	4922      	ldr	r1, [pc, #136]	@ (800731c <vTaskSwitchContext+0xbc>)
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x5e>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskSwitchContext+0x5a>
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a14      	ldr	r2, [pc, #80]	@ (800731c <vTaskSwitchContext+0xbc>)
 80072ca:	4413      	add	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3308      	adds	r3, #8
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d104      	bne.n	80072ee <vTaskSwitchContext+0x8e>
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <vTaskSwitchContext+0xc0>)
 80072f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072f8:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <vTaskSwitchContext+0xc0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	334c      	adds	r3, #76	@ 0x4c
 80072fe:	4a09      	ldr	r2, [pc, #36]	@ (8007324 <vTaskSwitchContext+0xc4>)
 8007300:	6013      	str	r3, [r2, #0]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	2000059c 	.word	0x2000059c
 8007314:	20000588 	.word	0x20000588
 8007318:	2000057c 	.word	0x2000057c
 800731c:	20000478 	.word	0x20000478
 8007320:	20000474 	.word	0x20000474
 8007324:	2000010c 	.word	0x2000010c

08007328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007330:	f000 f852 	bl	80073d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007334:	4b06      	ldr	r3, [pc, #24]	@ (8007350 <prvIdleTask+0x28>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d9f9      	bls.n	8007330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <prvIdleTask+0x2c>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800734c:	e7f0      	b.n	8007330 <prvIdleTask+0x8>
 800734e:	bf00      	nop
 8007350:	20000478 	.word	0x20000478
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
 8007362:	e00c      	b.n	800737e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a12      	ldr	r2, [pc, #72]	@ (80073b8 <prvInitialiseTaskLists+0x60>)
 8007370:	4413      	add	r3, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fb79 	bl	8006a6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3301      	adds	r3, #1
 800737c:	607b      	str	r3, [r7, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b06      	cmp	r3, #6
 8007382:	d9ef      	bls.n	8007364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007384:	480d      	ldr	r0, [pc, #52]	@ (80073bc <prvInitialiseTaskLists+0x64>)
 8007386:	f7ff fb70 	bl	8006a6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800738a:	480d      	ldr	r0, [pc, #52]	@ (80073c0 <prvInitialiseTaskLists+0x68>)
 800738c:	f7ff fb6d 	bl	8006a6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007390:	480c      	ldr	r0, [pc, #48]	@ (80073c4 <prvInitialiseTaskLists+0x6c>)
 8007392:	f7ff fb6a 	bl	8006a6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007396:	480c      	ldr	r0, [pc, #48]	@ (80073c8 <prvInitialiseTaskLists+0x70>)
 8007398:	f7ff fb67 	bl	8006a6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800739c:	480b      	ldr	r0, [pc, #44]	@ (80073cc <prvInitialiseTaskLists+0x74>)
 800739e:	f7ff fb64 	bl	8006a6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073a2:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <prvInitialiseTaskLists+0x78>)
 80073a4:	4a05      	ldr	r2, [pc, #20]	@ (80073bc <prvInitialiseTaskLists+0x64>)
 80073a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <prvInitialiseTaskLists+0x7c>)
 80073aa:	4a05      	ldr	r2, [pc, #20]	@ (80073c0 <prvInitialiseTaskLists+0x68>)
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000478 	.word	0x20000478
 80073bc:	20000504 	.word	0x20000504
 80073c0:	20000518 	.word	0x20000518
 80073c4:	20000534 	.word	0x20000534
 80073c8:	20000548 	.word	0x20000548
 80073cc:	20000560 	.word	0x20000560
 80073d0:	2000052c 	.word	0x2000052c
 80073d4:	20000530 	.word	0x20000530

080073d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073de:	e019      	b.n	8007414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073e0:	f000 f9b2 	bl	8007748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <prvCheckTasksWaitingTermination+0x50>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fb8b 	bl	8006b0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073f6:	4b0d      	ldr	r3, [pc, #52]	@ (800742c <prvCheckTasksWaitingTermination+0x54>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a0b      	ldr	r2, [pc, #44]	@ (800742c <prvCheckTasksWaitingTermination+0x54>)
 80073fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007400:	4b0b      	ldr	r3, [pc, #44]	@ (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3b01      	subs	r3, #1
 8007406:	4a0a      	ldr	r2, [pc, #40]	@ (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800740a:	f000 f9cf 	bl	80077ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f810 	bl	8007434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <prvCheckTasksWaitingTermination+0x58>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e1      	bne.n	80073e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000548 	.word	0x20000548
 800742c:	20000574 	.word	0x20000574
 8007430:	2000055c 	.word	0x2000055c

08007434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	334c      	adds	r3, #76	@ 0x4c
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fa8f 	bl	8008964 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fb25 	bl	8007aa4 <vPortFree>
				vPortFree( pxTCB );
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fb22 	bl	8007aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007460:	e019      	b.n	8007496 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007468:	2b01      	cmp	r3, #1
 800746a:	d103      	bne.n	8007474 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb19 	bl	8007aa4 <vPortFree>
	}
 8007472:	e010      	b.n	8007496 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800747a:	2b02      	cmp	r3, #2
 800747c:	d00b      	beq.n	8007496 <prvDeleteTCB+0x62>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	60fb      	str	r3, [r7, #12]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <prvDeleteTCB+0x5e>
	}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074a6:	4b0c      	ldr	r3, [pc, #48]	@ (80074d8 <prvResetNextTaskUnblockTime+0x38>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <prvResetNextTaskUnblockTime+0x3c>)
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074b8:	e008      	b.n	80074cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <prvResetNextTaskUnblockTime+0x38>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4a04      	ldr	r2, [pc, #16]	@ (80074dc <prvResetNextTaskUnblockTime+0x3c>)
 80074ca:	6013      	str	r3, [r2, #0]
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	2000052c 	.word	0x2000052c
 80074dc:	20000594 	.word	0x20000594

080074e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3b04      	subs	r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3b04      	subs	r3, #4
 80074fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3b04      	subs	r3, #4
 800750e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007510:	4a0c      	ldr	r2, [pc, #48]	@ (8007544 <pxPortInitialiseStack+0x64>)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b14      	subs	r3, #20
 800751a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3b04      	subs	r3, #4
 8007526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f06f 0202 	mvn.w	r2, #2
 800752e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3b20      	subs	r3, #32
 8007534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	08007549 	.word	0x08007549

08007548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007552:	4b13      	ldr	r3, [pc, #76]	@ (80075a0 <prvTaskExitError+0x58>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d00b      	beq.n	8007574 <prvTaskExitError+0x2c>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60fb      	str	r3, [r7, #12]
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <prvTaskExitError+0x28>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	60bb      	str	r3, [r7, #8]
}
 8007586:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007588:	bf00      	nop
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0fc      	beq.n	800758a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000098 	.word	0x20000098
	...

080075b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <pxCurrentTCBConst2>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	f380 8809 	msr	PSP, r0
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8811 	msr	BASEPRI, r0
 80075ca:	4770      	bx	lr
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst2>:
 80075d0:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075d8:	4808      	ldr	r0, [pc, #32]	@ (80075fc <prvPortStartFirstTask+0x24>)
 80075da:	6800      	ldr	r0, [r0, #0]
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f380 8808 	msr	MSP, r0
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8814 	msr	CONTROL, r0
 80075ea:	b662      	cpsie	i
 80075ec:	b661      	cpsie	f
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	df00      	svc	0
 80075f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075fa:	bf00      	nop
 80075fc:	e000ed08 	.word	0xe000ed08

08007600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007606:	4b47      	ldr	r3, [pc, #284]	@ (8007724 <xPortStartScheduler+0x124>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a47      	ldr	r2, [pc, #284]	@ (8007728 <xPortStartScheduler+0x128>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10b      	bne.n	8007628 <xPortStartScheduler+0x28>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fb      	str	r3, [r7, #12]
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007628:	4b3e      	ldr	r3, [pc, #248]	@ (8007724 <xPortStartScheduler+0x124>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3f      	ldr	r2, [pc, #252]	@ (800772c <xPortStartScheduler+0x12c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d10b      	bne.n	800764a <xPortStartScheduler+0x4a>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	613b      	str	r3, [r7, #16]
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	e7fd      	b.n	8007646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800764a:	4b39      	ldr	r3, [pc, #228]	@ (8007730 <xPortStartScheduler+0x130>)
 800764c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	22ff      	movs	r2, #255	@ 0xff
 800765a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800766c:	b2da      	uxtb	r2, r3
 800766e:	4b31      	ldr	r3, [pc, #196]	@ (8007734 <xPortStartScheduler+0x134>)
 8007670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <xPortStartScheduler+0x138>)
 8007674:	2207      	movs	r2, #7
 8007676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007678:	e009      	b.n	800768e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800767a:	4b2f      	ldr	r3, [pc, #188]	@ (8007738 <xPortStartScheduler+0x138>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3b01      	subs	r3, #1
 8007680:	4a2d      	ldr	r2, [pc, #180]	@ (8007738 <xPortStartScheduler+0x138>)
 8007682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b80      	cmp	r3, #128	@ 0x80
 8007698:	d0ef      	beq.n	800767a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800769a:	4b27      	ldr	r3, [pc, #156]	@ (8007738 <xPortStartScheduler+0x138>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1c3 0307 	rsb	r3, r3, #7
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00b      	beq.n	80076be <xPortStartScheduler+0xbe>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60bb      	str	r3, [r7, #8]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076be:	4b1e      	ldr	r3, [pc, #120]	@ (8007738 <xPortStartScheduler+0x138>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007738 <xPortStartScheduler+0x138>)
 80076c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <xPortStartScheduler+0x138>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076d0:	4a19      	ldr	r2, [pc, #100]	@ (8007738 <xPortStartScheduler+0x138>)
 80076d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076dc:	4b17      	ldr	r3, [pc, #92]	@ (800773c <xPortStartScheduler+0x13c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a16      	ldr	r2, [pc, #88]	@ (800773c <xPortStartScheduler+0x13c>)
 80076e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076e8:	4b14      	ldr	r3, [pc, #80]	@ (800773c <xPortStartScheduler+0x13c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a13      	ldr	r2, [pc, #76]	@ (800773c <xPortStartScheduler+0x13c>)
 80076ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f4:	f000 f8da 	bl	80078ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076f8:	4b11      	ldr	r3, [pc, #68]	@ (8007740 <xPortStartScheduler+0x140>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076fe:	f000 f8f9 	bl	80078f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007702:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <xPortStartScheduler+0x144>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a0f      	ldr	r2, [pc, #60]	@ (8007744 <xPortStartScheduler+0x144>)
 8007708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800770c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800770e:	f7ff ff63 	bl	80075d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007712:	f7ff fda5 	bl	8007260 <vTaskSwitchContext>
	prvTaskExitError();
 8007716:	f7ff ff17 	bl	8007548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	e000ed00 	.word	0xe000ed00
 8007728:	410fc271 	.word	0x410fc271
 800772c:	410fc270 	.word	0x410fc270
 8007730:	e000e400 	.word	0xe000e400
 8007734:	200005a0 	.word	0x200005a0
 8007738:	200005a4 	.word	0x200005a4
 800773c:	e000ed20 	.word	0xe000ed20
 8007740:	20000098 	.word	0x20000098
 8007744:	e000ef34 	.word	0xe000ef34

08007748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <vPortEnterCritical+0x5c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3301      	adds	r3, #1
 8007768:	4a0e      	ldr	r2, [pc, #56]	@ (80077a4 <vPortEnterCritical+0x5c>)
 800776a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800776c:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <vPortEnterCritical+0x5c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d110      	bne.n	8007796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007774:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <vPortEnterCritical+0x60>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <vPortEnterCritical+0x4e>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	603b      	str	r3, [r7, #0]
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <vPortEnterCritical+0x4a>
	}
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000098 	.word	0x20000098
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <vPortExitCritical+0x50>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10b      	bne.n	80077d2 <vPortExitCritical+0x26>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	607b      	str	r3, [r7, #4]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <vPortExitCritical+0x50>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4a08      	ldr	r2, [pc, #32]	@ (80077fc <vPortExitCritical+0x50>)
 80077da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077dc:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <vPortExitCritical+0x50>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d105      	bne.n	80077f0 <vPortExitCritical+0x44>
 80077e4:	2300      	movs	r3, #0
 80077e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	20000098 	.word	0x20000098

08007800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007800:	f3ef 8009 	mrs	r0, PSP
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <pxCurrentTCBConst>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	f01e 0f10 	tst.w	lr, #16
 8007810:	bf08      	it	eq
 8007812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007824:	f380 8811 	msr	BASEPRI, r0
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f7ff fd16 	bl	8007260 <vTaskSwitchContext>
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f380 8811 	msr	BASEPRI, r0
 800783c:	bc09      	pop	{r0, r3}
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f01e 0f10 	tst.w	lr, #16
 800784a:	bf08      	it	eq
 800784c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007850:	f380 8809 	msr	PSP, r0
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst>:
 8007860:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007882:	f7ff fc33 	bl	80070ec <xTaskIncrementTick>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <SysTick_Handler+0x40>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f383 8811 	msr	BASEPRI, r3
}
 800789e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078b0:	4b0b      	ldr	r3, [pc, #44]	@ (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <vPortSetupTimerInterrupt+0x38>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078bc:	4b0a      	ldr	r3, [pc, #40]	@ (80078e8 <vPortSetupTimerInterrupt+0x3c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	@ (80078ec <vPortSetupTimerInterrupt+0x40>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	099b      	lsrs	r3, r3, #6
 80078c8:	4a09      	ldr	r2, [pc, #36]	@ (80078f0 <vPortSetupTimerInterrupt+0x44>)
 80078ca:	3b01      	subs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ce:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <vPortSetupTimerInterrupt+0x34>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	e000e010 	.word	0xe000e010
 80078e4:	e000e018 	.word	0xe000e018
 80078e8:	20000000 	.word	0x20000000
 80078ec:	10624dd3 	.word	0x10624dd3
 80078f0:	e000e014 	.word	0xe000e014

080078f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007904 <vPortEnableVFP+0x10>
 80078f8:	6801      	ldr	r1, [r0, #0]
 80078fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078fe:	6001      	str	r1, [r0, #0]
 8007900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007902:	bf00      	nop
 8007904:	e000ed88 	.word	0xe000ed88

08007908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	@ 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007914:	f7ff fb3e 	bl	8006f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007918:	4b5c      	ldr	r3, [pc, #368]	@ (8007a8c <pvPortMalloc+0x184>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007920:	f000 f924 	bl	8007b6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007924:	4b5a      	ldr	r3, [pc, #360]	@ (8007a90 <pvPortMalloc+0x188>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8095 	bne.w	8007a5c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01e      	beq.n	8007976 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007938:	2208      	movs	r2, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d015      	beq.n	8007976 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	3308      	adds	r3, #8
 8007952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <pvPortMalloc+0x6e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	617b      	str	r3, [r7, #20]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d06f      	beq.n	8007a5c <pvPortMalloc+0x154>
 800797c:	4b45      	ldr	r3, [pc, #276]	@ (8007a94 <pvPortMalloc+0x18c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d86a      	bhi.n	8007a5c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007986:	4b44      	ldr	r3, [pc, #272]	@ (8007a98 <pvPortMalloc+0x190>)
 8007988:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800798a:	4b43      	ldr	r3, [pc, #268]	@ (8007a98 <pvPortMalloc+0x190>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007990:	e004      	b.n	800799c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <pvPortMalloc+0xa6>
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f1      	bne.n	8007992 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ae:	4b37      	ldr	r3, [pc, #220]	@ (8007a8c <pvPortMalloc+0x184>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d051      	beq.n	8007a5c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2208      	movs	r2, #8
 80079be:	4413      	add	r3, r2
 80079c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	2308      	movs	r3, #8
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d920      	bls.n	8007a1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <pvPortMalloc+0xfc>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	613b      	str	r3, [r7, #16]
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	e7fd      	b.n	8007a00 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a16:	69b8      	ldr	r0, [r7, #24]
 8007a18:	f000 f90a 	bl	8007c30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <pvPortMalloc+0x18c>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	4a1b      	ldr	r2, [pc, #108]	@ (8007a94 <pvPortMalloc+0x18c>)
 8007a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <pvPortMalloc+0x18c>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a9c <pvPortMalloc+0x194>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d203      	bcs.n	8007a3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a36:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <pvPortMalloc+0x18c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a18      	ldr	r2, [pc, #96]	@ (8007a9c <pvPortMalloc+0x194>)
 8007a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	4b13      	ldr	r3, [pc, #76]	@ (8007a90 <pvPortMalloc+0x188>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a52:	4b13      	ldr	r3, [pc, #76]	@ (8007aa0 <pvPortMalloc+0x198>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3301      	adds	r3, #1
 8007a58:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <pvPortMalloc+0x198>)
 8007a5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a5c:	f7ff faa8 	bl	8006fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <pvPortMalloc+0x17a>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	60fb      	str	r3, [r7, #12]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <pvPortMalloc+0x176>
	return pvReturn;
 8007a82:	69fb      	ldr	r3, [r7, #28]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	@ 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200041b0 	.word	0x200041b0
 8007a90:	200041c4 	.word	0x200041c4
 8007a94:	200041b4 	.word	0x200041b4
 8007a98:	200041a8 	.word	0x200041a8
 8007a9c:	200041b8 	.word	0x200041b8
 8007aa0:	200041bc 	.word	0x200041bc

08007aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d04f      	beq.n	8007b56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	425b      	negs	r3, r3
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4413      	add	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b25      	ldr	r3, [pc, #148]	@ (8007b60 <vPortFree+0xbc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <vPortFree+0x46>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60fb      	str	r3, [r7, #12]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <vPortFree+0x66>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60bb      	str	r3, [r7, #8]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <vPortFree+0xbc>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01e      	beq.n	8007b56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d11a      	bne.n	8007b56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	4b0e      	ldr	r3, [pc, #56]	@ (8007b60 <vPortFree+0xbc>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b30:	f7ff fa30 	bl	8006f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <vPortFree+0xc0>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	4a09      	ldr	r2, [pc, #36]	@ (8007b64 <vPortFree+0xc0>)
 8007b40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b42:	6938      	ldr	r0, [r7, #16]
 8007b44:	f000 f874 	bl	8007c30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b48:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <vPortFree+0xc4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	4a06      	ldr	r2, [pc, #24]	@ (8007b68 <vPortFree+0xc4>)
 8007b50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b52:	f7ff fa2d 	bl	8006fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b56:	bf00      	nop
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200041c4 	.word	0x200041c4
 8007b64:	200041b4 	.word	0x200041b4
 8007b68:	200041c0 	.word	0x200041c0

08007b6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007b76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b78:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <prvHeapInit+0xac>)
 8007b7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00c      	beq.n	8007ba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3307      	adds	r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c18 <prvHeapInit+0xac>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <prvHeapInit+0xb0>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007baa:	4b1c      	ldr	r3, [pc, #112]	@ (8007c1c <prvHeapInit+0xb0>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <prvHeapInit+0xb4>)
 8007bcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bce:	4b14      	ldr	r3, [pc, #80]	@ (8007c20 <prvHeapInit+0xb4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bd6:	4b12      	ldr	r3, [pc, #72]	@ (8007c20 <prvHeapInit+0xb4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bec:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <prvHeapInit+0xb4>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8007c24 <prvHeapInit+0xb8>)
 8007bfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	4a09      	ldr	r2, [pc, #36]	@ (8007c28 <prvHeapInit+0xbc>)
 8007c02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c04:	4b09      	ldr	r3, [pc, #36]	@ (8007c2c <prvHeapInit+0xc0>)
 8007c06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c0a:	601a      	str	r2, [r3, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	200005a8 	.word	0x200005a8
 8007c1c:	200041a8 	.word	0x200041a8
 8007c20:	200041b0 	.word	0x200041b0
 8007c24:	200041b8 	.word	0x200041b8
 8007c28:	200041b4 	.word	0x200041b4
 8007c2c:	200041c4 	.word	0x200041c4

08007c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c38:	4b28      	ldr	r3, [pc, #160]	@ (8007cdc <prvInsertBlockIntoFreeList+0xac>)
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e002      	b.n	8007c44 <prvInsertBlockIntoFreeList+0x14>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d8f7      	bhi.n	8007c3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	4413      	add	r3, r2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d108      	bne.n	8007c72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	441a      	add	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d118      	bne.n	8007cb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d00d      	beq.n	8007cae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	e008      	b.n	8007cc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e003      	b.n	8007cc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d002      	beq.n	8007cce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	200041a8 	.word	0x200041a8
 8007ce0:	200041b0 	.word	0x200041b0

08007ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4912      	ldr	r1, [pc, #72]	@ (8007d34 <MX_USB_DEVICE_Init+0x50>)
 8007cec:	4812      	ldr	r0, [pc, #72]	@ (8007d38 <MX_USB_DEVICE_Init+0x54>)
 8007cee:	f7fd fb9d 	bl	800542c <USBD_Init>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cf8:	f7f8 fdbc 	bl	8000874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cfc:	490f      	ldr	r1, [pc, #60]	@ (8007d3c <MX_USB_DEVICE_Init+0x58>)
 8007cfe:	480e      	ldr	r0, [pc, #56]	@ (8007d38 <MX_USB_DEVICE_Init+0x54>)
 8007d00:	f7fd fbc4 	bl	800548c <USBD_RegisterClass>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d0a:	f7f8 fdb3 	bl	8000874 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d0e:	490c      	ldr	r1, [pc, #48]	@ (8007d40 <MX_USB_DEVICE_Init+0x5c>)
 8007d10:	4809      	ldr	r0, [pc, #36]	@ (8007d38 <MX_USB_DEVICE_Init+0x54>)
 8007d12:	f7fd fabb 	bl	800528c <USBD_CDC_RegisterInterface>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d1c:	f7f8 fdaa 	bl	8000874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d20:	4805      	ldr	r0, [pc, #20]	@ (8007d38 <MX_USB_DEVICE_Init+0x54>)
 8007d22:	f7fd fbe9 	bl	80054f8 <USBD_Start>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d2c:	f7f8 fda2 	bl	8000874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d30:	bf00      	nop
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200000b0 	.word	0x200000b0
 8007d38:	200041c8 	.word	0x200041c8
 8007d3c:	20000018 	.word	0x20000018
 8007d40:	2000009c 	.word	0x2000009c

08007d44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4905      	ldr	r1, [pc, #20]	@ (8007d60 <CDC_Init_FS+0x1c>)
 8007d4c:	4805      	ldr	r0, [pc, #20]	@ (8007d64 <CDC_Init_FS+0x20>)
 8007d4e:	f7fd fab7 	bl	80052c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d52:	4905      	ldr	r1, [pc, #20]	@ (8007d68 <CDC_Init_FS+0x24>)
 8007d54:	4803      	ldr	r0, [pc, #12]	@ (8007d64 <CDC_Init_FS+0x20>)
 8007d56:	f7fd fad5 	bl	8005304 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20004ca4 	.word	0x20004ca4
 8007d64:	200041c8 	.word	0x200041c8
 8007d68:	200044a4 	.word	0x200044a4

08007d6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	2b23      	cmp	r3, #35	@ 0x23
 8007d90:	d84a      	bhi.n	8007e28 <CDC_Control_FS+0xac>
 8007d92:	a201      	add	r2, pc, #4	@ (adr r2, 8007d98 <CDC_Control_FS+0x1c>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007e29 	.word	0x08007e29
 8007da4:	08007e29 	.word	0x08007e29
 8007da8:	08007e29 	.word	0x08007e29
 8007dac:	08007e29 	.word	0x08007e29
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e29 	.word	0x08007e29
 8007db8:	08007e29 	.word	0x08007e29
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007e29 	.word	0x08007e29
 8007dc8:	08007e29 	.word	0x08007e29
 8007dcc:	08007e29 	.word	0x08007e29
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007e29 	.word	0x08007e29
 8007ddc:	08007e29 	.word	0x08007e29
 8007de0:	08007e29 	.word	0x08007e29
 8007de4:	08007e29 	.word	0x08007e29
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	08007e29 	.word	0x08007e29
 8007df0:	08007e29 	.word	0x08007e29
 8007df4:	08007e29 	.word	0x08007e29
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007e29 	.word	0x08007e29
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e29 	.word	0x08007e29
 8007e10:	08007e29 	.word	0x08007e29
 8007e14:	08007e29 	.word	0x08007e29
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e29 	.word	0x08007e29
 8007e20:	08007e29 	.word	0x08007e29
 8007e24:	08007e29 	.word	0x08007e29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e28:	bf00      	nop
  }

  return (USBD_OK);
 8007e2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4805      	ldr	r0, [pc, #20]	@ (8007e5c <CDC_Receive_FS+0x24>)
 8007e46:	f7fd fa5d 	bl	8005304 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e4a:	4804      	ldr	r0, [pc, #16]	@ (8007e5c <CDC_Receive_FS+0x24>)
 8007e4c:	f7fd fab8 	bl	80053c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200041c8 	.word	0x200041c8

08007e60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e70:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <CDC_Transmit_FS+0x48>)
 8007e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e00b      	b.n	8007e9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4806      	ldr	r0, [pc, #24]	@ (8007ea8 <CDC_Transmit_FS+0x48>)
 8007e8e:	f7fd fa17 	bl	80052c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e92:	4805      	ldr	r0, [pc, #20]	@ (8007ea8 <CDC_Transmit_FS+0x48>)
 8007e94:	f7fd fa54 	bl	8005340 <USBD_CDC_TransmitPacket>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200041c8 	.word	0x200041c8

08007eac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2212      	movs	r2, #18
 8007ee0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ee2:	4b03      	ldr	r3, [pc, #12]	@ (8007ef0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	200000cc 	.word	0x200000cc

08007ef4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2204      	movs	r2, #4
 8007f04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200000e0 	.word	0x200000e0

08007f18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4907      	ldr	r1, [pc, #28]	@ (8007f4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f2e:	4808      	ldr	r0, [pc, #32]	@ (8007f50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f30:	f7fe fca8 	bl	8006884 <USBD_GetString>
 8007f34:	e004      	b.n	8007f40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4904      	ldr	r1, [pc, #16]	@ (8007f4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f3a:	4805      	ldr	r0, [pc, #20]	@ (8007f50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f3c:	f7fe fca2 	bl	8006884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f40:	4b02      	ldr	r3, [pc, #8]	@ (8007f4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200054a4 	.word	0x200054a4
 8007f50:	08009674 	.word	0x08009674

08007f54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	4904      	ldr	r1, [pc, #16]	@ (8007f74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f64:	4804      	ldr	r0, [pc, #16]	@ (8007f78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f66:	f7fe fc8d 	bl	8006884 <USBD_GetString>
  return USBD_StrDesc;
 8007f6a:	4b02      	ldr	r3, [pc, #8]	@ (8007f74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	200054a4 	.word	0x200054a4
 8007f78:	0800968c 	.word	0x0800968c

08007f7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	221a      	movs	r2, #26
 8007f8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f8e:	f000 f843 	bl	8008018 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f92:	4b02      	ldr	r3, [pc, #8]	@ (8007f9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200000e4 	.word	0x200000e4

08007fa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d105      	bne.n	8007fbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4907      	ldr	r1, [pc, #28]	@ (8007fd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fb6:	4808      	ldr	r0, [pc, #32]	@ (8007fd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fb8:	f7fe fc64 	bl	8006884 <USBD_GetString>
 8007fbc:	e004      	b.n	8007fc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4904      	ldr	r1, [pc, #16]	@ (8007fd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fc2:	4805      	ldr	r0, [pc, #20]	@ (8007fd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fc4:	f7fe fc5e 	bl	8006884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc8:	4b02      	ldr	r3, [pc, #8]	@ (8007fd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200054a4 	.word	0x200054a4
 8007fd8:	080096a0 	.word	0x080096a0

08007fdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	4907      	ldr	r1, [pc, #28]	@ (8008010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ff2:	4808      	ldr	r0, [pc, #32]	@ (8008014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ff4:	f7fe fc46 	bl	8006884 <USBD_GetString>
 8007ff8:	e004      	b.n	8008004 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4904      	ldr	r1, [pc, #16]	@ (8008010 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ffe:	4805      	ldr	r0, [pc, #20]	@ (8008014 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008000:	f7fe fc40 	bl	8006884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008004:	4b02      	ldr	r3, [pc, #8]	@ (8008010 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200054a4 	.word	0x200054a4
 8008014:	080096ac 	.word	0x080096ac

08008018 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800801e:	4b0f      	ldr	r3, [pc, #60]	@ (800805c <Get_SerialNum+0x44>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008024:	4b0e      	ldr	r3, [pc, #56]	@ (8008060 <Get_SerialNum+0x48>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800802a:	4b0e      	ldr	r3, [pc, #56]	@ (8008064 <Get_SerialNum+0x4c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800803e:	2208      	movs	r2, #8
 8008040:	4909      	ldr	r1, [pc, #36]	@ (8008068 <Get_SerialNum+0x50>)
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f814 	bl	8008070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008048:	2204      	movs	r2, #4
 800804a:	4908      	ldr	r1, [pc, #32]	@ (800806c <Get_SerialNum+0x54>)
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f000 f80f 	bl	8008070 <IntToUnicode>
  }
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	1fff7a10 	.word	0x1fff7a10
 8008060:	1fff7a14 	.word	0x1fff7a14
 8008064:	1fff7a18 	.word	0x1fff7a18
 8008068:	200000e6 	.word	0x200000e6
 800806c:	200000f6 	.word	0x200000f6

08008070 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008082:	2300      	movs	r3, #0
 8008084:	75fb      	strb	r3, [r7, #23]
 8008086:	e027      	b.n	80080d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	0f1b      	lsrs	r3, r3, #28
 800808c:	2b09      	cmp	r3, #9
 800808e:	d80b      	bhi.n	80080a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	0f1b      	lsrs	r3, r3, #28
 8008094:	b2da      	uxtb	r2, r3
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	4619      	mov	r1, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	440b      	add	r3, r1
 80080a0:	3230      	adds	r2, #48	@ 0x30
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e00a      	b.n	80080be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	0f1b      	lsrs	r3, r3, #28
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	4619      	mov	r1, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	440b      	add	r3, r1
 80080b8:	3237      	adds	r2, #55	@ 0x37
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	3301      	adds	r3, #1
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4413      	add	r3, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	3301      	adds	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
 80080d8:	7dfa      	ldrb	r2, [r7, #23]
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d3d3      	bcc.n	8008088 <IntToUnicode+0x18>
  }
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	@ 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	60da      	str	r2, [r3, #12]
 8008106:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008110:	d13a      	bne.n	8008188 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008112:	2300      	movs	r3, #0
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	4b1e      	ldr	r3, [pc, #120]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811a:	4a1d      	ldr	r2, [pc, #116]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	6313      	str	r3, [r2, #48]	@ 0x30
 8008122:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800812e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008134:	2302      	movs	r3, #2
 8008136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800813c:	2303      	movs	r3, #3
 800813e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008140:	230a      	movs	r3, #10
 8008142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4619      	mov	r1, r3
 800814a:	4812      	ldr	r0, [pc, #72]	@ (8008194 <HAL_PCD_MspInit+0xa4>)
 800814c:	f7f8 fe7c 	bl	8000e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008150:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008154:	4a0e      	ldr	r2, [pc, #56]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815a:	6353      	str	r3, [r2, #52]	@ 0x34
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008164:	4a0a      	ldr	r2, [pc, #40]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 8008166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800816a:	6453      	str	r3, [r2, #68]	@ 0x44
 800816c:	4b08      	ldr	r3, [pc, #32]	@ (8008190 <HAL_PCD_MspInit+0xa0>)
 800816e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008178:	2200      	movs	r2, #0
 800817a:	2105      	movs	r1, #5
 800817c:	2043      	movs	r0, #67	@ 0x43
 800817e:	f7f8 fe39 	bl	8000df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008182:	2043      	movs	r0, #67	@ 0x43
 8008184:	f7f8 fe52 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008188:	bf00      	nop
 800818a:	3728      	adds	r7, #40	@ 0x28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40023800 	.word	0x40023800
 8008194:	40020000 	.word	0x40020000

08008198 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f7fd f9ef 	bl	8005592 <USBD_LL_SetupStage>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7fd fa29 	bl	800563c <USBD_LL_DataOutStage>
}
 80081ea:	bf00      	nop
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4613      	mov	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	3320      	adds	r3, #32
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	4619      	mov	r1, r3
 800821a:	f7fd facb 	bl	80057b4 <USBD_LL_DataInStage>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fc0f 	bl	8005a58 <USBD_LL_SOF>
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800824a:	2301      	movs	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	79db      	ldrb	r3, [r3, #7]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d001      	beq.n	800825a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008256:	f7f8 fb0d 	bl	8000874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008260:	7bfa      	ldrb	r2, [r7, #15]
 8008262:	4611      	mov	r1, r2
 8008264:	4618      	mov	r0, r3
 8008266:	f7fd fbb3 	bl	80059d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008270:	4618      	mov	r0, r3
 8008272:	f7fd fb5a 	bl	800592a <USBD_LL_Reset>
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fbae 	bl	80059f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	7adb      	ldrb	r3, [r3, #11]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <HAL_PCD_SuspendCallback+0x48>)
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	4a03      	ldr	r2, [pc, #12]	@ (80082c8 <HAL_PCD_SuspendCallback+0x48>)
 80082ba:	f043 0306 	orr.w	r3, r3, #6
 80082be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed00 	.word	0xe000ed00

080082cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fd fba4 	bl	8005a28 <USBD_LL_Resume>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fd fbfc 	bl	8005afc <USBD_LL_IsoOUTIncomplete>
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f7fd fbb8 	bl	8005a98 <USBD_LL_IsoINIncomplete>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd fc0e 	bl	8005b60 <USBD_LL_DevConnected>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd fc0b 	bl	8005b76 <USBD_LL_DevDisconnected>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d13c      	bne.n	80083f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008378:	4a20      	ldr	r2, [pc, #128]	@ (80083fc <USBD_LL_Init+0x94>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1e      	ldr	r2, [pc, #120]	@ (80083fc <USBD_LL_Init+0x94>)
 8008384:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008388:	4b1c      	ldr	r3, [pc, #112]	@ (80083fc <USBD_LL_Init+0x94>)
 800838a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800838e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008390:	4b1a      	ldr	r3, [pc, #104]	@ (80083fc <USBD_LL_Init+0x94>)
 8008392:	2204      	movs	r2, #4
 8008394:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008396:	4b19      	ldr	r3, [pc, #100]	@ (80083fc <USBD_LL_Init+0x94>)
 8008398:	2202      	movs	r2, #2
 800839a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800839c:	4b17      	ldr	r3, [pc, #92]	@ (80083fc <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a2:	4b16      	ldr	r3, [pc, #88]	@ (80083fc <USBD_LL_Init+0x94>)
 80083a4:	2202      	movs	r2, #2
 80083a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083a8:	4b14      	ldr	r3, [pc, #80]	@ (80083fc <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ae:	4b13      	ldr	r3, [pc, #76]	@ (80083fc <USBD_LL_Init+0x94>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083b4:	4b11      	ldr	r3, [pc, #68]	@ (80083fc <USBD_LL_Init+0x94>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083ba:	4b10      	ldr	r3, [pc, #64]	@ (80083fc <USBD_LL_Init+0x94>)
 80083bc:	2200      	movs	r2, #0
 80083be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083c0:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <USBD_LL_Init+0x94>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083c6:	480d      	ldr	r0, [pc, #52]	@ (80083fc <USBD_LL_Init+0x94>)
 80083c8:	f7f8 fedb 	bl	8001182 <HAL_PCD_Init>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083d2:	f7f8 fa4f 	bl	8000874 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083d6:	2180      	movs	r1, #128	@ 0x80
 80083d8:	4808      	ldr	r0, [pc, #32]	@ (80083fc <USBD_LL_Init+0x94>)
 80083da:	f7fa f908 	bl	80025ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083de:	2240      	movs	r2, #64	@ 0x40
 80083e0:	2100      	movs	r1, #0
 80083e2:	4806      	ldr	r0, [pc, #24]	@ (80083fc <USBD_LL_Init+0x94>)
 80083e4:	f7fa f8bc 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083e8:	2280      	movs	r2, #128	@ 0x80
 80083ea:	2101      	movs	r1, #1
 80083ec:	4803      	ldr	r0, [pc, #12]	@ (80083fc <USBD_LL_Init+0x94>)
 80083ee:	f7fa f8b7 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200056a4 	.word	0x200056a4

08008400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008416:	4618      	mov	r0, r3
 8008418:	f7f8 ffc2 	bl	80013a0 <HAL_PCD_Start>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f942 	bl	80086ac <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	461a      	mov	r2, r3
 8008444:	4603      	mov	r3, r0
 8008446:	70fb      	strb	r3, [r7, #3]
 8008448:	460b      	mov	r3, r1
 800844a:	70bb      	strb	r3, [r7, #2]
 800844c:	4613      	mov	r3, r2
 800844e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800845e:	78bb      	ldrb	r3, [r7, #2]
 8008460:	883a      	ldrh	r2, [r7, #0]
 8008462:	78f9      	ldrb	r1, [r7, #3]
 8008464:	f7f9 fc96 	bl	8001d94 <HAL_PCD_EP_Open>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f91c 	bl	80086ac <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f9 fce1 	bl	8001e68 <HAL_PCD_EP_Close>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f8fd 	bl	80086ac <USBD_Get_USB_Status>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7f9 fd99 	bl	8002016 <HAL_PCD_EP_SetStall>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f8de 	bl	80086ac <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f7f9 fddd 	bl	80020dc <HAL_PCD_EP_ClrStall>
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f8bf 	bl	80086ac <USBD_Get_USB_Status>
 800852e:	4603      	mov	r3, r0
 8008530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008532:	7bbb      	ldrb	r3, [r7, #14]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800854e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	da0b      	bge.n	8008570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	3316      	adds	r3, #22
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	e00b      	b.n	8008588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008576:	68f9      	ldr	r1, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008586:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f9 fbca 	bl	8001d4c <HAL_PCD_SetAddress>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f874 	bl	80086ac <USBD_Get_USB_Status>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	460b      	mov	r3, r1
 80085e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085f0:	7af9      	ldrb	r1, [r7, #11]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	f7f9 fcd4 	bl	8001fa2 <HAL_PCD_EP_Transmit>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f853 	bl	80086ac <USBD_Get_USB_Status>
 8008606:	4603      	mov	r3, r0
 8008608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800860a:	7dbb      	ldrb	r3, [r7, #22]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	460b      	mov	r3, r1
 8008622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008632:	7af9      	ldrb	r1, [r7, #11]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	f7f9 fc60 	bl	8001efc <HAL_PCD_EP_Receive>
 800863c:	4603      	mov	r3, r0
 800863e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f832 	bl	80086ac <USBD_Get_USB_Status>
 8008648:	4603      	mov	r3, r0
 800864a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800864c:	7dbb      	ldrb	r3, [r7, #22]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7f9 fc80 	bl	8001f72 <HAL_PCD_EP_GetRxCount>
 8008672:	4603      	mov	r3, r0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008684:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <USBD_static_malloc+0x18>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20005b88 	.word	0x20005b88

08008698 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]

}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d817      	bhi.n	80086f0 <USBD_Get_USB_Status+0x44>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <USBD_Get_USB_Status+0x1c>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	080086df 	.word	0x080086df
 80086d0:	080086e5 	.word	0x080086e5
 80086d4:	080086eb 	.word	0x080086eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
    break;
 80086dc:	e00b      	b.n	80086f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
    break;
 80086e2:	e008      	b.n	80086f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
    break;
 80086e8:	e005      	b.n	80086f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ea:	2303      	movs	r3, #3
 80086ec:	73fb      	strb	r3, [r7, #15]
    break;
 80086ee:	e002      	b.n	80086f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086f0:	2303      	movs	r3, #3
 80086f2:	73fb      	strb	r3, [r7, #15]
    break;
 80086f4:	bf00      	nop
  }
  return usb_status;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <std>:
 8008704:	2300      	movs	r3, #0
 8008706:	b510      	push	{r4, lr}
 8008708:	4604      	mov	r4, r0
 800870a:	e9c0 3300 	strd	r3, r3, [r0]
 800870e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008712:	6083      	str	r3, [r0, #8]
 8008714:	8181      	strh	r1, [r0, #12]
 8008716:	6643      	str	r3, [r0, #100]	@ 0x64
 8008718:	81c2      	strh	r2, [r0, #14]
 800871a:	6183      	str	r3, [r0, #24]
 800871c:	4619      	mov	r1, r3
 800871e:	2208      	movs	r2, #8
 8008720:	305c      	adds	r0, #92	@ 0x5c
 8008722:	f000 f906 	bl	8008932 <memset>
 8008726:	4b0d      	ldr	r3, [pc, #52]	@ (800875c <std+0x58>)
 8008728:	6263      	str	r3, [r4, #36]	@ 0x24
 800872a:	4b0d      	ldr	r3, [pc, #52]	@ (8008760 <std+0x5c>)
 800872c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800872e:	4b0d      	ldr	r3, [pc, #52]	@ (8008764 <std+0x60>)
 8008730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008732:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <std+0x64>)
 8008734:	6323      	str	r3, [r4, #48]	@ 0x30
 8008736:	4b0d      	ldr	r3, [pc, #52]	@ (800876c <std+0x68>)
 8008738:	6224      	str	r4, [r4, #32]
 800873a:	429c      	cmp	r4, r3
 800873c:	d006      	beq.n	800874c <std+0x48>
 800873e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008742:	4294      	cmp	r4, r2
 8008744:	d002      	beq.n	800874c <std+0x48>
 8008746:	33d0      	adds	r3, #208	@ 0xd0
 8008748:	429c      	cmp	r4, r3
 800874a:	d105      	bne.n	8008758 <std+0x54>
 800874c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008754:	f000 b9c4 	b.w	8008ae0 <__retarget_lock_init_recursive>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	bf00      	nop
 800875c:	080088ad 	.word	0x080088ad
 8008760:	080088cf 	.word	0x080088cf
 8008764:	08008907 	.word	0x08008907
 8008768:	0800892b 	.word	0x0800892b
 800876c:	20005da8 	.word	0x20005da8

08008770 <stdio_exit_handler>:
 8008770:	4a02      	ldr	r2, [pc, #8]	@ (800877c <stdio_exit_handler+0xc>)
 8008772:	4903      	ldr	r1, [pc, #12]	@ (8008780 <stdio_exit_handler+0x10>)
 8008774:	4803      	ldr	r0, [pc, #12]	@ (8008784 <stdio_exit_handler+0x14>)
 8008776:	f000 b869 	b.w	800884c <_fwalk_sglue>
 800877a:	bf00      	nop
 800877c:	20000100 	.word	0x20000100
 8008780:	0800937d 	.word	0x0800937d
 8008784:	20000110 	.word	0x20000110

08008788 <cleanup_stdio>:
 8008788:	6841      	ldr	r1, [r0, #4]
 800878a:	4b0c      	ldr	r3, [pc, #48]	@ (80087bc <cleanup_stdio+0x34>)
 800878c:	4299      	cmp	r1, r3
 800878e:	b510      	push	{r4, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	d001      	beq.n	8008798 <cleanup_stdio+0x10>
 8008794:	f000 fdf2 	bl	800937c <_fflush_r>
 8008798:	68a1      	ldr	r1, [r4, #8]
 800879a:	4b09      	ldr	r3, [pc, #36]	@ (80087c0 <cleanup_stdio+0x38>)
 800879c:	4299      	cmp	r1, r3
 800879e:	d002      	beq.n	80087a6 <cleanup_stdio+0x1e>
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fdeb 	bl	800937c <_fflush_r>
 80087a6:	68e1      	ldr	r1, [r4, #12]
 80087a8:	4b06      	ldr	r3, [pc, #24]	@ (80087c4 <cleanup_stdio+0x3c>)
 80087aa:	4299      	cmp	r1, r3
 80087ac:	d004      	beq.n	80087b8 <cleanup_stdio+0x30>
 80087ae:	4620      	mov	r0, r4
 80087b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b4:	f000 bde2 	b.w	800937c <_fflush_r>
 80087b8:	bd10      	pop	{r4, pc}
 80087ba:	bf00      	nop
 80087bc:	20005da8 	.word	0x20005da8
 80087c0:	20005e10 	.word	0x20005e10
 80087c4:	20005e78 	.word	0x20005e78

080087c8 <global_stdio_init.part.0>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4b0b      	ldr	r3, [pc, #44]	@ (80087f8 <global_stdio_init.part.0+0x30>)
 80087cc:	4c0b      	ldr	r4, [pc, #44]	@ (80087fc <global_stdio_init.part.0+0x34>)
 80087ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008800 <global_stdio_init.part.0+0x38>)
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	4620      	mov	r0, r4
 80087d4:	2200      	movs	r2, #0
 80087d6:	2104      	movs	r1, #4
 80087d8:	f7ff ff94 	bl	8008704 <std>
 80087dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087e0:	2201      	movs	r2, #1
 80087e2:	2109      	movs	r1, #9
 80087e4:	f7ff ff8e 	bl	8008704 <std>
 80087e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087ec:	2202      	movs	r2, #2
 80087ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f2:	2112      	movs	r1, #18
 80087f4:	f7ff bf86 	b.w	8008704 <std>
 80087f8:	20005ee0 	.word	0x20005ee0
 80087fc:	20005da8 	.word	0x20005da8
 8008800:	08008771 	.word	0x08008771

08008804 <__sfp_lock_acquire>:
 8008804:	4801      	ldr	r0, [pc, #4]	@ (800880c <__sfp_lock_acquire+0x8>)
 8008806:	f000 b96c 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 800880a:	bf00      	nop
 800880c:	20005ee9 	.word	0x20005ee9

08008810 <__sfp_lock_release>:
 8008810:	4801      	ldr	r0, [pc, #4]	@ (8008818 <__sfp_lock_release+0x8>)
 8008812:	f000 b967 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008816:	bf00      	nop
 8008818:	20005ee9 	.word	0x20005ee9

0800881c <__sinit>:
 800881c:	b510      	push	{r4, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	f7ff fff0 	bl	8008804 <__sfp_lock_acquire>
 8008824:	6a23      	ldr	r3, [r4, #32]
 8008826:	b11b      	cbz	r3, 8008830 <__sinit+0x14>
 8008828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882c:	f7ff bff0 	b.w	8008810 <__sfp_lock_release>
 8008830:	4b04      	ldr	r3, [pc, #16]	@ (8008844 <__sinit+0x28>)
 8008832:	6223      	str	r3, [r4, #32]
 8008834:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <__sinit+0x2c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f5      	bne.n	8008828 <__sinit+0xc>
 800883c:	f7ff ffc4 	bl	80087c8 <global_stdio_init.part.0>
 8008840:	e7f2      	b.n	8008828 <__sinit+0xc>
 8008842:	bf00      	nop
 8008844:	08008789 	.word	0x08008789
 8008848:	20005ee0 	.word	0x20005ee0

0800884c <_fwalk_sglue>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	4607      	mov	r7, r0
 8008852:	4688      	mov	r8, r1
 8008854:	4614      	mov	r4, r2
 8008856:	2600      	movs	r6, #0
 8008858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800885c:	f1b9 0901 	subs.w	r9, r9, #1
 8008860:	d505      	bpl.n	800886e <_fwalk_sglue+0x22>
 8008862:	6824      	ldr	r4, [r4, #0]
 8008864:	2c00      	cmp	r4, #0
 8008866:	d1f7      	bne.n	8008858 <_fwalk_sglue+0xc>
 8008868:	4630      	mov	r0, r6
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d907      	bls.n	8008884 <_fwalk_sglue+0x38>
 8008874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008878:	3301      	adds	r3, #1
 800887a:	d003      	beq.n	8008884 <_fwalk_sglue+0x38>
 800887c:	4629      	mov	r1, r5
 800887e:	4638      	mov	r0, r7
 8008880:	47c0      	blx	r8
 8008882:	4306      	orrs	r6, r0
 8008884:	3568      	adds	r5, #104	@ 0x68
 8008886:	e7e9      	b.n	800885c <_fwalk_sglue+0x10>

08008888 <iprintf>:
 8008888:	b40f      	push	{r0, r1, r2, r3}
 800888a:	b507      	push	{r0, r1, r2, lr}
 800888c:	4906      	ldr	r1, [pc, #24]	@ (80088a8 <iprintf+0x20>)
 800888e:	ab04      	add	r3, sp, #16
 8008890:	6808      	ldr	r0, [r1, #0]
 8008892:	f853 2b04 	ldr.w	r2, [r3], #4
 8008896:	6881      	ldr	r1, [r0, #8]
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	f000 fa47 	bl	8008d2c <_vfiprintf_r>
 800889e:	b003      	add	sp, #12
 80088a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a4:	b004      	add	sp, #16
 80088a6:	4770      	bx	lr
 80088a8:	2000010c 	.word	0x2000010c

080088ac <__sread>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b4:	f000 f8c6 	bl	8008a44 <_read_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	bfab      	itete	ge
 80088bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088be:	89a3      	ldrhlt	r3, [r4, #12]
 80088c0:	181b      	addge	r3, r3, r0
 80088c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088c6:	bfac      	ite	ge
 80088c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ca:	81a3      	strhlt	r3, [r4, #12]
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__swrite>:
 80088ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	461f      	mov	r7, r3
 80088d4:	898b      	ldrh	r3, [r1, #12]
 80088d6:	05db      	lsls	r3, r3, #23
 80088d8:	4605      	mov	r5, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	4616      	mov	r6, r2
 80088de:	d505      	bpl.n	80088ec <__swrite+0x1e>
 80088e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e4:	2302      	movs	r3, #2
 80088e6:	2200      	movs	r2, #0
 80088e8:	f000 f89a 	bl	8008a20 <_lseek_r>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008902:	f000 b8b1 	b.w	8008a68 <_write_r>

08008906 <__sseek>:
 8008906:	b510      	push	{r4, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890e:	f000 f887 	bl	8008a20 <_lseek_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	bf15      	itete	ne
 8008918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800891a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800891e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008922:	81a3      	strheq	r3, [r4, #12]
 8008924:	bf18      	it	ne
 8008926:	81a3      	strhne	r3, [r4, #12]
 8008928:	bd10      	pop	{r4, pc}

0800892a <__sclose>:
 800892a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892e:	f000 b809 	b.w	8008944 <_close_r>

08008932 <memset>:
 8008932:	4402      	add	r2, r0
 8008934:	4603      	mov	r3, r0
 8008936:	4293      	cmp	r3, r2
 8008938:	d100      	bne.n	800893c <memset+0xa>
 800893a:	4770      	bx	lr
 800893c:	f803 1b01 	strb.w	r1, [r3], #1
 8008940:	e7f9      	b.n	8008936 <memset+0x4>
	...

08008944 <_close_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	@ (8008960 <_close_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7f8 f88b 	bl	8000a6a <_close>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_close_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_close_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20005ee4 	.word	0x20005ee4

08008964 <_reclaim_reent>:
 8008964:	4b2d      	ldr	r3, [pc, #180]	@ (8008a1c <_reclaim_reent+0xb8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4283      	cmp	r3, r0
 800896a:	b570      	push	{r4, r5, r6, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	d053      	beq.n	8008a18 <_reclaim_reent+0xb4>
 8008970:	69c3      	ldr	r3, [r0, #28]
 8008972:	b31b      	cbz	r3, 80089bc <_reclaim_reent+0x58>
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	b163      	cbz	r3, 8008992 <_reclaim_reent+0x2e>
 8008978:	2500      	movs	r5, #0
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	5959      	ldr	r1, [r3, r5]
 8008980:	b9b1      	cbnz	r1, 80089b0 <_reclaim_reent+0x4c>
 8008982:	3504      	adds	r5, #4
 8008984:	2d80      	cmp	r5, #128	@ 0x80
 8008986:	d1f8      	bne.n	800897a <_reclaim_reent+0x16>
 8008988:	69e3      	ldr	r3, [r4, #28]
 800898a:	4620      	mov	r0, r4
 800898c:	68d9      	ldr	r1, [r3, #12]
 800898e:	f000 f8ab 	bl	8008ae8 <_free_r>
 8008992:	69e3      	ldr	r3, [r4, #28]
 8008994:	6819      	ldr	r1, [r3, #0]
 8008996:	b111      	cbz	r1, 800899e <_reclaim_reent+0x3a>
 8008998:	4620      	mov	r0, r4
 800899a:	f000 f8a5 	bl	8008ae8 <_free_r>
 800899e:	69e3      	ldr	r3, [r4, #28]
 80089a0:	689d      	ldr	r5, [r3, #8]
 80089a2:	b15d      	cbz	r5, 80089bc <_reclaim_reent+0x58>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4620      	mov	r0, r4
 80089a8:	682d      	ldr	r5, [r5, #0]
 80089aa:	f000 f89d 	bl	8008ae8 <_free_r>
 80089ae:	e7f8      	b.n	80089a2 <_reclaim_reent+0x3e>
 80089b0:	680e      	ldr	r6, [r1, #0]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f898 	bl	8008ae8 <_free_r>
 80089b8:	4631      	mov	r1, r6
 80089ba:	e7e1      	b.n	8008980 <_reclaim_reent+0x1c>
 80089bc:	6961      	ldr	r1, [r4, #20]
 80089be:	b111      	cbz	r1, 80089c6 <_reclaim_reent+0x62>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 f891 	bl	8008ae8 <_free_r>
 80089c6:	69e1      	ldr	r1, [r4, #28]
 80089c8:	b111      	cbz	r1, 80089d0 <_reclaim_reent+0x6c>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f88c 	bl	8008ae8 <_free_r>
 80089d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80089d2:	b111      	cbz	r1, 80089da <_reclaim_reent+0x76>
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f887 	bl	8008ae8 <_free_r>
 80089da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089dc:	b111      	cbz	r1, 80089e4 <_reclaim_reent+0x80>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f882 	bl	8008ae8 <_free_r>
 80089e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80089e6:	b111      	cbz	r1, 80089ee <_reclaim_reent+0x8a>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f87d 	bl	8008ae8 <_free_r>
 80089ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80089f0:	b111      	cbz	r1, 80089f8 <_reclaim_reent+0x94>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f878 	bl	8008ae8 <_free_r>
 80089f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80089fa:	b111      	cbz	r1, 8008a02 <_reclaim_reent+0x9e>
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f873 	bl	8008ae8 <_free_r>
 8008a02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008a04:	b111      	cbz	r1, 8008a0c <_reclaim_reent+0xa8>
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f86e 	bl	8008ae8 <_free_r>
 8008a0c:	6a23      	ldr	r3, [r4, #32]
 8008a0e:	b11b      	cbz	r3, 8008a18 <_reclaim_reent+0xb4>
 8008a10:	4620      	mov	r0, r4
 8008a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a16:	4718      	bx	r3
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	bf00      	nop
 8008a1c:	2000010c 	.word	0x2000010c

08008a20 <_lseek_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	@ (8008a40 <_lseek_r+0x20>)
 8008a24:	4604      	mov	r4, r0
 8008a26:	4608      	mov	r0, r1
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f7f8 f842 	bl	8000ab8 <_lseek>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_lseek_r+0x1e>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_lseek_r+0x1e>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	20005ee4 	.word	0x20005ee4

08008a44 <_read_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d07      	ldr	r5, [pc, #28]	@ (8008a64 <_read_r+0x20>)
 8008a48:	4604      	mov	r4, r0
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	602a      	str	r2, [r5, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f7f7 ffec 	bl	8000a30 <_read>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_read_r+0x1e>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_read_r+0x1e>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	20005ee4 	.word	0x20005ee4

08008a68 <_write_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	@ (8008a88 <_write_r+0x20>)
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	4608      	mov	r0, r1
 8008a70:	4611      	mov	r1, r2
 8008a72:	2200      	movs	r2, #0
 8008a74:	602a      	str	r2, [r5, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f7f7 fe1a 	bl	80006b0 <_write>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_write_r+0x1e>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_write_r+0x1e>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20005ee4 	.word	0x20005ee4

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	@ (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2000010c 	.word	0x2000010c

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 fdb6 	bl	800961c <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08009710 	.word	0x08009710
 8008ad4:	08009710 	.word	0x08009710
 8008ad8:	08009710 	.word	0x08009710
 8008adc:	08009714 	.word	0x08009714

08008ae0 <__retarget_lock_init_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_acquire_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <__retarget_lock_release_recursive>:
 8008ae4:	4770      	bx	lr
	...

08008ae8 <_free_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4605      	mov	r5, r0
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d041      	beq.n	8008b74 <_free_r+0x8c>
 8008af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af4:	1f0c      	subs	r4, r1, #4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bfb8      	it	lt
 8008afa:	18e4      	addlt	r4, r4, r3
 8008afc:	f000 f8e0 	bl	8008cc0 <__malloc_lock>
 8008b00:	4a1d      	ldr	r2, [pc, #116]	@ (8008b78 <_free_r+0x90>)
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	b933      	cbnz	r3, 8008b14 <_free_r+0x2c>
 8008b06:	6063      	str	r3, [r4, #4]
 8008b08:	6014      	str	r4, [r2, #0]
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b10:	f000 b8dc 	b.w	8008ccc <__malloc_unlock>
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d908      	bls.n	8008b2a <_free_r+0x42>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	1821      	adds	r1, r4, r0
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	bf01      	itttt	eq
 8008b20:	6819      	ldreq	r1, [r3, #0]
 8008b22:	685b      	ldreq	r3, [r3, #4]
 8008b24:	1809      	addeq	r1, r1, r0
 8008b26:	6021      	streq	r1, [r4, #0]
 8008b28:	e7ed      	b.n	8008b06 <_free_r+0x1e>
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b10b      	cbz	r3, 8008b34 <_free_r+0x4c>
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	d9fa      	bls.n	8008b2a <_free_r+0x42>
 8008b34:	6811      	ldr	r1, [r2, #0]
 8008b36:	1850      	adds	r0, r2, r1
 8008b38:	42a0      	cmp	r0, r4
 8008b3a:	d10b      	bne.n	8008b54 <_free_r+0x6c>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	4401      	add	r1, r0
 8008b40:	1850      	adds	r0, r2, r1
 8008b42:	4283      	cmp	r3, r0
 8008b44:	6011      	str	r1, [r2, #0]
 8008b46:	d1e0      	bne.n	8008b0a <_free_r+0x22>
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	6053      	str	r3, [r2, #4]
 8008b4e:	4408      	add	r0, r1
 8008b50:	6010      	str	r0, [r2, #0]
 8008b52:	e7da      	b.n	8008b0a <_free_r+0x22>
 8008b54:	d902      	bls.n	8008b5c <_free_r+0x74>
 8008b56:	230c      	movs	r3, #12
 8008b58:	602b      	str	r3, [r5, #0]
 8008b5a:	e7d6      	b.n	8008b0a <_free_r+0x22>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	1821      	adds	r1, r4, r0
 8008b60:	428b      	cmp	r3, r1
 8008b62:	bf04      	itt	eq
 8008b64:	6819      	ldreq	r1, [r3, #0]
 8008b66:	685b      	ldreq	r3, [r3, #4]
 8008b68:	6063      	str	r3, [r4, #4]
 8008b6a:	bf04      	itt	eq
 8008b6c:	1809      	addeq	r1, r1, r0
 8008b6e:	6021      	streq	r1, [r4, #0]
 8008b70:	6054      	str	r4, [r2, #4]
 8008b72:	e7ca      	b.n	8008b0a <_free_r+0x22>
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	20005ef0 	.word	0x20005ef0

08008b7c <sbrk_aligned>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008bbc <sbrk_aligned+0x40>)
 8008b80:	460c      	mov	r4, r1
 8008b82:	6831      	ldr	r1, [r6, #0]
 8008b84:	4605      	mov	r5, r0
 8008b86:	b911      	cbnz	r1, 8008b8e <sbrk_aligned+0x12>
 8008b88:	f000 fcb4 	bl	80094f4 <_sbrk_r>
 8008b8c:	6030      	str	r0, [r6, #0]
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 fcaf 	bl	80094f4 <_sbrk_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	d103      	bne.n	8008ba2 <sbrk_aligned+0x26>
 8008b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d0f8      	beq.n	8008b9e <sbrk_aligned+0x22>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f000 fca0 	bl	80094f4 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1f2      	bne.n	8008b9e <sbrk_aligned+0x22>
 8008bb8:	e7ef      	b.n	8008b9a <sbrk_aligned+0x1e>
 8008bba:	bf00      	nop
 8008bbc:	20005eec 	.word	0x20005eec

08008bc0 <_malloc_r>:
 8008bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	1ccd      	adds	r5, r1, #3
 8008bc6:	f025 0503 	bic.w	r5, r5, #3
 8008bca:	3508      	adds	r5, #8
 8008bcc:	2d0c      	cmp	r5, #12
 8008bce:	bf38      	it	cc
 8008bd0:	250c      	movcc	r5, #12
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	db01      	blt.n	8008bdc <_malloc_r+0x1c>
 8008bd8:	42a9      	cmp	r1, r5
 8008bda:	d904      	bls.n	8008be6 <_malloc_r+0x26>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	2000      	movs	r0, #0
 8008be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cbc <_malloc_r+0xfc>
 8008bea:	f000 f869 	bl	8008cc0 <__malloc_lock>
 8008bee:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	bb44      	cbnz	r4, 8008c48 <_malloc_r+0x88>
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff ffbf 	bl	8008b7c <sbrk_aligned>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	4604      	mov	r4, r0
 8008c02:	d158      	bne.n	8008cb6 <_malloc_r+0xf6>
 8008c04:	f8d8 4000 	ldr.w	r4, [r8]
 8008c08:	4627      	mov	r7, r4
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	d143      	bne.n	8008c96 <_malloc_r+0xd6>
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d04b      	beq.n	8008caa <_malloc_r+0xea>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	4639      	mov	r1, r7
 8008c16:	4630      	mov	r0, r6
 8008c18:	eb04 0903 	add.w	r9, r4, r3
 8008c1c:	f000 fc6a 	bl	80094f4 <_sbrk_r>
 8008c20:	4581      	cmp	r9, r0
 8008c22:	d142      	bne.n	8008caa <_malloc_r+0xea>
 8008c24:	6821      	ldr	r1, [r4, #0]
 8008c26:	1a6d      	subs	r5, r5, r1
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff ffa6 	bl	8008b7c <sbrk_aligned>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d03a      	beq.n	8008caa <_malloc_r+0xea>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	442b      	add	r3, r5
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	bb62      	cbnz	r2, 8008c9c <_malloc_r+0xdc>
 8008c42:	f8c8 7000 	str.w	r7, [r8]
 8008c46:	e00f      	b.n	8008c68 <_malloc_r+0xa8>
 8008c48:	6822      	ldr	r2, [r4, #0]
 8008c4a:	1b52      	subs	r2, r2, r5
 8008c4c:	d420      	bmi.n	8008c90 <_malloc_r+0xd0>
 8008c4e:	2a0b      	cmp	r2, #11
 8008c50:	d917      	bls.n	8008c82 <_malloc_r+0xc2>
 8008c52:	1961      	adds	r1, r4, r5
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	6025      	str	r5, [r4, #0]
 8008c58:	bf18      	it	ne
 8008c5a:	6059      	strne	r1, [r3, #4]
 8008c5c:	6863      	ldr	r3, [r4, #4]
 8008c5e:	bf08      	it	eq
 8008c60:	f8c8 1000 	streq.w	r1, [r8]
 8008c64:	5162      	str	r2, [r4, r5]
 8008c66:	604b      	str	r3, [r1, #4]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f000 f82f 	bl	8008ccc <__malloc_unlock>
 8008c6e:	f104 000b 	add.w	r0, r4, #11
 8008c72:	1d23      	adds	r3, r4, #4
 8008c74:	f020 0007 	bic.w	r0, r0, #7
 8008c78:	1ac2      	subs	r2, r0, r3
 8008c7a:	bf1c      	itt	ne
 8008c7c:	1a1b      	subne	r3, r3, r0
 8008c7e:	50a3      	strne	r3, [r4, r2]
 8008c80:	e7af      	b.n	8008be2 <_malloc_r+0x22>
 8008c82:	6862      	ldr	r2, [r4, #4]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	bf0c      	ite	eq
 8008c88:	f8c8 2000 	streq.w	r2, [r8]
 8008c8c:	605a      	strne	r2, [r3, #4]
 8008c8e:	e7eb      	b.n	8008c68 <_malloc_r+0xa8>
 8008c90:	4623      	mov	r3, r4
 8008c92:	6864      	ldr	r4, [r4, #4]
 8008c94:	e7ae      	b.n	8008bf4 <_malloc_r+0x34>
 8008c96:	463c      	mov	r4, r7
 8008c98:	687f      	ldr	r7, [r7, #4]
 8008c9a:	e7b6      	b.n	8008c0a <_malloc_r+0x4a>
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	d1fb      	bne.n	8008c9c <_malloc_r+0xdc>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6053      	str	r3, [r2, #4]
 8008ca8:	e7de      	b.n	8008c68 <_malloc_r+0xa8>
 8008caa:	230c      	movs	r3, #12
 8008cac:	6033      	str	r3, [r6, #0]
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f000 f80c 	bl	8008ccc <__malloc_unlock>
 8008cb4:	e794      	b.n	8008be0 <_malloc_r+0x20>
 8008cb6:	6005      	str	r5, [r0, #0]
 8008cb8:	e7d6      	b.n	8008c68 <_malloc_r+0xa8>
 8008cba:	bf00      	nop
 8008cbc:	20005ef0 	.word	0x20005ef0

08008cc0 <__malloc_lock>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	@ (8008cc8 <__malloc_lock+0x8>)
 8008cc2:	f7ff bf0e 	b.w	8008ae2 <__retarget_lock_acquire_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	20005ee8 	.word	0x20005ee8

08008ccc <__malloc_unlock>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	@ (8008cd4 <__malloc_unlock+0x8>)
 8008cce:	f7ff bf09 	b.w	8008ae4 <__retarget_lock_release_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	20005ee8 	.word	0x20005ee8

08008cd8 <__sfputc_r>:
 8008cd8:	6893      	ldr	r3, [r2, #8]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	b410      	push	{r4}
 8008ce0:	6093      	str	r3, [r2, #8]
 8008ce2:	da08      	bge.n	8008cf6 <__sfputc_r+0x1e>
 8008ce4:	6994      	ldr	r4, [r2, #24]
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	db01      	blt.n	8008cee <__sfputc_r+0x16>
 8008cea:	290a      	cmp	r1, #10
 8008cec:	d103      	bne.n	8008cf6 <__sfputc_r+0x1e>
 8008cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf2:	f000 bb6b 	b.w	80093cc <__swbuf_r>
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	1c58      	adds	r0, r3, #1
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	7019      	strb	r1, [r3, #0]
 8008cfe:	4608      	mov	r0, r1
 8008d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <__sfputs_r>:
 8008d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	18d5      	adds	r5, r2, r3
 8008d10:	42ac      	cmp	r4, r5
 8008d12:	d101      	bne.n	8008d18 <__sfputs_r+0x12>
 8008d14:	2000      	movs	r0, #0
 8008d16:	e007      	b.n	8008d28 <__sfputs_r+0x22>
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ffda 	bl	8008cd8 <__sfputc_r>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d1f3      	bne.n	8008d10 <__sfputs_r+0xa>
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d2c <_vfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	460d      	mov	r5, r1
 8008d32:	b09d      	sub	sp, #116	@ 0x74
 8008d34:	4614      	mov	r4, r2
 8008d36:	4698      	mov	r8, r3
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b118      	cbz	r0, 8008d44 <_vfiprintf_r+0x18>
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	b90b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x18>
 8008d40:	f7ff fd6c 	bl	800881c <__sinit>
 8008d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d46:	07d9      	lsls	r1, r3, #31
 8008d48:	d405      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d52:	f7ff fec6 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	071b      	lsls	r3, r3, #28
 8008d5a:	d501      	bpl.n	8008d60 <_vfiprintf_r+0x34>
 8008d5c:	692b      	ldr	r3, [r5, #16]
 8008d5e:	b99b      	cbnz	r3, 8008d88 <_vfiprintf_r+0x5c>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f000 fb70 	bl	8009448 <__swsetup_r>
 8008d68:	b170      	cbz	r0, 8008d88 <_vfiprintf_r+0x5c>
 8008d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6c:	07dc      	lsls	r4, r3, #31
 8008d6e:	d504      	bpl.n	8008d7a <_vfiprintf_r+0x4e>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	b01d      	add	sp, #116	@ 0x74
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	0598      	lsls	r0, r3, #22
 8008d7e:	d4f7      	bmi.n	8008d70 <_vfiprintf_r+0x44>
 8008d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d82:	f7ff feaf 	bl	8008ae4 <__retarget_lock_release_recursive>
 8008d86:	e7f3      	b.n	8008d70 <_vfiprintf_r+0x44>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d96:	2330      	movs	r3, #48	@ 0x30
 8008d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f48 <_vfiprintf_r+0x21c>
 8008d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008da0:	f04f 0901 	mov.w	r9, #1
 8008da4:	4623      	mov	r3, r4
 8008da6:	469a      	mov	sl, r3
 8008da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dac:	b10a      	cbz	r2, 8008db2 <_vfiprintf_r+0x86>
 8008dae:	2a25      	cmp	r2, #37	@ 0x25
 8008db0:	d1f9      	bne.n	8008da6 <_vfiprintf_r+0x7a>
 8008db2:	ebba 0b04 	subs.w	fp, sl, r4
 8008db6:	d00b      	beq.n	8008dd0 <_vfiprintf_r+0xa4>
 8008db8:	465b      	mov	r3, fp
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ffa1 	bl	8008d06 <__sfputs_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f000 80a7 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dcc:	445a      	add	r2, fp
 8008dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 809f 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de4:	f10a 0a01 	add.w	sl, sl, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	9307      	str	r3, [sp, #28]
 8008dec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008df2:	4654      	mov	r4, sl
 8008df4:	2205      	movs	r2, #5
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	4853      	ldr	r0, [pc, #332]	@ (8008f48 <_vfiprintf_r+0x21c>)
 8008dfc:	f7f7 f9f0 	bl	80001e0 <memchr>
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	b9d8      	cbnz	r0, 8008e3c <_vfiprintf_r+0x110>
 8008e04:	06d1      	lsls	r1, r2, #27
 8008e06:	bf44      	itt	mi
 8008e08:	2320      	movmi	r3, #32
 8008e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e0e:	0713      	lsls	r3, r2, #28
 8008e10:	bf44      	itt	mi
 8008e12:	232b      	movmi	r3, #43	@ 0x2b
 8008e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e18:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e1e:	d015      	beq.n	8008e4c <_vfiprintf_r+0x120>
 8008e20:	9a07      	ldr	r2, [sp, #28]
 8008e22:	4654      	mov	r4, sl
 8008e24:	2000      	movs	r0, #0
 8008e26:	f04f 0c0a 	mov.w	ip, #10
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e30:	3b30      	subs	r3, #48	@ 0x30
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d94b      	bls.n	8008ece <_vfiprintf_r+0x1a2>
 8008e36:	b1b0      	cbz	r0, 8008e66 <_vfiprintf_r+0x13a>
 8008e38:	9207      	str	r2, [sp, #28]
 8008e3a:	e014      	b.n	8008e66 <_vfiprintf_r+0x13a>
 8008e3c:	eba0 0308 	sub.w	r3, r0, r8
 8008e40:	fa09 f303 	lsl.w	r3, r9, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	46a2      	mov	sl, r4
 8008e4a:	e7d2      	b.n	8008df2 <_vfiprintf_r+0xc6>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d19      	adds	r1, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9103      	str	r1, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfbb      	ittet	lt
 8008e58:	425b      	neglt	r3, r3
 8008e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e5e:	9307      	strge	r3, [sp, #28]
 8008e60:	9307      	strlt	r3, [sp, #28]
 8008e62:	bfb8      	it	lt
 8008e64:	9204      	strlt	r2, [sp, #16]
 8008e66:	7823      	ldrb	r3, [r4, #0]
 8008e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e6a:	d10a      	bne.n	8008e82 <_vfiprintf_r+0x156>
 8008e6c:	7863      	ldrb	r3, [r4, #1]
 8008e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e70:	d132      	bne.n	8008ed8 <_vfiprintf_r+0x1ac>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	9203      	str	r2, [sp, #12]
 8008e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e7e:	3402      	adds	r4, #2
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f58 <_vfiprintf_r+0x22c>
 8008e86:	7821      	ldrb	r1, [r4, #0]
 8008e88:	2203      	movs	r2, #3
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	f7f7 f9a8 	bl	80001e0 <memchr>
 8008e90:	b138      	cbz	r0, 8008ea2 <_vfiprintf_r+0x176>
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	eba0 000a 	sub.w	r0, r0, sl
 8008e98:	2240      	movs	r2, #64	@ 0x40
 8008e9a:	4082      	lsls	r2, r0
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	3401      	adds	r4, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea6:	4829      	ldr	r0, [pc, #164]	@ (8008f4c <_vfiprintf_r+0x220>)
 8008ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eac:	2206      	movs	r2, #6
 8008eae:	f7f7 f997 	bl	80001e0 <memchr>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d03f      	beq.n	8008f36 <_vfiprintf_r+0x20a>
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <_vfiprintf_r+0x224>)
 8008eb8:	bb1b      	cbnz	r3, 8008f02 <_vfiprintf_r+0x1d6>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	3307      	adds	r3, #7
 8008ebe:	f023 0307 	bic.w	r3, r3, #7
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	443b      	add	r3, r7
 8008eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ecc:	e76a      	b.n	8008da4 <_vfiprintf_r+0x78>
 8008ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e7a8      	b.n	8008e2a <_vfiprintf_r+0xfe>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	3401      	adds	r4, #1
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	f04f 0c0a 	mov.w	ip, #10
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eea:	3a30      	subs	r2, #48	@ 0x30
 8008eec:	2a09      	cmp	r2, #9
 8008eee:	d903      	bls.n	8008ef8 <_vfiprintf_r+0x1cc>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0c6      	beq.n	8008e82 <_vfiprintf_r+0x156>
 8008ef4:	9105      	str	r1, [sp, #20]
 8008ef6:	e7c4      	b.n	8008e82 <_vfiprintf_r+0x156>
 8008ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efc:	4604      	mov	r4, r0
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7f0      	b.n	8008ee4 <_vfiprintf_r+0x1b8>
 8008f02:	ab03      	add	r3, sp, #12
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	462a      	mov	r2, r5
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f0a:	a904      	add	r1, sp, #16
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f3af 8000 	nop.w
 8008f12:	4607      	mov	r7, r0
 8008f14:	1c78      	adds	r0, r7, #1
 8008f16:	d1d6      	bne.n	8008ec6 <_vfiprintf_r+0x19a>
 8008f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f1a:	07d9      	lsls	r1, r3, #31
 8008f1c:	d405      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d402      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f26:	f7ff fddd 	bl	8008ae4 <__retarget_lock_release_recursive>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	065b      	lsls	r3, r3, #25
 8008f2e:	f53f af1f 	bmi.w	8008d70 <_vfiprintf_r+0x44>
 8008f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f34:	e71e      	b.n	8008d74 <_vfiprintf_r+0x48>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 f879 	bl	8009038 <_printf_i>
 8008f46:	e7e4      	b.n	8008f12 <_vfiprintf_r+0x1e6>
 8008f48:	080096d4 	.word	0x080096d4
 8008f4c:	080096de 	.word	0x080096de
 8008f50:	00000000 	.word	0x00000000
 8008f54:	08008d07 	.word	0x08008d07
 8008f58:	080096da 	.word	0x080096da

08008f5c <_printf_common>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	4616      	mov	r6, r2
 8008f62:	4698      	mov	r8, r3
 8008f64:	688a      	ldr	r2, [r1, #8]
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	bfb8      	it	lt
 8008f70:	4613      	movlt	r3, r2
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	b10a      	cbz	r2, 8008f82 <_printf_common+0x26>
 8008f7e:	3301      	adds	r3, #1
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	0699      	lsls	r1, r3, #26
 8008f86:	bf42      	ittt	mi
 8008f88:	6833      	ldrmi	r3, [r6, #0]
 8008f8a:	3302      	addmi	r3, #2
 8008f8c:	6033      	strmi	r3, [r6, #0]
 8008f8e:	6825      	ldr	r5, [r4, #0]
 8008f90:	f015 0506 	ands.w	r5, r5, #6
 8008f94:	d106      	bne.n	8008fa4 <_printf_common+0x48>
 8008f96:	f104 0a19 	add.w	sl, r4, #25
 8008f9a:	68e3      	ldr	r3, [r4, #12]
 8008f9c:	6832      	ldr	r2, [r6, #0]
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	42ab      	cmp	r3, r5
 8008fa2:	dc26      	bgt.n	8008ff2 <_printf_common+0x96>
 8008fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	3b00      	subs	r3, #0
 8008fac:	bf18      	it	ne
 8008fae:	2301      	movne	r3, #1
 8008fb0:	0692      	lsls	r2, r2, #26
 8008fb2:	d42b      	bmi.n	800900c <_printf_common+0xb0>
 8008fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fb8:	4641      	mov	r1, r8
 8008fba:	4638      	mov	r0, r7
 8008fbc:	47c8      	blx	r9
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d01e      	beq.n	8009000 <_printf_common+0xa4>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	f003 0306 	and.w	r3, r3, #6
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	bf02      	ittt	eq
 8008fce:	68e5      	ldreq	r5, [r4, #12]
 8008fd0:	6833      	ldreq	r3, [r6, #0]
 8008fd2:	1aed      	subeq	r5, r5, r3
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	bf0c      	ite	eq
 8008fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fdc:	2500      	movne	r5, #0
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	bfc4      	itt	gt
 8008fe2:	1a9b      	subgt	r3, r3, r2
 8008fe4:	18ed      	addgt	r5, r5, r3
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	341a      	adds	r4, #26
 8008fea:	42b5      	cmp	r5, r6
 8008fec:	d11a      	bne.n	8009024 <_printf_common+0xc8>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e008      	b.n	8009004 <_printf_common+0xa8>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4652      	mov	r2, sl
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	47c8      	blx	r9
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d103      	bne.n	8009008 <_printf_common+0xac>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009008:	3501      	adds	r5, #1
 800900a:	e7c6      	b.n	8008f9a <_printf_common+0x3e>
 800900c:	18e1      	adds	r1, r4, r3
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	2030      	movs	r0, #48	@ 0x30
 8009012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009016:	4422      	add	r2, r4
 8009018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800901c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009020:	3302      	adds	r3, #2
 8009022:	e7c7      	b.n	8008fb4 <_printf_common+0x58>
 8009024:	2301      	movs	r3, #1
 8009026:	4622      	mov	r2, r4
 8009028:	4641      	mov	r1, r8
 800902a:	4638      	mov	r0, r7
 800902c:	47c8      	blx	r9
 800902e:	3001      	adds	r0, #1
 8009030:	d0e6      	beq.n	8009000 <_printf_common+0xa4>
 8009032:	3601      	adds	r6, #1
 8009034:	e7d9      	b.n	8008fea <_printf_common+0x8e>
	...

08009038 <_printf_i>:
 8009038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	7e0f      	ldrb	r7, [r1, #24]
 800903e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009040:	2f78      	cmp	r7, #120	@ 0x78
 8009042:	4691      	mov	r9, r2
 8009044:	4680      	mov	r8, r0
 8009046:	460c      	mov	r4, r1
 8009048:	469a      	mov	sl, r3
 800904a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800904e:	d807      	bhi.n	8009060 <_printf_i+0x28>
 8009050:	2f62      	cmp	r7, #98	@ 0x62
 8009052:	d80a      	bhi.n	800906a <_printf_i+0x32>
 8009054:	2f00      	cmp	r7, #0
 8009056:	f000 80d1 	beq.w	80091fc <_printf_i+0x1c4>
 800905a:	2f58      	cmp	r7, #88	@ 0x58
 800905c:	f000 80b8 	beq.w	80091d0 <_printf_i+0x198>
 8009060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009068:	e03a      	b.n	80090e0 <_printf_i+0xa8>
 800906a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800906e:	2b15      	cmp	r3, #21
 8009070:	d8f6      	bhi.n	8009060 <_printf_i+0x28>
 8009072:	a101      	add	r1, pc, #4	@ (adr r1, 8009078 <_printf_i+0x40>)
 8009074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009078:	080090d1 	.word	0x080090d1
 800907c:	080090e5 	.word	0x080090e5
 8009080:	08009061 	.word	0x08009061
 8009084:	08009061 	.word	0x08009061
 8009088:	08009061 	.word	0x08009061
 800908c:	08009061 	.word	0x08009061
 8009090:	080090e5 	.word	0x080090e5
 8009094:	08009061 	.word	0x08009061
 8009098:	08009061 	.word	0x08009061
 800909c:	08009061 	.word	0x08009061
 80090a0:	08009061 	.word	0x08009061
 80090a4:	080091e3 	.word	0x080091e3
 80090a8:	0800910f 	.word	0x0800910f
 80090ac:	0800919d 	.word	0x0800919d
 80090b0:	08009061 	.word	0x08009061
 80090b4:	08009061 	.word	0x08009061
 80090b8:	08009205 	.word	0x08009205
 80090bc:	08009061 	.word	0x08009061
 80090c0:	0800910f 	.word	0x0800910f
 80090c4:	08009061 	.word	0x08009061
 80090c8:	08009061 	.word	0x08009061
 80090cc:	080091a5 	.word	0x080091a5
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6032      	str	r2, [r6, #0]
 80090d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090e0:	2301      	movs	r3, #1
 80090e2:	e09c      	b.n	800921e <_printf_i+0x1e6>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	0606      	lsls	r6, r0, #24
 80090ee:	d501      	bpl.n	80090f4 <_printf_i+0xbc>
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	e003      	b.n	80090fc <_printf_i+0xc4>
 80090f4:	0645      	lsls	r5, r0, #25
 80090f6:	d5fb      	bpl.n	80090f0 <_printf_i+0xb8>
 80090f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	da03      	bge.n	8009108 <_printf_i+0xd0>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	426d      	negs	r5, r5
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009108:	4858      	ldr	r0, [pc, #352]	@ (800926c <_printf_i+0x234>)
 800910a:	230a      	movs	r3, #10
 800910c:	e011      	b.n	8009132 <_printf_i+0xfa>
 800910e:	6821      	ldr	r1, [r4, #0]
 8009110:	6833      	ldr	r3, [r6, #0]
 8009112:	0608      	lsls	r0, r1, #24
 8009114:	f853 5b04 	ldr.w	r5, [r3], #4
 8009118:	d402      	bmi.n	8009120 <_printf_i+0xe8>
 800911a:	0649      	lsls	r1, r1, #25
 800911c:	bf48      	it	mi
 800911e:	b2ad      	uxthmi	r5, r5
 8009120:	2f6f      	cmp	r7, #111	@ 0x6f
 8009122:	4852      	ldr	r0, [pc, #328]	@ (800926c <_printf_i+0x234>)
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	bf14      	ite	ne
 8009128:	230a      	movne	r3, #10
 800912a:	2308      	moveq	r3, #8
 800912c:	2100      	movs	r1, #0
 800912e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009132:	6866      	ldr	r6, [r4, #4]
 8009134:	60a6      	str	r6, [r4, #8]
 8009136:	2e00      	cmp	r6, #0
 8009138:	db05      	blt.n	8009146 <_printf_i+0x10e>
 800913a:	6821      	ldr	r1, [r4, #0]
 800913c:	432e      	orrs	r6, r5
 800913e:	f021 0104 	bic.w	r1, r1, #4
 8009142:	6021      	str	r1, [r4, #0]
 8009144:	d04b      	beq.n	80091de <_printf_i+0x1a6>
 8009146:	4616      	mov	r6, r2
 8009148:	fbb5 f1f3 	udiv	r1, r5, r3
 800914c:	fb03 5711 	mls	r7, r3, r1, r5
 8009150:	5dc7      	ldrb	r7, [r0, r7]
 8009152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009156:	462f      	mov	r7, r5
 8009158:	42bb      	cmp	r3, r7
 800915a:	460d      	mov	r5, r1
 800915c:	d9f4      	bls.n	8009148 <_printf_i+0x110>
 800915e:	2b08      	cmp	r3, #8
 8009160:	d10b      	bne.n	800917a <_printf_i+0x142>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	07df      	lsls	r7, r3, #31
 8009166:	d508      	bpl.n	800917a <_printf_i+0x142>
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	6861      	ldr	r1, [r4, #4]
 800916c:	4299      	cmp	r1, r3
 800916e:	bfde      	ittt	le
 8009170:	2330      	movle	r3, #48	@ 0x30
 8009172:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009176:	f106 36ff 	addle.w	r6, r6, #4294967295
 800917a:	1b92      	subs	r2, r2, r6
 800917c:	6122      	str	r2, [r4, #16]
 800917e:	f8cd a000 	str.w	sl, [sp]
 8009182:	464b      	mov	r3, r9
 8009184:	aa03      	add	r2, sp, #12
 8009186:	4621      	mov	r1, r4
 8009188:	4640      	mov	r0, r8
 800918a:	f7ff fee7 	bl	8008f5c <_printf_common>
 800918e:	3001      	adds	r0, #1
 8009190:	d14a      	bne.n	8009228 <_printf_i+0x1f0>
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	b004      	add	sp, #16
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f043 0320 	orr.w	r3, r3, #32
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	4832      	ldr	r0, [pc, #200]	@ (8009270 <_printf_i+0x238>)
 80091a6:	2778      	movs	r7, #120	@ 0x78
 80091a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	6831      	ldr	r1, [r6, #0]
 80091b0:	061f      	lsls	r7, r3, #24
 80091b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80091b6:	d402      	bmi.n	80091be <_printf_i+0x186>
 80091b8:	065f      	lsls	r7, r3, #25
 80091ba:	bf48      	it	mi
 80091bc:	b2ad      	uxthmi	r5, r5
 80091be:	6031      	str	r1, [r6, #0]
 80091c0:	07d9      	lsls	r1, r3, #31
 80091c2:	bf44      	itt	mi
 80091c4:	f043 0320 	orrmi.w	r3, r3, #32
 80091c8:	6023      	strmi	r3, [r4, #0]
 80091ca:	b11d      	cbz	r5, 80091d4 <_printf_i+0x19c>
 80091cc:	2310      	movs	r3, #16
 80091ce:	e7ad      	b.n	800912c <_printf_i+0xf4>
 80091d0:	4826      	ldr	r0, [pc, #152]	@ (800926c <_printf_i+0x234>)
 80091d2:	e7e9      	b.n	80091a8 <_printf_i+0x170>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	f023 0320 	bic.w	r3, r3, #32
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	e7f6      	b.n	80091cc <_printf_i+0x194>
 80091de:	4616      	mov	r6, r2
 80091e0:	e7bd      	b.n	800915e <_printf_i+0x126>
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	6825      	ldr	r5, [r4, #0]
 80091e6:	6961      	ldr	r1, [r4, #20]
 80091e8:	1d18      	adds	r0, r3, #4
 80091ea:	6030      	str	r0, [r6, #0]
 80091ec:	062e      	lsls	r6, r5, #24
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	d501      	bpl.n	80091f6 <_printf_i+0x1be>
 80091f2:	6019      	str	r1, [r3, #0]
 80091f4:	e002      	b.n	80091fc <_printf_i+0x1c4>
 80091f6:	0668      	lsls	r0, r5, #25
 80091f8:	d5fb      	bpl.n	80091f2 <_printf_i+0x1ba>
 80091fa:	8019      	strh	r1, [r3, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	4616      	mov	r6, r2
 8009202:	e7bc      	b.n	800917e <_printf_i+0x146>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	1d1a      	adds	r2, r3, #4
 8009208:	6032      	str	r2, [r6, #0]
 800920a:	681e      	ldr	r6, [r3, #0]
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	2100      	movs	r1, #0
 8009210:	4630      	mov	r0, r6
 8009212:	f7f6 ffe5 	bl	80001e0 <memchr>
 8009216:	b108      	cbz	r0, 800921c <_printf_i+0x1e4>
 8009218:	1b80      	subs	r0, r0, r6
 800921a:	6060      	str	r0, [r4, #4]
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	6123      	str	r3, [r4, #16]
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009226:	e7aa      	b.n	800917e <_printf_i+0x146>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	4632      	mov	r2, r6
 800922c:	4649      	mov	r1, r9
 800922e:	4640      	mov	r0, r8
 8009230:	47d0      	blx	sl
 8009232:	3001      	adds	r0, #1
 8009234:	d0ad      	beq.n	8009192 <_printf_i+0x15a>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	079b      	lsls	r3, r3, #30
 800923a:	d413      	bmi.n	8009264 <_printf_i+0x22c>
 800923c:	68e0      	ldr	r0, [r4, #12]
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	4298      	cmp	r0, r3
 8009242:	bfb8      	it	lt
 8009244:	4618      	movlt	r0, r3
 8009246:	e7a6      	b.n	8009196 <_printf_i+0x15e>
 8009248:	2301      	movs	r3, #1
 800924a:	4632      	mov	r2, r6
 800924c:	4649      	mov	r1, r9
 800924e:	4640      	mov	r0, r8
 8009250:	47d0      	blx	sl
 8009252:	3001      	adds	r0, #1
 8009254:	d09d      	beq.n	8009192 <_printf_i+0x15a>
 8009256:	3501      	adds	r5, #1
 8009258:	68e3      	ldr	r3, [r4, #12]
 800925a:	9903      	ldr	r1, [sp, #12]
 800925c:	1a5b      	subs	r3, r3, r1
 800925e:	42ab      	cmp	r3, r5
 8009260:	dcf2      	bgt.n	8009248 <_printf_i+0x210>
 8009262:	e7eb      	b.n	800923c <_printf_i+0x204>
 8009264:	2500      	movs	r5, #0
 8009266:	f104 0619 	add.w	r6, r4, #25
 800926a:	e7f5      	b.n	8009258 <_printf_i+0x220>
 800926c:	080096e5 	.word	0x080096e5
 8009270:	080096f6 	.word	0x080096f6

08009274 <__sflush_r>:
 8009274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	0716      	lsls	r6, r2, #28
 800927e:	4605      	mov	r5, r0
 8009280:	460c      	mov	r4, r1
 8009282:	d454      	bmi.n	800932e <__sflush_r+0xba>
 8009284:	684b      	ldr	r3, [r1, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dc02      	bgt.n	8009290 <__sflush_r+0x1c>
 800928a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd48      	ble.n	8009322 <__sflush_r+0xae>
 8009290:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009292:	2e00      	cmp	r6, #0
 8009294:	d045      	beq.n	8009322 <__sflush_r+0xae>
 8009296:	2300      	movs	r3, #0
 8009298:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800929c:	682f      	ldr	r7, [r5, #0]
 800929e:	6a21      	ldr	r1, [r4, #32]
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	d030      	beq.n	8009306 <__sflush_r+0x92>
 80092a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	0759      	lsls	r1, r3, #29
 80092aa:	d505      	bpl.n	80092b8 <__sflush_r+0x44>
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092b2:	b10b      	cbz	r3, 80092b8 <__sflush_r+0x44>
 80092b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	2300      	movs	r3, #0
 80092ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092bc:	6a21      	ldr	r1, [r4, #32]
 80092be:	4628      	mov	r0, r5
 80092c0:	47b0      	blx	r6
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	d106      	bne.n	80092d6 <__sflush_r+0x62>
 80092c8:	6829      	ldr	r1, [r5, #0]
 80092ca:	291d      	cmp	r1, #29
 80092cc:	d82b      	bhi.n	8009326 <__sflush_r+0xb2>
 80092ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009378 <__sflush_r+0x104>)
 80092d0:	40ca      	lsrs	r2, r1
 80092d2:	07d6      	lsls	r6, r2, #31
 80092d4:	d527      	bpl.n	8009326 <__sflush_r+0xb2>
 80092d6:	2200      	movs	r2, #0
 80092d8:	6062      	str	r2, [r4, #4]
 80092da:	04d9      	lsls	r1, r3, #19
 80092dc:	6922      	ldr	r2, [r4, #16]
 80092de:	6022      	str	r2, [r4, #0]
 80092e0:	d504      	bpl.n	80092ec <__sflush_r+0x78>
 80092e2:	1c42      	adds	r2, r0, #1
 80092e4:	d101      	bne.n	80092ea <__sflush_r+0x76>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b903      	cbnz	r3, 80092ec <__sflush_r+0x78>
 80092ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80092ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ee:	602f      	str	r7, [r5, #0]
 80092f0:	b1b9      	cbz	r1, 8009322 <__sflush_r+0xae>
 80092f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092f6:	4299      	cmp	r1, r3
 80092f8:	d002      	beq.n	8009300 <__sflush_r+0x8c>
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7ff fbf4 	bl	8008ae8 <_free_r>
 8009300:	2300      	movs	r3, #0
 8009302:	6363      	str	r3, [r4, #52]	@ 0x34
 8009304:	e00d      	b.n	8009322 <__sflush_r+0xae>
 8009306:	2301      	movs	r3, #1
 8009308:	4628      	mov	r0, r5
 800930a:	47b0      	blx	r6
 800930c:	4602      	mov	r2, r0
 800930e:	1c50      	adds	r0, r2, #1
 8009310:	d1c9      	bne.n	80092a6 <__sflush_r+0x32>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0c6      	beq.n	80092a6 <__sflush_r+0x32>
 8009318:	2b1d      	cmp	r3, #29
 800931a:	d001      	beq.n	8009320 <__sflush_r+0xac>
 800931c:	2b16      	cmp	r3, #22
 800931e:	d11e      	bne.n	800935e <__sflush_r+0xea>
 8009320:	602f      	str	r7, [r5, #0]
 8009322:	2000      	movs	r0, #0
 8009324:	e022      	b.n	800936c <__sflush_r+0xf8>
 8009326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932a:	b21b      	sxth	r3, r3
 800932c:	e01b      	b.n	8009366 <__sflush_r+0xf2>
 800932e:	690f      	ldr	r7, [r1, #16]
 8009330:	2f00      	cmp	r7, #0
 8009332:	d0f6      	beq.n	8009322 <__sflush_r+0xae>
 8009334:	0793      	lsls	r3, r2, #30
 8009336:	680e      	ldr	r6, [r1, #0]
 8009338:	bf08      	it	eq
 800933a:	694b      	ldreq	r3, [r1, #20]
 800933c:	600f      	str	r7, [r1, #0]
 800933e:	bf18      	it	ne
 8009340:	2300      	movne	r3, #0
 8009342:	eba6 0807 	sub.w	r8, r6, r7
 8009346:	608b      	str	r3, [r1, #8]
 8009348:	f1b8 0f00 	cmp.w	r8, #0
 800934c:	dde9      	ble.n	8009322 <__sflush_r+0xae>
 800934e:	6a21      	ldr	r1, [r4, #32]
 8009350:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009352:	4643      	mov	r3, r8
 8009354:	463a      	mov	r2, r7
 8009356:	4628      	mov	r0, r5
 8009358:	47b0      	blx	r6
 800935a:	2800      	cmp	r0, #0
 800935c:	dc08      	bgt.n	8009370 <__sflush_r+0xfc>
 800935e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009370:	4407      	add	r7, r0
 8009372:	eba8 0800 	sub.w	r8, r8, r0
 8009376:	e7e7      	b.n	8009348 <__sflush_r+0xd4>
 8009378:	20400001 	.word	0x20400001

0800937c <_fflush_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	4605      	mov	r5, r0
 8009382:	460c      	mov	r4, r1
 8009384:	b913      	cbnz	r3, 800938c <_fflush_r+0x10>
 8009386:	2500      	movs	r5, #0
 8009388:	4628      	mov	r0, r5
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	b118      	cbz	r0, 8009396 <_fflush_r+0x1a>
 800938e:	6a03      	ldr	r3, [r0, #32]
 8009390:	b90b      	cbnz	r3, 8009396 <_fflush_r+0x1a>
 8009392:	f7ff fa43 	bl	800881c <__sinit>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0f3      	beq.n	8009386 <_fflush_r+0xa>
 800939e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093a0:	07d0      	lsls	r0, r2, #31
 80093a2:	d404      	bmi.n	80093ae <_fflush_r+0x32>
 80093a4:	0599      	lsls	r1, r3, #22
 80093a6:	d402      	bmi.n	80093ae <_fflush_r+0x32>
 80093a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093aa:	f7ff fb9a 	bl	8008ae2 <__retarget_lock_acquire_recursive>
 80093ae:	4628      	mov	r0, r5
 80093b0:	4621      	mov	r1, r4
 80093b2:	f7ff ff5f 	bl	8009274 <__sflush_r>
 80093b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093b8:	07da      	lsls	r2, r3, #31
 80093ba:	4605      	mov	r5, r0
 80093bc:	d4e4      	bmi.n	8009388 <_fflush_r+0xc>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	059b      	lsls	r3, r3, #22
 80093c2:	d4e1      	bmi.n	8009388 <_fflush_r+0xc>
 80093c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093c6:	f7ff fb8d 	bl	8008ae4 <__retarget_lock_release_recursive>
 80093ca:	e7dd      	b.n	8009388 <_fflush_r+0xc>

080093cc <__swbuf_r>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	460e      	mov	r6, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	4605      	mov	r5, r0
 80093d4:	b118      	cbz	r0, 80093de <__swbuf_r+0x12>
 80093d6:	6a03      	ldr	r3, [r0, #32]
 80093d8:	b90b      	cbnz	r3, 80093de <__swbuf_r+0x12>
 80093da:	f7ff fa1f 	bl	800881c <__sinit>
 80093de:	69a3      	ldr	r3, [r4, #24]
 80093e0:	60a3      	str	r3, [r4, #8]
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	071a      	lsls	r2, r3, #28
 80093e6:	d501      	bpl.n	80093ec <__swbuf_r+0x20>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	b943      	cbnz	r3, 80093fe <__swbuf_r+0x32>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f82a 	bl	8009448 <__swsetup_r>
 80093f4:	b118      	cbz	r0, 80093fe <__swbuf_r+0x32>
 80093f6:	f04f 37ff 	mov.w	r7, #4294967295
 80093fa:	4638      	mov	r0, r7
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	1a98      	subs	r0, r3, r2
 8009404:	6963      	ldr	r3, [r4, #20]
 8009406:	b2f6      	uxtb	r6, r6
 8009408:	4283      	cmp	r3, r0
 800940a:	4637      	mov	r7, r6
 800940c:	dc05      	bgt.n	800941a <__swbuf_r+0x4e>
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f7ff ffb3 	bl	800937c <_fflush_r>
 8009416:	2800      	cmp	r0, #0
 8009418:	d1ed      	bne.n	80093f6 <__swbuf_r+0x2a>
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	3b01      	subs	r3, #1
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	701e      	strb	r6, [r3, #0]
 8009428:	6962      	ldr	r2, [r4, #20]
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	d004      	beq.n	800943a <__swbuf_r+0x6e>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d5e1      	bpl.n	80093fa <__swbuf_r+0x2e>
 8009436:	2e0a      	cmp	r6, #10
 8009438:	d1df      	bne.n	80093fa <__swbuf_r+0x2e>
 800943a:	4621      	mov	r1, r4
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff ff9d 	bl	800937c <_fflush_r>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0d9      	beq.n	80093fa <__swbuf_r+0x2e>
 8009446:	e7d6      	b.n	80093f6 <__swbuf_r+0x2a>

08009448 <__swsetup_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4b29      	ldr	r3, [pc, #164]	@ (80094f0 <__swsetup_r+0xa8>)
 800944c:	4605      	mov	r5, r0
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	460c      	mov	r4, r1
 8009452:	b118      	cbz	r0, 800945c <__swsetup_r+0x14>
 8009454:	6a03      	ldr	r3, [r0, #32]
 8009456:	b90b      	cbnz	r3, 800945c <__swsetup_r+0x14>
 8009458:	f7ff f9e0 	bl	800881c <__sinit>
 800945c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009460:	0719      	lsls	r1, r3, #28
 8009462:	d422      	bmi.n	80094aa <__swsetup_r+0x62>
 8009464:	06da      	lsls	r2, r3, #27
 8009466:	d407      	bmi.n	8009478 <__swsetup_r+0x30>
 8009468:	2209      	movs	r2, #9
 800946a:	602a      	str	r2, [r5, #0]
 800946c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	f04f 30ff 	mov.w	r0, #4294967295
 8009476:	e033      	b.n	80094e0 <__swsetup_r+0x98>
 8009478:	0758      	lsls	r0, r3, #29
 800947a:	d512      	bpl.n	80094a2 <__swsetup_r+0x5a>
 800947c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800947e:	b141      	cbz	r1, 8009492 <__swsetup_r+0x4a>
 8009480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <__swsetup_r+0x46>
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff fb2d 	bl	8008ae8 <_free_r>
 800948e:	2300      	movs	r3, #0
 8009490:	6363      	str	r3, [r4, #52]	@ 0x34
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	2300      	movs	r3, #0
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f043 0308 	orr.w	r3, r3, #8
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	b94b      	cbnz	r3, 80094c2 <__swsetup_r+0x7a>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b8:	d003      	beq.n	80094c2 <__swsetup_r+0x7a>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f84f 	bl	8009560 <__smakebuf_r>
 80094c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c6:	f013 0201 	ands.w	r2, r3, #1
 80094ca:	d00a      	beq.n	80094e2 <__swsetup_r+0x9a>
 80094cc:	2200      	movs	r2, #0
 80094ce:	60a2      	str	r2, [r4, #8]
 80094d0:	6962      	ldr	r2, [r4, #20]
 80094d2:	4252      	negs	r2, r2
 80094d4:	61a2      	str	r2, [r4, #24]
 80094d6:	6922      	ldr	r2, [r4, #16]
 80094d8:	b942      	cbnz	r2, 80094ec <__swsetup_r+0xa4>
 80094da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094de:	d1c5      	bne.n	800946c <__swsetup_r+0x24>
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	0799      	lsls	r1, r3, #30
 80094e4:	bf58      	it	pl
 80094e6:	6962      	ldrpl	r2, [r4, #20]
 80094e8:	60a2      	str	r2, [r4, #8]
 80094ea:	e7f4      	b.n	80094d6 <__swsetup_r+0x8e>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e7f7      	b.n	80094e0 <__swsetup_r+0x98>
 80094f0:	2000010c 	.word	0x2000010c

080094f4 <_sbrk_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d06      	ldr	r5, [pc, #24]	@ (8009510 <_sbrk_r+0x1c>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7f7 fae8 	bl	8000ad4 <_sbrk>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_sbrk_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_sbrk_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	20005ee4 	.word	0x20005ee4

08009514 <__swhatbuf_r>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	460c      	mov	r4, r1
 8009518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951c:	2900      	cmp	r1, #0
 800951e:	b096      	sub	sp, #88	@ 0x58
 8009520:	4615      	mov	r5, r2
 8009522:	461e      	mov	r6, r3
 8009524:	da0d      	bge.n	8009542 <__swhatbuf_r+0x2e>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	bf14      	ite	ne
 8009532:	2340      	movne	r3, #64	@ 0x40
 8009534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009538:	2000      	movs	r0, #0
 800953a:	6031      	str	r1, [r6, #0]
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	b016      	add	sp, #88	@ 0x58
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	466a      	mov	r2, sp
 8009544:	f000 f848 	bl	80095d8 <_fstat_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	dbec      	blt.n	8009526 <__swhatbuf_r+0x12>
 800954c:	9901      	ldr	r1, [sp, #4]
 800954e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009556:	4259      	negs	r1, r3
 8009558:	4159      	adcs	r1, r3
 800955a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800955e:	e7eb      	b.n	8009538 <__swhatbuf_r+0x24>

08009560 <__smakebuf_r>:
 8009560:	898b      	ldrh	r3, [r1, #12]
 8009562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009564:	079d      	lsls	r5, r3, #30
 8009566:	4606      	mov	r6, r0
 8009568:	460c      	mov	r4, r1
 800956a:	d507      	bpl.n	800957c <__smakebuf_r+0x1c>
 800956c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	6123      	str	r3, [r4, #16]
 8009574:	2301      	movs	r3, #1
 8009576:	6163      	str	r3, [r4, #20]
 8009578:	b003      	add	sp, #12
 800957a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800957c:	ab01      	add	r3, sp, #4
 800957e:	466a      	mov	r2, sp
 8009580:	f7ff ffc8 	bl	8009514 <__swhatbuf_r>
 8009584:	9f00      	ldr	r7, [sp, #0]
 8009586:	4605      	mov	r5, r0
 8009588:	4639      	mov	r1, r7
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff fb18 	bl	8008bc0 <_malloc_r>
 8009590:	b948      	cbnz	r0, 80095a6 <__smakebuf_r+0x46>
 8009592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009596:	059a      	lsls	r2, r3, #22
 8009598:	d4ee      	bmi.n	8009578 <__smakebuf_r+0x18>
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	f043 0302 	orr.w	r3, r3, #2
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	e7e2      	b.n	800956c <__smakebuf_r+0xc>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	6020      	str	r0, [r4, #0]
 80095aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095b6:	b15b      	cbz	r3, 80095d0 <__smakebuf_r+0x70>
 80095b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 f81d 	bl	80095fc <_isatty_r>
 80095c2:	b128      	cbz	r0, 80095d0 <__smakebuf_r+0x70>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	431d      	orrs	r5, r3
 80095d4:	81a5      	strh	r5, [r4, #12]
 80095d6:	e7cf      	b.n	8009578 <__smakebuf_r+0x18>

080095d8 <_fstat_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	@ (80095f8 <_fstat_r+0x20>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	4611      	mov	r1, r2
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	f7f7 fa4c 	bl	8000a82 <_fstat>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d102      	bne.n	80095f4 <_fstat_r+0x1c>
 80095ee:	682b      	ldr	r3, [r5, #0]
 80095f0:	b103      	cbz	r3, 80095f4 <_fstat_r+0x1c>
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
 80095f6:	bf00      	nop
 80095f8:	20005ee4 	.word	0x20005ee4

080095fc <_isatty_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d06      	ldr	r5, [pc, #24]	@ (8009618 <_isatty_r+0x1c>)
 8009600:	2300      	movs	r3, #0
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	f7f7 fa4b 	bl	8000aa2 <_isatty>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d102      	bne.n	8009616 <_isatty_r+0x1a>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	b103      	cbz	r3, 8009616 <_isatty_r+0x1a>
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	20005ee4 	.word	0x20005ee4

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
